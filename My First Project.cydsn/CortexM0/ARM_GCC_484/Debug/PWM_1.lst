ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"PWM_1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	PWM_1_initVar
  18              		.bss
  19              		.type	PWM_1_initVar, %object
  20              		.size	PWM_1_initVar, 1
  21              	PWM_1_initVar:
  22 0000 00       		.space	1
  23              		.section	.text.PWM_1_Init,"ax",%progbits
  24              		.align	2
  25              		.global	PWM_1_Init
  26              		.code	16
  27              		.thumb_func
  28              		.type	PWM_1_Init, %function
  29              	PWM_1_Init:
  30              	.LFB0:
  31              		.file 1 ".\\Generated_Source\\PSoC4\\PWM_1.c"
   1:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/PWM_1.c **** * File Name: PWM_1.c
   3:.\Generated_Source\PSoC4/PWM_1.c **** * Version 1.10
   4:.\Generated_Source\PSoC4/PWM_1.c **** *
   5:.\Generated_Source\PSoC4/PWM_1.c **** * Description:
   6:.\Generated_Source\PSoC4/PWM_1.c **** *  This file provides the source code to the API for the PWM_1
   7:.\Generated_Source\PSoC4/PWM_1.c **** *  component
   8:.\Generated_Source\PSoC4/PWM_1.c **** *
   9:.\Generated_Source\PSoC4/PWM_1.c **** * Note:
  10:.\Generated_Source\PSoC4/PWM_1.c **** *  None
  11:.\Generated_Source\PSoC4/PWM_1.c **** *
  12:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
  13:.\Generated_Source\PSoC4/PWM_1.c **** * Copyright 2013-2014, Cypress Semiconductor Corporation.  All rights reserved.
  14:.\Generated_Source\PSoC4/PWM_1.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:.\Generated_Source\PSoC4/PWM_1.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:.\Generated_Source\PSoC4/PWM_1.c **** * the software package with which this file was provided.
  17:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
  18:.\Generated_Source\PSoC4/PWM_1.c **** 
  19:.\Generated_Source\PSoC4/PWM_1.c **** #include "PWM_1.h"
  20:.\Generated_Source\PSoC4/PWM_1.c **** #include "CyLib.h"
  21:.\Generated_Source\PSoC4/PWM_1.c **** 
  22:.\Generated_Source\PSoC4/PWM_1.c **** uint8 PWM_1_initVar = 0u;
  23:.\Generated_Source\PSoC4/PWM_1.c **** 
  24:.\Generated_Source\PSoC4/PWM_1.c **** 
  25:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
  26:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_Init
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 2


  27:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
  28:.\Generated_Source\PSoC4/PWM_1.c **** *
  29:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
  30:.\Generated_Source\PSoC4/PWM_1.c **** *  Initialize/Restore default PWM_1 configuration.
  31:.\Generated_Source\PSoC4/PWM_1.c **** *
  32:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
  33:.\Generated_Source\PSoC4/PWM_1.c **** *  None
  34:.\Generated_Source\PSoC4/PWM_1.c **** *
  35:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
  36:.\Generated_Source\PSoC4/PWM_1.c **** *  None
  37:.\Generated_Source\PSoC4/PWM_1.c **** *
  38:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
  39:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_Init(void)
  40:.\Generated_Source\PSoC4/PWM_1.c **** {
  32              		.loc 1 40 0
  33              		.cfi_startproc
  34 0000 80B5     		push	{r7, lr}
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 00AF     		add	r7, sp, #0
  39              		.cfi_def_cfa_register 7
  41:.\Generated_Source\PSoC4/PWM_1.c **** 
  42:.\Generated_Source\PSoC4/PWM_1.c ****     /* Set values from customizer to CTRL */
  43:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1__QUAD == PWM_1_CONFIG)
  44:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_CONTROL_REG =
  45:.\Generated_Source\PSoC4/PWM_1.c ****         (((uint32)(PWM_1_QUAD_ENCODING_MODES     << PWM_1_QUAD_MODE_SHIFT))       |
  46:.\Generated_Source\PSoC4/PWM_1.c ****          ((uint32)(PWM_1_CONFIG                  << PWM_1_MODE_SHIFT)));
  47:.\Generated_Source\PSoC4/PWM_1.c ****     #endif  /* (PWM_1__QUAD == PWM_1_CONFIG) */
  48:.\Generated_Source\PSoC4/PWM_1.c **** 
  49:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1__PWM_SEL == PWM_1_CONFIG)
  50:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_CONTROL_REG =
  40              		.loc 1 50 0
  41 0004 0F4B     		ldr	r3, .L2
  42 0006 8022     		mov	r2, #128
  43 0008 D204     		lsl	r2, r2, #19
  44 000a 1A60     		str	r2, [r3]
  51:.\Generated_Source\PSoC4/PWM_1.c ****         (((uint32)(PWM_1_PWM_STOP_EVENT          << PWM_1_PWM_STOP_KILL_SHIFT))    |
  52:.\Generated_Source\PSoC4/PWM_1.c ****          ((uint32)(PWM_1_PWM_OUT_INVERT          << PWM_1_INV_OUT_SHIFT))         |
  53:.\Generated_Source\PSoC4/PWM_1.c ****          ((uint32)(PWM_1_PWM_OUT_N_INVERT        << PWM_1_INV_COMPL_OUT_SHIFT))     |
  54:.\Generated_Source\PSoC4/PWM_1.c ****          ((uint32)(PWM_1_PWM_MODE                << PWM_1_MODE_SHIFT)));
  55:.\Generated_Source\PSoC4/PWM_1.c **** 
  56:.\Generated_Source\PSoC4/PWM_1.c ****         #if (PWM_1__PWM_PR == PWM_1_PWM_MODE)
  57:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_CONTROL_REG |=
  58:.\Generated_Source\PSoC4/PWM_1.c ****             ((uint32)(PWM_1_PWM_RUN_MODE         << PWM_1_ONESHOT_SHIFT));
  59:.\Generated_Source\PSoC4/PWM_1.c **** 
  60:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_WriteCounter(PWM_1_PWM_PR_INIT_VALUE);
  61:.\Generated_Source\PSoC4/PWM_1.c ****         #else
  62:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_CONTROL_REG |=
  45              		.loc 1 62 0
  46 000c 0D4B     		ldr	r3, .L2
  47 000e 0D4A     		ldr	r2, .L2
  48 0010 1268     		ldr	r2, [r2]
  49 0012 1A60     		str	r2, [r3]
  63:.\Generated_Source\PSoC4/PWM_1.c ****             (((uint32)(PWM_1_PWM_ALIGN           << PWM_1_UPDOWN_SHIFT))          |
  64:.\Generated_Source\PSoC4/PWM_1.c ****              ((uint32)(PWM_1_PWM_KILL_EVENT      << PWM_1_PWM_SYNC_KILL_SHIFT)));
  65:.\Generated_Source\PSoC4/PWM_1.c ****         #endif  /* (PWM_1__PWM_PR == PWM_1_PWM_MODE) */
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 3


  66:.\Generated_Source\PSoC4/PWM_1.c **** 
  67:.\Generated_Source\PSoC4/PWM_1.c ****         #if (PWM_1__PWM_DT == PWM_1_PWM_MODE)
  68:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_CONTROL_REG |=
  69:.\Generated_Source\PSoC4/PWM_1.c ****             ((uint32)(PWM_1_PWM_DEAD_TIME_CYCLE  << PWM_1_PRESCALER_SHIFT));
  70:.\Generated_Source\PSoC4/PWM_1.c ****         #endif  /* (PWM_1__PWM_DT == PWM_1_PWM_MODE) */
  71:.\Generated_Source\PSoC4/PWM_1.c **** 
  72:.\Generated_Source\PSoC4/PWM_1.c ****         #if (PWM_1__PWM == PWM_1_PWM_MODE)
  73:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_CONTROL_REG |=
  50              		.loc 1 73 0
  51 0014 0B4B     		ldr	r3, .L2
  52 0016 0B4A     		ldr	r2, .L2
  53 0018 1268     		ldr	r2, [r2]
  54 001a 1A60     		str	r2, [r3]
  74:.\Generated_Source\PSoC4/PWM_1.c ****             ((uint32)PWM_1_PWM_PRESCALER         << PWM_1_PRESCALER_SHIFT);
  75:.\Generated_Source\PSoC4/PWM_1.c ****         #endif  /* (PWM_1__PWM == PWM_1_PWM_MODE) */
  76:.\Generated_Source\PSoC4/PWM_1.c ****     #endif  /* (PWM_1__PWM_SEL == PWM_1_CONFIG) */
  77:.\Generated_Source\PSoC4/PWM_1.c **** 
  78:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1__TIMER == PWM_1_CONFIG)
  79:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_CONTROL_REG =
  80:.\Generated_Source\PSoC4/PWM_1.c ****         (((uint32)(PWM_1_TC_PRESCALER            << PWM_1_PRESCALER_SHIFT))   |
  81:.\Generated_Source\PSoC4/PWM_1.c ****          ((uint32)(PWM_1_TC_COUNTER_MODE         << PWM_1_UPDOWN_SHIFT))      |
  82:.\Generated_Source\PSoC4/PWM_1.c ****          ((uint32)(PWM_1_TC_RUN_MODE             << PWM_1_ONESHOT_SHIFT))     |
  83:.\Generated_Source\PSoC4/PWM_1.c ****          ((uint32)(PWM_1_TC_COMP_CAP_MODE        << PWM_1_MODE_SHIFT)));
  84:.\Generated_Source\PSoC4/PWM_1.c ****     #endif  /* (PWM_1__TIMER == PWM_1_CONFIG) */
  85:.\Generated_Source\PSoC4/PWM_1.c **** 
  86:.\Generated_Source\PSoC4/PWM_1.c ****     /* Set values from customizer to CTRL1 */
  87:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1__QUAD == PWM_1_CONFIG)
  88:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_TRIG_CONTROL1_REG  =
  89:.\Generated_Source\PSoC4/PWM_1.c ****         (((uint32)(PWM_1_QUAD_PHIA_SIGNAL_MODE   << PWM_1_COUNT_SHIFT))       |
  90:.\Generated_Source\PSoC4/PWM_1.c ****          ((uint32)(PWM_1_QUAD_INDEX_SIGNAL_MODE  << PWM_1_RELOAD_SHIFT))      |
  91:.\Generated_Source\PSoC4/PWM_1.c ****          ((uint32)(PWM_1_QUAD_STOP_SIGNAL_MODE   << PWM_1_STOP_SHIFT))        |
  92:.\Generated_Source\PSoC4/PWM_1.c ****          ((uint32)(PWM_1_QUAD_PHIB_SIGNAL_MODE   << PWM_1_START_SHIFT)));
  93:.\Generated_Source\PSoC4/PWM_1.c ****     #endif  /* (PWM_1__QUAD == PWM_1_CONFIG) */
  94:.\Generated_Source\PSoC4/PWM_1.c **** 
  95:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1__PWM_SEL == PWM_1_CONFIG)
  96:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_TRIG_CONTROL1_REG  =
  55              		.loc 1 96 0
  56 001c 0A4B     		ldr	r3, .L2+4
  57 001e 0C22     		mov	r2, #12
  58 0020 1A60     		str	r2, [r3]
  97:.\Generated_Source\PSoC4/PWM_1.c ****         (((uint32)(PWM_1_PWM_SWITCH_SIGNAL_MODE  << PWM_1_CAPTURE_SHIFT))     |
  98:.\Generated_Source\PSoC4/PWM_1.c ****          ((uint32)(PWM_1_PWM_COUNT_SIGNAL_MODE   << PWM_1_COUNT_SHIFT))       |
  99:.\Generated_Source\PSoC4/PWM_1.c ****          ((uint32)(PWM_1_PWM_RELOAD_SIGNAL_MODE  << PWM_1_RELOAD_SHIFT))      |
 100:.\Generated_Source\PSoC4/PWM_1.c ****          ((uint32)(PWM_1_PWM_STOP_SIGNAL_MODE    << PWM_1_STOP_SHIFT))        |
 101:.\Generated_Source\PSoC4/PWM_1.c ****          ((uint32)(PWM_1_PWM_START_SIGNAL_MODE   << PWM_1_START_SHIFT)));
 102:.\Generated_Source\PSoC4/PWM_1.c ****     #endif  /* (PWM_1__PWM_SEL == PWM_1_CONFIG) */
 103:.\Generated_Source\PSoC4/PWM_1.c **** 
 104:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1__TIMER == PWM_1_CONFIG)
 105:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_TRIG_CONTROL1_REG  =
 106:.\Generated_Source\PSoC4/PWM_1.c ****         (((uint32)(PWM_1_TC_CAPTURE_SIGNAL_MODE  << PWM_1_CAPTURE_SHIFT))     |
 107:.\Generated_Source\PSoC4/PWM_1.c ****          ((uint32)(PWM_1_TC_COUNT_SIGNAL_MODE    << PWM_1_COUNT_SHIFT))       |
 108:.\Generated_Source\PSoC4/PWM_1.c ****          ((uint32)(PWM_1_TC_RELOAD_SIGNAL_MODE   << PWM_1_RELOAD_SHIFT))      |
 109:.\Generated_Source\PSoC4/PWM_1.c ****          ((uint32)(PWM_1_TC_STOP_SIGNAL_MODE     << PWM_1_STOP_SHIFT))        |
 110:.\Generated_Source\PSoC4/PWM_1.c ****          ((uint32)(PWM_1_TC_START_SIGNAL_MODE    << PWM_1_START_SHIFT)));
 111:.\Generated_Source\PSoC4/PWM_1.c ****     #endif  /* (PWM_1__TIMER == PWM_1_CONFIG) */
 112:.\Generated_Source\PSoC4/PWM_1.c **** 
 113:.\Generated_Source\PSoC4/PWM_1.c ****     /* Set values from customizer to INTR */
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 4


 114:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1__QUAD == PWM_1_CONFIG)
 115:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_SetInterruptMode(PWM_1_QUAD_INTERRUPT_MASK);
 116:.\Generated_Source\PSoC4/PWM_1.c ****     #endif  /* (PWM_1__QUAD == PWM_1_CONFIG) */
 117:.\Generated_Source\PSoC4/PWM_1.c **** 
 118:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1__PWM_SEL == PWM_1_CONFIG)
 119:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_SetInterruptMode(PWM_1_PWM_INTERRUPT_MASK);
  59              		.loc 1 119 0
  60 0022 0120     		mov	r0, #1
  61 0024 FFF7FEFF 		bl	PWM_1_SetInterruptMode
 120:.\Generated_Source\PSoC4/PWM_1.c ****     #endif  /* (PWM_1__PWM_SEL == PWM_1_CONFIG) */
 121:.\Generated_Source\PSoC4/PWM_1.c **** 
 122:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1__TIMER == PWM_1_CONFIG)
 123:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_SetInterruptMode(PWM_1_TC_INTERRUPT_MASK);
 124:.\Generated_Source\PSoC4/PWM_1.c ****     #endif  /* (PWM_1__TIMER == PWM_1_CONFIG) */
 125:.\Generated_Source\PSoC4/PWM_1.c **** 
 126:.\Generated_Source\PSoC4/PWM_1.c ****     /* Set other values from customizer */
 127:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1__TIMER == PWM_1_CONFIG)
 128:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_WritePeriod(PWM_1_TC_PERIOD_VALUE );
 129:.\Generated_Source\PSoC4/PWM_1.c **** 
 130:.\Generated_Source\PSoC4/PWM_1.c ****         #if (PWM_1__COUNT_DOWN == PWM_1_TC_COUNTER_MODE)
 131:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_WriteCounter(PWM_1_TC_PERIOD_VALUE );
 132:.\Generated_Source\PSoC4/PWM_1.c ****         #endif  /* (PWM_1__COUNT_DOWN == PWM_1_TC_COUNTER_MODE) */
 133:.\Generated_Source\PSoC4/PWM_1.c **** 
 134:.\Generated_Source\PSoC4/PWM_1.c ****         #if (PWM_1__COMPARE == PWM_1_TC_COMP_CAP_MODE)
 135:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_WriteCompare(PWM_1_TC_COMPARE_VALUE);
 136:.\Generated_Source\PSoC4/PWM_1.c **** 
 137:.\Generated_Source\PSoC4/PWM_1.c ****             #if (1u == PWM_1_TC_COMPARE_SWAP)
 138:.\Generated_Source\PSoC4/PWM_1.c ****                 PWM_1_SetCompareSwap(1u);
 139:.\Generated_Source\PSoC4/PWM_1.c ****                 PWM_1_WriteCompareBuf(PWM_1_TC_COMPARE_BUF_VALUE);
 140:.\Generated_Source\PSoC4/PWM_1.c ****             #endif  /* (1u == PWM_1_TC_COMPARE_SWAP) */
 141:.\Generated_Source\PSoC4/PWM_1.c ****         #endif  /* (PWM_1__COMPARE == PWM_1_TC_COMP_CAP_MODE) */
 142:.\Generated_Source\PSoC4/PWM_1.c ****     #endif  /* (PWM_1__TIMER == PWM_1_CONFIG) */
 143:.\Generated_Source\PSoC4/PWM_1.c **** 
 144:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1__PWM_SEL == PWM_1_CONFIG)
 145:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_WritePeriod(PWM_1_PWM_PERIOD_VALUE );
  62              		.loc 1 145 0
  63 0028 084B     		ldr	r3, .L2+8
  64 002a 181C     		mov	r0, r3
  65 002c FFF7FEFF 		bl	PWM_1_WritePeriod
 146:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_WriteCompare(PWM_1_PWM_COMPARE_VALUE);
  66              		.loc 1 146 0
  67 0030 074B     		ldr	r3, .L2+12
  68 0032 181C     		mov	r0, r3
  69 0034 FFF7FEFF 		bl	PWM_1_WriteCompare
 147:.\Generated_Source\PSoC4/PWM_1.c **** 
 148:.\Generated_Source\PSoC4/PWM_1.c ****         #if (1u == PWM_1_PWM_COMPARE_SWAP)
 149:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_SetCompareSwap(1u);
 150:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_WriteCompareBuf(PWM_1_PWM_COMPARE_BUF_VALUE);
 151:.\Generated_Source\PSoC4/PWM_1.c ****         #endif  /* (1u == PWM_1_PWM_COMPARE_SWAP) */
 152:.\Generated_Source\PSoC4/PWM_1.c **** 
 153:.\Generated_Source\PSoC4/PWM_1.c ****         #if (1u == PWM_1_PWM_PERIOD_SWAP)
 154:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_SetPeriodSwap(1u);
 155:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_WritePeriodBuf(PWM_1_PWM_PERIOD_BUF_VALUE);
 156:.\Generated_Source\PSoC4/PWM_1.c ****         #endif  /* (1u == PWM_1_PWM_PERIOD_SWAP) */
 157:.\Generated_Source\PSoC4/PWM_1.c **** 
 158:.\Generated_Source\PSoC4/PWM_1.c ****         /* Set values from customizer to CTRL2 */
 159:.\Generated_Source\PSoC4/PWM_1.c ****         #if (PWM_1__PWM_PR == PWM_1_PWM_MODE)
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 5


 160:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_TRIG_CONTROL2_REG =
 161:.\Generated_Source\PSoC4/PWM_1.c ****                     (PWM_1_CC_MATCH_NO_CHANGE    |
 162:.\Generated_Source\PSoC4/PWM_1.c ****                     PWM_1_OVERLOW_NO_CHANGE      |
 163:.\Generated_Source\PSoC4/PWM_1.c ****                     PWM_1_UNDERFLOW_NO_CHANGE);
 164:.\Generated_Source\PSoC4/PWM_1.c ****         #else
 165:.\Generated_Source\PSoC4/PWM_1.c ****             #if (PWM_1__LEFT == PWM_1_PWM_ALIGN)
 166:.\Generated_Source\PSoC4/PWM_1.c ****                 PWM_1_TRIG_CONTROL2_REG = PWM_1_PWM_MODE_LEFT;
  70              		.loc 1 166 0
  71 0038 064B     		ldr	r3, .L2+16
  72 003a 3122     		mov	r2, #49
  73 003c 1A60     		str	r2, [r3]
 167:.\Generated_Source\PSoC4/PWM_1.c ****             #endif  /* ( PWM_1_PWM_LEFT == PWM_1_PWM_ALIGN) */
 168:.\Generated_Source\PSoC4/PWM_1.c **** 
 169:.\Generated_Source\PSoC4/PWM_1.c ****             #if (PWM_1__RIGHT == PWM_1_PWM_ALIGN)
 170:.\Generated_Source\PSoC4/PWM_1.c ****                 PWM_1_WriteCounter(PWM_1_PWM_PERIOD_VALUE);
 171:.\Generated_Source\PSoC4/PWM_1.c ****                 PWM_1_TRIG_CONTROL2_REG = PWM_1_PWM_MODE_RIGHT;
 172:.\Generated_Source\PSoC4/PWM_1.c ****             #endif  /* ( PWM_1_PWM_RIGHT == PWM_1_PWM_ALIGN) */
 173:.\Generated_Source\PSoC4/PWM_1.c **** 
 174:.\Generated_Source\PSoC4/PWM_1.c ****             #if (PWM_1__CENTER == PWM_1_PWM_ALIGN)
 175:.\Generated_Source\PSoC4/PWM_1.c ****                 PWM_1_TRIG_CONTROL2_REG = PWM_1_PWM_MODE_CENTER;
 176:.\Generated_Source\PSoC4/PWM_1.c ****             #endif  /* ( PWM_1_PWM_CENTER == PWM_1_PWM_ALIGN) */
 177:.\Generated_Source\PSoC4/PWM_1.c **** 
 178:.\Generated_Source\PSoC4/PWM_1.c ****             #if (PWM_1__ASYMMETRIC == PWM_1_PWM_ALIGN)
 179:.\Generated_Source\PSoC4/PWM_1.c ****                 PWM_1_TRIG_CONTROL2_REG = PWM_1_PWM_MODE_ASYM;
 180:.\Generated_Source\PSoC4/PWM_1.c ****             #endif  /* (PWM_1__ASYMMETRIC == PWM_1_PWM_ALIGN) */
 181:.\Generated_Source\PSoC4/PWM_1.c ****         #endif  /* (PWM_1__PWM_PR == PWM_1_PWM_MODE) */
 182:.\Generated_Source\PSoC4/PWM_1.c ****     #endif  /* (PWM_1__PWM_SEL == PWM_1_CONFIG) */
 183:.\Generated_Source\PSoC4/PWM_1.c **** }
  74              		.loc 1 183 0
  75 003e BD46     		mov	sp, r7
  76              		@ sp needed
  77 0040 80BD     		pop	{r7, pc}
  78              	.L3:
  79 0042 C046     		.align	2
  80              	.L2:
  81 0044 00010540 		.word	1074069760
  82 0048 24010540 		.word	1074069796
  83 004c 30110000 		.word	4400
  84 0050 98080000 		.word	2200
  85 0054 28010540 		.word	1074069800
  86              		.cfi_endproc
  87              	.LFE0:
  88              		.size	PWM_1_Init, .-PWM_1_Init
  89              		.section	.text.PWM_1_Enable,"ax",%progbits
  90              		.align	2
  91              		.global	PWM_1_Enable
  92              		.code	16
  93              		.thumb_func
  94              		.type	PWM_1_Enable, %function
  95              	PWM_1_Enable:
  96              	.LFB1:
 184:.\Generated_Source\PSoC4/PWM_1.c **** 
 185:.\Generated_Source\PSoC4/PWM_1.c **** 
 186:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 187:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_Enable
 188:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 189:.\Generated_Source\PSoC4/PWM_1.c **** *
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 6


 190:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 191:.\Generated_Source\PSoC4/PWM_1.c **** *  Enables the PWM_1.
 192:.\Generated_Source\PSoC4/PWM_1.c **** *
 193:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 194:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 195:.\Generated_Source\PSoC4/PWM_1.c **** *
 196:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 197:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 198:.\Generated_Source\PSoC4/PWM_1.c **** *
 199:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 200:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_Enable(void)
 201:.\Generated_Source\PSoC4/PWM_1.c **** {
  97              		.loc 1 201 0
  98              		.cfi_startproc
  99 0000 90B5     		push	{r4, r7, lr}
 100              		.cfi_def_cfa_offset 12
 101              		.cfi_offset 4, -12
 102              		.cfi_offset 7, -8
 103              		.cfi_offset 14, -4
 104 0002 83B0     		sub	sp, sp, #12
 105              		.cfi_def_cfa_offset 24
 106 0004 00AF     		add	r7, sp, #0
 107              		.cfi_def_cfa_register 7
 202:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
 203:.\Generated_Source\PSoC4/PWM_1.c **** 
 204:.\Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 108              		.loc 1 204 0
 109 0006 FC1D     		add	r4, r7, #7
 110 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 111 000c 031C     		mov	r3, r0
 112 000e 2370     		strb	r3, [r4]
 205:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_BLOCK_CONTROL_REG |= PWM_1_MASK;
 113              		.loc 1 205 0
 114 0010 084B     		ldr	r3, .L5
 115 0012 084A     		ldr	r2, .L5
 116 0014 1268     		ldr	r2, [r2]
 117 0016 0121     		mov	r1, #1
 118 0018 0A43     		orr	r2, r1
 119 001a 1A60     		str	r2, [r3]
 206:.\Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 120              		.loc 1 206 0
 121 001c FB1D     		add	r3, r7, #7
 122 001e 1B78     		ldrb	r3, [r3]
 123 0020 181C     		mov	r0, r3
 124 0022 FFF7FEFF 		bl	CyExitCriticalSection
 207:.\Generated_Source\PSoC4/PWM_1.c **** 
 208:.\Generated_Source\PSoC4/PWM_1.c ****     /* Start Timer or PWM if start input is absent */
 209:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1__PWM_SEL == PWM_1_CONFIG)
 210:.\Generated_Source\PSoC4/PWM_1.c ****         #if (0u == PWM_1_PWM_START_SIGNAL_PRESENT)
 211:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_TriggerCommand(PWM_1_MASK, PWM_1_CMD_START);
 125              		.loc 1 211 0
 126 0026 0120     		mov	r0, #1
 127 0028 1821     		mov	r1, #24
 128 002a FFF7FEFF 		bl	PWM_1_TriggerCommand
 212:.\Generated_Source\PSoC4/PWM_1.c ****         #endif /* (0u == PWM_1_PWM_START_SIGNAL_PRESENT) */
 213:.\Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1__PWM_SEL == PWM_1_CONFIG) */
 214:.\Generated_Source\PSoC4/PWM_1.c **** 
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 7


 215:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1__TIMER == PWM_1_CONFIG)
 216:.\Generated_Source\PSoC4/PWM_1.c ****         #if (0u == PWM_1_TC_START_SIGNAL_PRESENT)
 217:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_TriggerCommand(PWM_1_MASK, PWM_1_CMD_START);
 218:.\Generated_Source\PSoC4/PWM_1.c ****         #endif /* (0u == PWM_1_TC_START_SIGNAL_PRESENT) */
 219:.\Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1__TIMER == PWM_1_CONFIG) */
 220:.\Generated_Source\PSoC4/PWM_1.c **** }
 129              		.loc 1 220 0
 130 002e BD46     		mov	sp, r7
 131 0030 03B0     		add	sp, sp, #12
 132              		@ sp needed
 133 0032 90BD     		pop	{r4, r7, pc}
 134              	.L6:
 135              		.align	2
 136              	.L5:
 137 0034 00000540 		.word	1074069504
 138              		.cfi_endproc
 139              	.LFE1:
 140              		.size	PWM_1_Enable, .-PWM_1_Enable
 141              		.section	.text.PWM_1_Start,"ax",%progbits
 142              		.align	2
 143              		.global	PWM_1_Start
 144              		.code	16
 145              		.thumb_func
 146              		.type	PWM_1_Start, %function
 147              	PWM_1_Start:
 148              	.LFB2:
 221:.\Generated_Source\PSoC4/PWM_1.c **** 
 222:.\Generated_Source\PSoC4/PWM_1.c **** 
 223:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 224:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_Start
 225:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 226:.\Generated_Source\PSoC4/PWM_1.c **** *
 227:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 228:.\Generated_Source\PSoC4/PWM_1.c **** *  Initializes the PWM_1 with default customizer
 229:.\Generated_Source\PSoC4/PWM_1.c **** *  values when called the first time and enables the PWM_1.
 230:.\Generated_Source\PSoC4/PWM_1.c **** *  For subsequent calls the configuration is left unchanged and the component is
 231:.\Generated_Source\PSoC4/PWM_1.c **** *  just enabled.
 232:.\Generated_Source\PSoC4/PWM_1.c **** *
 233:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 234:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 235:.\Generated_Source\PSoC4/PWM_1.c **** *
 236:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 237:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 238:.\Generated_Source\PSoC4/PWM_1.c **** *
 239:.\Generated_Source\PSoC4/PWM_1.c **** * Global variables:
 240:.\Generated_Source\PSoC4/PWM_1.c **** *  PWM_1_initVar: global variable is used to indicate initial
 241:.\Generated_Source\PSoC4/PWM_1.c **** *  configuration of this component.  The variable is initialized to zero and set
 242:.\Generated_Source\PSoC4/PWM_1.c **** *  to 1 the first time PWM_1_Start() is called. This allows
 243:.\Generated_Source\PSoC4/PWM_1.c **** *  enabling/disabling a component without re-initialization in all subsequent
 244:.\Generated_Source\PSoC4/PWM_1.c **** *  calls to the PWM_1_Start() routine.
 245:.\Generated_Source\PSoC4/PWM_1.c **** *
 246:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 247:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_Start(void)
 248:.\Generated_Source\PSoC4/PWM_1.c **** {
 149              		.loc 1 248 0
 150              		.cfi_startproc
 151 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 8


 152              		.cfi_def_cfa_offset 8
 153              		.cfi_offset 7, -8
 154              		.cfi_offset 14, -4
 155 0002 00AF     		add	r7, sp, #0
 156              		.cfi_def_cfa_register 7
 249:.\Generated_Source\PSoC4/PWM_1.c ****     if (0u == PWM_1_initVar)
 157              		.loc 1 249 0
 158 0004 064B     		ldr	r3, .L9
 159 0006 1B78     		ldrb	r3, [r3]
 160 0008 002B     		cmp	r3, #0
 161 000a 04D1     		bne	.L8
 250:.\Generated_Source\PSoC4/PWM_1.c ****     {
 251:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_Init();
 162              		.loc 1 251 0
 163 000c FFF7FEFF 		bl	PWM_1_Init
 252:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_initVar = 1u;
 164              		.loc 1 252 0
 165 0010 034B     		ldr	r3, .L9
 166 0012 0122     		mov	r2, #1
 167 0014 1A70     		strb	r2, [r3]
 168              	.L8:
 253:.\Generated_Source\PSoC4/PWM_1.c ****     }
 254:.\Generated_Source\PSoC4/PWM_1.c **** 
 255:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_Enable();
 169              		.loc 1 255 0
 170 0016 FFF7FEFF 		bl	PWM_1_Enable
 256:.\Generated_Source\PSoC4/PWM_1.c **** }
 171              		.loc 1 256 0
 172 001a BD46     		mov	sp, r7
 173              		@ sp needed
 174 001c 80BD     		pop	{r7, pc}
 175              	.L10:
 176 001e C046     		.align	2
 177              	.L9:
 178 0020 00000000 		.word	PWM_1_initVar
 179              		.cfi_endproc
 180              	.LFE2:
 181              		.size	PWM_1_Start, .-PWM_1_Start
 182              		.section	.text.PWM_1_Stop,"ax",%progbits
 183              		.align	2
 184              		.global	PWM_1_Stop
 185              		.code	16
 186              		.thumb_func
 187              		.type	PWM_1_Stop, %function
 188              	PWM_1_Stop:
 189              	.LFB3:
 257:.\Generated_Source\PSoC4/PWM_1.c **** 
 258:.\Generated_Source\PSoC4/PWM_1.c **** 
 259:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 260:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_Stop
 261:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 262:.\Generated_Source\PSoC4/PWM_1.c **** *
 263:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 264:.\Generated_Source\PSoC4/PWM_1.c **** *  Disables the PWM_1.
 265:.\Generated_Source\PSoC4/PWM_1.c **** *
 266:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 267:.\Generated_Source\PSoC4/PWM_1.c **** *  None
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 9


 268:.\Generated_Source\PSoC4/PWM_1.c **** *
 269:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 270:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 271:.\Generated_Source\PSoC4/PWM_1.c **** *
 272:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 273:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_Stop(void)
 274:.\Generated_Source\PSoC4/PWM_1.c **** {
 190              		.loc 1 274 0
 191              		.cfi_startproc
 192 0000 90B5     		push	{r4, r7, lr}
 193              		.cfi_def_cfa_offset 12
 194              		.cfi_offset 4, -12
 195              		.cfi_offset 7, -8
 196              		.cfi_offset 14, -4
 197 0002 83B0     		sub	sp, sp, #12
 198              		.cfi_def_cfa_offset 24
 199 0004 00AF     		add	r7, sp, #0
 200              		.cfi_def_cfa_register 7
 275:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
 276:.\Generated_Source\PSoC4/PWM_1.c **** 
 277:.\Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 201              		.loc 1 277 0
 202 0006 FC1D     		add	r4, r7, #7
 203 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 204 000c 031C     		mov	r3, r0
 205 000e 2370     		strb	r3, [r4]
 278:.\Generated_Source\PSoC4/PWM_1.c **** 
 279:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_BLOCK_CONTROL_REG &= (uint32)~PWM_1_MASK;
 206              		.loc 1 279 0
 207 0010 064B     		ldr	r3, .L12
 208 0012 064A     		ldr	r2, .L12
 209 0014 1268     		ldr	r2, [r2]
 210 0016 0121     		mov	r1, #1
 211 0018 8A43     		bic	r2, r1
 212 001a 1A60     		str	r2, [r3]
 280:.\Generated_Source\PSoC4/PWM_1.c **** 
 281:.\Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 213              		.loc 1 281 0
 214 001c FB1D     		add	r3, r7, #7
 215 001e 1B78     		ldrb	r3, [r3]
 216 0020 181C     		mov	r0, r3
 217 0022 FFF7FEFF 		bl	CyExitCriticalSection
 282:.\Generated_Source\PSoC4/PWM_1.c **** }
 218              		.loc 1 282 0
 219 0026 BD46     		mov	sp, r7
 220 0028 03B0     		add	sp, sp, #12
 221              		@ sp needed
 222 002a 90BD     		pop	{r4, r7, pc}
 223              	.L13:
 224              		.align	2
 225              	.L12:
 226 002c 00000540 		.word	1074069504
 227              		.cfi_endproc
 228              	.LFE3:
 229              		.size	PWM_1_Stop, .-PWM_1_Stop
 230              		.section	.text.PWM_1_SetMode,"ax",%progbits
 231              		.align	2
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 10


 232              		.global	PWM_1_SetMode
 233              		.code	16
 234              		.thumb_func
 235              		.type	PWM_1_SetMode, %function
 236              	PWM_1_SetMode:
 237              	.LFB4:
 283:.\Generated_Source\PSoC4/PWM_1.c **** 
 284:.\Generated_Source\PSoC4/PWM_1.c **** 
 285:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 286:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetMode
 287:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 288:.\Generated_Source\PSoC4/PWM_1.c **** *
 289:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 290:.\Generated_Source\PSoC4/PWM_1.c **** *  Sets the operation mode of the PWM_1. This function is used when
 291:.\Generated_Source\PSoC4/PWM_1.c **** *  configured as a generic PWM_1 and the actual mode of operation is
 292:.\Generated_Source\PSoC4/PWM_1.c **** *  set at runtime. The mode must be set while the component is disabled.
 293:.\Generated_Source\PSoC4/PWM_1.c **** *
 294:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 295:.\Generated_Source\PSoC4/PWM_1.c **** *  mode: Mode for the PWM_1 to operate in
 296:.\Generated_Source\PSoC4/PWM_1.c **** *   Values:
 297:.\Generated_Source\PSoC4/PWM_1.c **** *   - PWM_1_MODE_TIMER_COMPARE - Timer / Counter with
 298:.\Generated_Source\PSoC4/PWM_1.c **** *                                                 compare capability
 299:.\Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_MODE_TIMER_CAPTURE - Timer / Counter with
 300:.\Generated_Source\PSoC4/PWM_1.c **** *                                                 capture capability
 301:.\Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_MODE_QUAD - Quadrature decoder
 302:.\Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_MODE_PWM - PWM
 303:.\Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_MODE_PWM_DT - PWM with dead time
 304:.\Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_MODE_PWM_PR - PWM with pseudo random capability
 305:.\Generated_Source\PSoC4/PWM_1.c **** *
 306:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 307:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 308:.\Generated_Source\PSoC4/PWM_1.c **** *
 309:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 310:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetMode(uint32 mode)
 311:.\Generated_Source\PSoC4/PWM_1.c **** {
 238              		.loc 1 311 0
 239              		.cfi_startproc
 240 0000 90B5     		push	{r4, r7, lr}
 241              		.cfi_def_cfa_offset 12
 242              		.cfi_offset 4, -12
 243              		.cfi_offset 7, -8
 244              		.cfi_offset 14, -4
 245 0002 85B0     		sub	sp, sp, #20
 246              		.cfi_def_cfa_offset 32
 247 0004 00AF     		add	r7, sp, #0
 248              		.cfi_def_cfa_register 7
 249 0006 7860     		str	r0, [r7, #4]
 312:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
 313:.\Generated_Source\PSoC4/PWM_1.c **** 
 314:.\Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 250              		.loc 1 314 0
 251 0008 3C1C     		mov	r4, r7
 252 000a 0F34     		add	r4, r4, #15
 253 000c FFF7FEFF 		bl	CyEnterCriticalSection
 254 0010 031C     		mov	r3, r0
 255 0012 2370     		strb	r3, [r4]
 315:.\Generated_Source\PSoC4/PWM_1.c **** 
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 11


 316:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG &= (uint32)~PWM_1_MODE_MASK;
 256              		.loc 1 316 0
 257 0014 0A4B     		ldr	r3, .L15
 258 0016 0A4A     		ldr	r2, .L15
 259 0018 1168     		ldr	r1, [r2]
 260 001a 0A4A     		ldr	r2, .L15+4
 261 001c 0A40     		and	r2, r1
 262 001e 1A60     		str	r2, [r3]
 317:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG |= mode;
 263              		.loc 1 317 0
 264 0020 074B     		ldr	r3, .L15
 265 0022 074A     		ldr	r2, .L15
 266 0024 1168     		ldr	r1, [r2]
 267 0026 7A68     		ldr	r2, [r7, #4]
 268 0028 0A43     		orr	r2, r1
 269 002a 1A60     		str	r2, [r3]
 318:.\Generated_Source\PSoC4/PWM_1.c **** 
 319:.\Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 270              		.loc 1 319 0
 271 002c 3B1C     		mov	r3, r7
 272 002e 0F33     		add	r3, r3, #15
 273 0030 1B78     		ldrb	r3, [r3]
 274 0032 181C     		mov	r0, r3
 275 0034 FFF7FEFF 		bl	CyExitCriticalSection
 320:.\Generated_Source\PSoC4/PWM_1.c **** }
 276              		.loc 1 320 0
 277 0038 BD46     		mov	sp, r7
 278 003a 05B0     		add	sp, sp, #20
 279              		@ sp needed
 280 003c 90BD     		pop	{r4, r7, pc}
 281              	.L16:
 282 003e C046     		.align	2
 283              	.L15:
 284 0040 00010540 		.word	1074069760
 285 0044 FFFFFFF8 		.word	-117440513
 286              		.cfi_endproc
 287              	.LFE4:
 288              		.size	PWM_1_SetMode, .-PWM_1_SetMode
 289              		.section	.text.PWM_1_SetQDMode,"ax",%progbits
 290              		.align	2
 291              		.global	PWM_1_SetQDMode
 292              		.code	16
 293              		.thumb_func
 294              		.type	PWM_1_SetQDMode, %function
 295              	PWM_1_SetQDMode:
 296              	.LFB5:
 321:.\Generated_Source\PSoC4/PWM_1.c **** 
 322:.\Generated_Source\PSoC4/PWM_1.c **** 
 323:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 324:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetQDMode
 325:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 326:.\Generated_Source\PSoC4/PWM_1.c **** *
 327:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 328:.\Generated_Source\PSoC4/PWM_1.c **** *  Sets the the Quadrature Decoder to one of the 3 supported modes.
 329:.\Generated_Source\PSoC4/PWM_1.c **** *  Its functionality is only applicable to Quadrature Decoder operation.
 330:.\Generated_Source\PSoC4/PWM_1.c **** *
 331:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 12


 332:.\Generated_Source\PSoC4/PWM_1.c **** *  qdMode: Quadrature Decoder mode
 333:.\Generated_Source\PSoC4/PWM_1.c **** *   Values:
 334:.\Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_MODE_X1 - Counts on phi 1 rising
 335:.\Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_MODE_X2 - Counts on both edges of phi1 (2x faster)
 336:.\Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_MODE_X4 - Counts on both edges of phi1 and phi2
 337:.\Generated_Source\PSoC4/PWM_1.c **** *                                        (4x faster)
 338:.\Generated_Source\PSoC4/PWM_1.c **** *
 339:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 340:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 341:.\Generated_Source\PSoC4/PWM_1.c **** *
 342:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 343:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetQDMode(uint32 qdMode)
 344:.\Generated_Source\PSoC4/PWM_1.c **** {
 297              		.loc 1 344 0
 298              		.cfi_startproc
 299 0000 90B5     		push	{r4, r7, lr}
 300              		.cfi_def_cfa_offset 12
 301              		.cfi_offset 4, -12
 302              		.cfi_offset 7, -8
 303              		.cfi_offset 14, -4
 304 0002 85B0     		sub	sp, sp, #20
 305              		.cfi_def_cfa_offset 32
 306 0004 00AF     		add	r7, sp, #0
 307              		.cfi_def_cfa_register 7
 308 0006 7860     		str	r0, [r7, #4]
 345:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
 346:.\Generated_Source\PSoC4/PWM_1.c **** 
 347:.\Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 309              		.loc 1 347 0
 310 0008 3C1C     		mov	r4, r7
 311 000a 0F34     		add	r4, r4, #15
 312 000c FFF7FEFF 		bl	CyEnterCriticalSection
 313 0010 031C     		mov	r3, r0
 314 0012 2370     		strb	r3, [r4]
 348:.\Generated_Source\PSoC4/PWM_1.c **** 
 349:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG &= (uint32)~PWM_1_QUAD_MODE_MASK;
 315              		.loc 1 349 0
 316 0014 0A4B     		ldr	r3, .L18
 317 0016 0A4A     		ldr	r2, .L18
 318 0018 1168     		ldr	r1, [r2]
 319 001a 0A4A     		ldr	r2, .L18+4
 320 001c 0A40     		and	r2, r1
 321 001e 1A60     		str	r2, [r3]
 350:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG |= qdMode;
 322              		.loc 1 350 0
 323 0020 074B     		ldr	r3, .L18
 324 0022 074A     		ldr	r2, .L18
 325 0024 1168     		ldr	r1, [r2]
 326 0026 7A68     		ldr	r2, [r7, #4]
 327 0028 0A43     		orr	r2, r1
 328 002a 1A60     		str	r2, [r3]
 351:.\Generated_Source\PSoC4/PWM_1.c **** 
 352:.\Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 329              		.loc 1 352 0
 330 002c 3B1C     		mov	r3, r7
 331 002e 0F33     		add	r3, r3, #15
 332 0030 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 13


 333 0032 181C     		mov	r0, r3
 334 0034 FFF7FEFF 		bl	CyExitCriticalSection
 353:.\Generated_Source\PSoC4/PWM_1.c **** }
 335              		.loc 1 353 0
 336 0038 BD46     		mov	sp, r7
 337 003a 05B0     		add	sp, sp, #20
 338              		@ sp needed
 339 003c 90BD     		pop	{r4, r7, pc}
 340              	.L19:
 341 003e C046     		.align	2
 342              	.L18:
 343 0040 00010540 		.word	1074069760
 344 0044 FFFF8FFF 		.word	-7340033
 345              		.cfi_endproc
 346              	.LFE5:
 347              		.size	PWM_1_SetQDMode, .-PWM_1_SetQDMode
 348              		.section	.text.PWM_1_SetPrescaler,"ax",%progbits
 349              		.align	2
 350              		.global	PWM_1_SetPrescaler
 351              		.code	16
 352              		.thumb_func
 353              		.type	PWM_1_SetPrescaler, %function
 354              	PWM_1_SetPrescaler:
 355              	.LFB6:
 354:.\Generated_Source\PSoC4/PWM_1.c **** 
 355:.\Generated_Source\PSoC4/PWM_1.c **** 
 356:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 357:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetPrescaler
 358:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 359:.\Generated_Source\PSoC4/PWM_1.c **** *
 360:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 361:.\Generated_Source\PSoC4/PWM_1.c **** *  Sets the prescaler value that is applied to the clock input.  Not applicable
 362:.\Generated_Source\PSoC4/PWM_1.c **** *  to a PWM with the dead time mode or Quadrature Decoder mode.
 363:.\Generated_Source\PSoC4/PWM_1.c **** *
 364:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 365:.\Generated_Source\PSoC4/PWM_1.c **** *  prescaler: Prescaler divider value
 366:.\Generated_Source\PSoC4/PWM_1.c **** *   Values:
 367:.\Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_PRESCALE_DIVBY1    - Divide by 1 (no prescaling)
 368:.\Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_PRESCALE_DIVBY2    - Divide by 2
 369:.\Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_PRESCALE_DIVBY4    - Divide by 4
 370:.\Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_PRESCALE_DIVBY8    - Divide by 8
 371:.\Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_PRESCALE_DIVBY16   - Divide by 16
 372:.\Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_PRESCALE_DIVBY32   - Divide by 32
 373:.\Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_PRESCALE_DIVBY64   - Divide by 64
 374:.\Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_PRESCALE_DIVBY128  - Divide by 128
 375:.\Generated_Source\PSoC4/PWM_1.c **** *
 376:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 377:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 378:.\Generated_Source\PSoC4/PWM_1.c **** *
 379:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 380:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetPrescaler(uint32 prescaler)
 381:.\Generated_Source\PSoC4/PWM_1.c **** {
 356              		.loc 1 381 0
 357              		.cfi_startproc
 358 0000 90B5     		push	{r4, r7, lr}
 359              		.cfi_def_cfa_offset 12
 360              		.cfi_offset 4, -12
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 14


 361              		.cfi_offset 7, -8
 362              		.cfi_offset 14, -4
 363 0002 85B0     		sub	sp, sp, #20
 364              		.cfi_def_cfa_offset 32
 365 0004 00AF     		add	r7, sp, #0
 366              		.cfi_def_cfa_register 7
 367 0006 7860     		str	r0, [r7, #4]
 382:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
 383:.\Generated_Source\PSoC4/PWM_1.c **** 
 384:.\Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 368              		.loc 1 384 0
 369 0008 3C1C     		mov	r4, r7
 370 000a 0F34     		add	r4, r4, #15
 371 000c FFF7FEFF 		bl	CyEnterCriticalSection
 372 0010 031C     		mov	r3, r0
 373 0012 2370     		strb	r3, [r4]
 385:.\Generated_Source\PSoC4/PWM_1.c **** 
 386:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG &= (uint32)~PWM_1_PRESCALER_MASK;
 374              		.loc 1 386 0
 375 0014 0A4B     		ldr	r3, .L21
 376 0016 0A4A     		ldr	r2, .L21
 377 0018 1168     		ldr	r1, [r2]
 378 001a 0A4A     		ldr	r2, .L21+4
 379 001c 0A40     		and	r2, r1
 380 001e 1A60     		str	r2, [r3]
 387:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG |= prescaler;
 381              		.loc 1 387 0
 382 0020 074B     		ldr	r3, .L21
 383 0022 074A     		ldr	r2, .L21
 384 0024 1168     		ldr	r1, [r2]
 385 0026 7A68     		ldr	r2, [r7, #4]
 386 0028 0A43     		orr	r2, r1
 387 002a 1A60     		str	r2, [r3]
 388:.\Generated_Source\PSoC4/PWM_1.c **** 
 389:.\Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 388              		.loc 1 389 0
 389 002c 3B1C     		mov	r3, r7
 390 002e 0F33     		add	r3, r3, #15
 391 0030 1B78     		ldrb	r3, [r3]
 392 0032 181C     		mov	r0, r3
 393 0034 FFF7FEFF 		bl	CyExitCriticalSection
 390:.\Generated_Source\PSoC4/PWM_1.c **** }
 394              		.loc 1 390 0
 395 0038 BD46     		mov	sp, r7
 396 003a 05B0     		add	sp, sp, #20
 397              		@ sp needed
 398 003c 90BD     		pop	{r4, r7, pc}
 399              	.L22:
 400 003e C046     		.align	2
 401              	.L21:
 402 0040 00010540 		.word	1074069760
 403 0044 FF00FFFF 		.word	-65281
 404              		.cfi_endproc
 405              	.LFE6:
 406              		.size	PWM_1_SetPrescaler, .-PWM_1_SetPrescaler
 407              		.section	.text.PWM_1_SetOneShot,"ax",%progbits
 408              		.align	2
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 15


 409              		.global	PWM_1_SetOneShot
 410              		.code	16
 411              		.thumb_func
 412              		.type	PWM_1_SetOneShot, %function
 413              	PWM_1_SetOneShot:
 414              	.LFB7:
 391:.\Generated_Source\PSoC4/PWM_1.c **** 
 392:.\Generated_Source\PSoC4/PWM_1.c **** 
 393:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 394:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetOneShot
 395:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 396:.\Generated_Source\PSoC4/PWM_1.c **** *
 397:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 398:.\Generated_Source\PSoC4/PWM_1.c **** *  Writes the register that controls whether the PWM_1 runs
 399:.\Generated_Source\PSoC4/PWM_1.c **** *  continuously or stops when terminal count is reached.  By default the
 400:.\Generated_Source\PSoC4/PWM_1.c **** *  PWM_1 operates in the continuous mode.
 401:.\Generated_Source\PSoC4/PWM_1.c **** *
 402:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 403:.\Generated_Source\PSoC4/PWM_1.c **** *  oneShotEnable
 404:.\Generated_Source\PSoC4/PWM_1.c **** *   Values:
 405:.\Generated_Source\PSoC4/PWM_1.c **** *     - 0 - Continuous
 406:.\Generated_Source\PSoC4/PWM_1.c **** *     - 1 - Enable One Shot
 407:.\Generated_Source\PSoC4/PWM_1.c **** *
 408:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 409:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 410:.\Generated_Source\PSoC4/PWM_1.c **** *
 411:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 412:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetOneShot(uint32 oneShotEnable)
 413:.\Generated_Source\PSoC4/PWM_1.c **** {
 415              		.loc 1 413 0
 416              		.cfi_startproc
 417 0000 90B5     		push	{r4, r7, lr}
 418              		.cfi_def_cfa_offset 12
 419              		.cfi_offset 4, -12
 420              		.cfi_offset 7, -8
 421              		.cfi_offset 14, -4
 422 0002 85B0     		sub	sp, sp, #20
 423              		.cfi_def_cfa_offset 32
 424 0004 00AF     		add	r7, sp, #0
 425              		.cfi_def_cfa_register 7
 426 0006 7860     		str	r0, [r7, #4]
 414:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
 415:.\Generated_Source\PSoC4/PWM_1.c **** 
 416:.\Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 427              		.loc 1 416 0
 428 0008 3C1C     		mov	r4, r7
 429 000a 0F34     		add	r4, r4, #15
 430 000c FFF7FEFF 		bl	CyEnterCriticalSection
 431 0010 031C     		mov	r3, r0
 432 0012 2370     		strb	r3, [r4]
 417:.\Generated_Source\PSoC4/PWM_1.c **** 
 418:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG &= (uint32)~PWM_1_ONESHOT_MASK;
 433              		.loc 1 418 0
 434 0014 0B4B     		ldr	r3, .L24
 435 0016 0B4A     		ldr	r2, .L24
 436 0018 1168     		ldr	r1, [r2]
 437 001a 0B4A     		ldr	r2, .L24+4
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 16


 438 001c 0A40     		and	r2, r1
 439 001e 1A60     		str	r2, [r3]
 419:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG |= ((uint32)((oneShotEnable & PWM_1_1BIT_MASK) <<
 440              		.loc 1 419 0
 441 0020 084B     		ldr	r3, .L24
 442 0022 084A     		ldr	r2, .L24
 443 0024 1168     		ldr	r1, [r2]
 444 0026 7868     		ldr	r0, [r7, #4]
 445 0028 0122     		mov	r2, #1
 446 002a 0240     		and	r2, r0
 447 002c 9204     		lsl	r2, r2, #18
 448 002e 0A43     		orr	r2, r1
 449 0030 1A60     		str	r2, [r3]
 420:.\Generated_Source\PSoC4/PWM_1.c ****                                                                PWM_1_ONESHOT_SHIFT));
 421:.\Generated_Source\PSoC4/PWM_1.c **** 
 422:.\Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 450              		.loc 1 422 0
 451 0032 3B1C     		mov	r3, r7
 452 0034 0F33     		add	r3, r3, #15
 453 0036 1B78     		ldrb	r3, [r3]
 454 0038 181C     		mov	r0, r3
 455 003a FFF7FEFF 		bl	CyExitCriticalSection
 423:.\Generated_Source\PSoC4/PWM_1.c **** }
 456              		.loc 1 423 0
 457 003e BD46     		mov	sp, r7
 458 0040 05B0     		add	sp, sp, #20
 459              		@ sp needed
 460 0042 90BD     		pop	{r4, r7, pc}
 461              	.L25:
 462              		.align	2
 463              	.L24:
 464 0044 00010540 		.word	1074069760
 465 0048 FFFFFBFF 		.word	-262145
 466              		.cfi_endproc
 467              	.LFE7:
 468              		.size	PWM_1_SetOneShot, .-PWM_1_SetOneShot
 469              		.section	.text.PWM_1_SetPWMMode,"ax",%progbits
 470              		.align	2
 471              		.global	PWM_1_SetPWMMode
 472              		.code	16
 473              		.thumb_func
 474              		.type	PWM_1_SetPWMMode, %function
 475              	PWM_1_SetPWMMode:
 476              	.LFB8:
 424:.\Generated_Source\PSoC4/PWM_1.c **** 
 425:.\Generated_Source\PSoC4/PWM_1.c **** 
 426:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 427:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetPWMMode
 428:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 429:.\Generated_Source\PSoC4/PWM_1.c **** *
 430:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 431:.\Generated_Source\PSoC4/PWM_1.c **** *  Writes the control register that determines what mode of operation the PWM
 432:.\Generated_Source\PSoC4/PWM_1.c **** *  output lines are driven in.  There is a setting for what to do on a
 433:.\Generated_Source\PSoC4/PWM_1.c **** *  comparison match (CC_MATCH), on an overflow (OVERFLOW) and on an underflow
 434:.\Generated_Source\PSoC4/PWM_1.c **** *  (UNDERFLOW).  The value for each of the three must be ORed together to form
 435:.\Generated_Source\PSoC4/PWM_1.c **** *  the mode.
 436:.\Generated_Source\PSoC4/PWM_1.c **** *
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 17


 437:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 438:.\Generated_Source\PSoC4/PWM_1.c **** *  modeMask: A combination of three mode settings.  Mask must include a value
 439:.\Generated_Source\PSoC4/PWM_1.c **** *  for each of the three or use one of the preconfigured PWM settings.
 440:.\Generated_Source\PSoC4/PWM_1.c **** *   Values:
 441:.\Generated_Source\PSoC4/PWM_1.c **** *     - CC_MATCH_SET        - Set on comparison match
 442:.\Generated_Source\PSoC4/PWM_1.c **** *     - CC_MATCH_CLEAR      - Clear on comparison match
 443:.\Generated_Source\PSoC4/PWM_1.c **** *     - CC_MATCH_INVERT     - Invert on comparison match
 444:.\Generated_Source\PSoC4/PWM_1.c **** *     - CC_MATCH_NO_CHANGE  - No change on comparison match
 445:.\Generated_Source\PSoC4/PWM_1.c **** *     - OVERLOW_SET         - Set on overflow
 446:.\Generated_Source\PSoC4/PWM_1.c **** *     - OVERLOW_CLEAR       - Clear on  overflow
 447:.\Generated_Source\PSoC4/PWM_1.c **** *     - OVERLOW_INVERT      - Invert on overflow
 448:.\Generated_Source\PSoC4/PWM_1.c **** *     - OVERLOW_NO_CHANGE   - No change on overflow
 449:.\Generated_Source\PSoC4/PWM_1.c **** *     - UNDERFLOW_SET       - Set on underflow
 450:.\Generated_Source\PSoC4/PWM_1.c **** *     - UNDERFLOW_CLEAR     - Clear on underflow
 451:.\Generated_Source\PSoC4/PWM_1.c **** *     - UNDERFLOW_INVERT    - Invert on underflow
 452:.\Generated_Source\PSoC4/PWM_1.c **** *     - UNDERFLOW_NO_CHANGE - No change on underflow
 453:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_MODE_LEFT       - Setting for left aligned PWM.  Should be combined
 454:.\Generated_Source\PSoC4/PWM_1.c **** *                             with up counting mode
 455:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_MODE_RIGHT      - Setting for right aligned PWM.  Should be combined
 456:.\Generated_Source\PSoC4/PWM_1.c **** *                             with down counting mode
 457:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_MODE_CENTER     - Setting for center aligned PWM.  Should be
 458:.\Generated_Source\PSoC4/PWM_1.c **** *                             combined with up/down 0 mode
 459:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_MODE_ASYM       - Setting for asymmetric PWM.  Should be combined
 460:.\Generated_Source\PSoC4/PWM_1.c **** *                             with up/down 1 mode
 461:.\Generated_Source\PSoC4/PWM_1.c **** *
 462:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 463:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 464:.\Generated_Source\PSoC4/PWM_1.c **** *
 465:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 466:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetPWMMode(uint32 modeMask)
 467:.\Generated_Source\PSoC4/PWM_1.c **** {
 477              		.loc 1 467 0
 478              		.cfi_startproc
 479 0000 80B5     		push	{r7, lr}
 480              		.cfi_def_cfa_offset 8
 481              		.cfi_offset 7, -8
 482              		.cfi_offset 14, -4
 483 0002 82B0     		sub	sp, sp, #8
 484              		.cfi_def_cfa_offset 16
 485 0004 00AF     		add	r7, sp, #0
 486              		.cfi_def_cfa_register 7
 487 0006 7860     		str	r0, [r7, #4]
 468:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_TRIG_CONTROL2_REG = (modeMask & PWM_1_6BIT_MASK);
 488              		.loc 1 468 0
 489 0008 034B     		ldr	r3, .L27
 490 000a 7968     		ldr	r1, [r7, #4]
 491 000c 3F22     		mov	r2, #63
 492 000e 0A40     		and	r2, r1
 493 0010 1A60     		str	r2, [r3]
 469:.\Generated_Source\PSoC4/PWM_1.c **** }
 494              		.loc 1 469 0
 495 0012 BD46     		mov	sp, r7
 496 0014 02B0     		add	sp, sp, #8
 497              		@ sp needed
 498 0016 80BD     		pop	{r7, pc}
 499              	.L28:
 500              		.align	2
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 18


 501              	.L27:
 502 0018 28010540 		.word	1074069800
 503              		.cfi_endproc
 504              	.LFE8:
 505              		.size	PWM_1_SetPWMMode, .-PWM_1_SetPWMMode
 506              		.section	.text.PWM_1_SetPWMSyncKill,"ax",%progbits
 507              		.align	2
 508              		.global	PWM_1_SetPWMSyncKill
 509              		.code	16
 510              		.thumb_func
 511              		.type	PWM_1_SetPWMSyncKill, %function
 512              	PWM_1_SetPWMSyncKill:
 513              	.LFB9:
 470:.\Generated_Source\PSoC4/PWM_1.c **** 
 471:.\Generated_Source\PSoC4/PWM_1.c **** 
 472:.\Generated_Source\PSoC4/PWM_1.c **** 
 473:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 474:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetPWMSyncKill
 475:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 476:.\Generated_Source\PSoC4/PWM_1.c **** *
 477:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 478:.\Generated_Source\PSoC4/PWM_1.c **** *  Writes the register that controls whether the PWM kill signal (stop input)
 479:.\Generated_Source\PSoC4/PWM_1.c **** *  causes asynchronous or synchronous kill operation.  By default the kill
 480:.\Generated_Source\PSoC4/PWM_1.c **** *  operation is asynchronous.  This functionality is only applicable to the PWM
 481:.\Generated_Source\PSoC4/PWM_1.c **** *  and PWM with dead time modes.
 482:.\Generated_Source\PSoC4/PWM_1.c **** *
 483:.\Generated_Source\PSoC4/PWM_1.c **** *  For Synchronous mode the kill signal disables both the line and line_n
 484:.\Generated_Source\PSoC4/PWM_1.c **** *  signals until the next terminal count.
 485:.\Generated_Source\PSoC4/PWM_1.c **** *
 486:.\Generated_Source\PSoC4/PWM_1.c **** *  For Asynchronous mode the kill signal disables both the line and line_n
 487:.\Generated_Source\PSoC4/PWM_1.c **** *  signals when the kill signal is present.  This mode should only be used
 488:.\Generated_Source\PSoC4/PWM_1.c **** *  when the kill signal (stop input) is configured in the pass through mode
 489:.\Generated_Source\PSoC4/PWM_1.c **** *  (Level sensitive signal).
 490:.\Generated_Source\PSoC4/PWM_1.c **** 
 491:.\Generated_Source\PSoC4/PWM_1.c **** *
 492:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 493:.\Generated_Source\PSoC4/PWM_1.c **** *  syncKillEnable
 494:.\Generated_Source\PSoC4/PWM_1.c **** *   Values:
 495:.\Generated_Source\PSoC4/PWM_1.c **** *     - 0 - Asynchronous
 496:.\Generated_Source\PSoC4/PWM_1.c **** *     - 1 - Synchronous
 497:.\Generated_Source\PSoC4/PWM_1.c **** *
 498:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 499:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 500:.\Generated_Source\PSoC4/PWM_1.c **** *
 501:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 502:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetPWMSyncKill(uint32 syncKillEnable)
 503:.\Generated_Source\PSoC4/PWM_1.c **** {
 514              		.loc 1 503 0
 515              		.cfi_startproc
 516 0000 90B5     		push	{r4, r7, lr}
 517              		.cfi_def_cfa_offset 12
 518              		.cfi_offset 4, -12
 519              		.cfi_offset 7, -8
 520              		.cfi_offset 14, -4
 521 0002 85B0     		sub	sp, sp, #20
 522              		.cfi_def_cfa_offset 32
 523 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 19


 524              		.cfi_def_cfa_register 7
 525 0006 7860     		str	r0, [r7, #4]
 504:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
 505:.\Generated_Source\PSoC4/PWM_1.c **** 
 506:.\Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 526              		.loc 1 506 0
 527 0008 3C1C     		mov	r4, r7
 528 000a 0F34     		add	r4, r4, #15
 529 000c FFF7FEFF 		bl	CyEnterCriticalSection
 530 0010 031C     		mov	r3, r0
 531 0012 2370     		strb	r3, [r4]
 507:.\Generated_Source\PSoC4/PWM_1.c **** 
 508:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG &= (uint32)~PWM_1_PWM_SYNC_KILL_MASK;
 532              		.loc 1 508 0
 533 0014 0B4B     		ldr	r3, .L30
 534 0016 0B4A     		ldr	r2, .L30
 535 0018 1268     		ldr	r2, [r2]
 536 001a 0421     		mov	r1, #4
 537 001c 8A43     		bic	r2, r1
 538 001e 1A60     		str	r2, [r3]
 509:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG |= ((uint32)((syncKillEnable & PWM_1_1BIT_MASK)  <<
 539              		.loc 1 509 0
 540 0020 084B     		ldr	r3, .L30
 541 0022 084A     		ldr	r2, .L30
 542 0024 1168     		ldr	r1, [r2]
 543 0026 7868     		ldr	r0, [r7, #4]
 544 0028 0122     		mov	r2, #1
 545 002a 0240     		and	r2, r0
 546 002c 9200     		lsl	r2, r2, #2
 547 002e 0A43     		orr	r2, r1
 548 0030 1A60     		str	r2, [r3]
 510:.\Generated_Source\PSoC4/PWM_1.c ****                                                PWM_1_PWM_SYNC_KILL_SHIFT));
 511:.\Generated_Source\PSoC4/PWM_1.c **** 
 512:.\Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 549              		.loc 1 512 0
 550 0032 3B1C     		mov	r3, r7
 551 0034 0F33     		add	r3, r3, #15
 552 0036 1B78     		ldrb	r3, [r3]
 553 0038 181C     		mov	r0, r3
 554 003a FFF7FEFF 		bl	CyExitCriticalSection
 513:.\Generated_Source\PSoC4/PWM_1.c **** }
 555              		.loc 1 513 0
 556 003e BD46     		mov	sp, r7
 557 0040 05B0     		add	sp, sp, #20
 558              		@ sp needed
 559 0042 90BD     		pop	{r4, r7, pc}
 560              	.L31:
 561              		.align	2
 562              	.L30:
 563 0044 00010540 		.word	1074069760
 564              		.cfi_endproc
 565              	.LFE9:
 566              		.size	PWM_1_SetPWMSyncKill, .-PWM_1_SetPWMSyncKill
 567              		.section	.text.PWM_1_SetPWMStopOnKill,"ax",%progbits
 568              		.align	2
 569              		.global	PWM_1_SetPWMStopOnKill
 570              		.code	16
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 20


 571              		.thumb_func
 572              		.type	PWM_1_SetPWMStopOnKill, %function
 573              	PWM_1_SetPWMStopOnKill:
 574              	.LFB10:
 514:.\Generated_Source\PSoC4/PWM_1.c **** 
 515:.\Generated_Source\PSoC4/PWM_1.c **** 
 516:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 517:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetPWMStopOnKill
 518:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 519:.\Generated_Source\PSoC4/PWM_1.c **** *
 520:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 521:.\Generated_Source\PSoC4/PWM_1.c **** *  Writes the register that controls whether the PWM kill signal (stop input)
 522:.\Generated_Source\PSoC4/PWM_1.c **** *  causes the PWM counter to stop.  By default the kill operation does not stop
 523:.\Generated_Source\PSoC4/PWM_1.c **** *  the counter.  This functionality is only applicable to the three PWM modes.
 524:.\Generated_Source\PSoC4/PWM_1.c **** *
 525:.\Generated_Source\PSoC4/PWM_1.c **** *
 526:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 527:.\Generated_Source\PSoC4/PWM_1.c **** *  stopOnKillEnable
 528:.\Generated_Source\PSoC4/PWM_1.c **** *   Values:
 529:.\Generated_Source\PSoC4/PWM_1.c **** *     - 0 - Don't stop
 530:.\Generated_Source\PSoC4/PWM_1.c **** *     - 1 - Stop
 531:.\Generated_Source\PSoC4/PWM_1.c **** *
 532:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 533:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 534:.\Generated_Source\PSoC4/PWM_1.c **** *
 535:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 536:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetPWMStopOnKill(uint32 stopOnKillEnable)
 537:.\Generated_Source\PSoC4/PWM_1.c **** {
 575              		.loc 1 537 0
 576              		.cfi_startproc
 577 0000 90B5     		push	{r4, r7, lr}
 578              		.cfi_def_cfa_offset 12
 579              		.cfi_offset 4, -12
 580              		.cfi_offset 7, -8
 581              		.cfi_offset 14, -4
 582 0002 85B0     		sub	sp, sp, #20
 583              		.cfi_def_cfa_offset 32
 584 0004 00AF     		add	r7, sp, #0
 585              		.cfi_def_cfa_register 7
 586 0006 7860     		str	r0, [r7, #4]
 538:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
 539:.\Generated_Source\PSoC4/PWM_1.c **** 
 540:.\Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 587              		.loc 1 540 0
 588 0008 3C1C     		mov	r4, r7
 589 000a 0F34     		add	r4, r4, #15
 590 000c FFF7FEFF 		bl	CyEnterCriticalSection
 591 0010 031C     		mov	r3, r0
 592 0012 2370     		strb	r3, [r4]
 541:.\Generated_Source\PSoC4/PWM_1.c **** 
 542:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG &= (uint32)~PWM_1_PWM_STOP_KILL_MASK;
 593              		.loc 1 542 0
 594 0014 0B4B     		ldr	r3, .L33
 595 0016 0B4A     		ldr	r2, .L33
 596 0018 1268     		ldr	r2, [r2]
 597 001a 0821     		mov	r1, #8
 598 001c 8A43     		bic	r2, r1
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 21


 599 001e 1A60     		str	r2, [r3]
 543:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG |= ((uint32)((stopOnKillEnable & PWM_1_1BIT_MASK)  <<
 600              		.loc 1 543 0
 601 0020 084B     		ldr	r3, .L33
 602 0022 084A     		ldr	r2, .L33
 603 0024 1168     		ldr	r1, [r2]
 604 0026 7868     		ldr	r0, [r7, #4]
 605 0028 0122     		mov	r2, #1
 606 002a 0240     		and	r2, r0
 607 002c D200     		lsl	r2, r2, #3
 608 002e 0A43     		orr	r2, r1
 609 0030 1A60     		str	r2, [r3]
 544:.\Generated_Source\PSoC4/PWM_1.c ****                                                          PWM_1_PWM_STOP_KILL_SHIFT));
 545:.\Generated_Source\PSoC4/PWM_1.c **** 
 546:.\Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 610              		.loc 1 546 0
 611 0032 3B1C     		mov	r3, r7
 612 0034 0F33     		add	r3, r3, #15
 613 0036 1B78     		ldrb	r3, [r3]
 614 0038 181C     		mov	r0, r3
 615 003a FFF7FEFF 		bl	CyExitCriticalSection
 547:.\Generated_Source\PSoC4/PWM_1.c **** }
 616              		.loc 1 547 0
 617 003e BD46     		mov	sp, r7
 618 0040 05B0     		add	sp, sp, #20
 619              		@ sp needed
 620 0042 90BD     		pop	{r4, r7, pc}
 621              	.L34:
 622              		.align	2
 623              	.L33:
 624 0044 00010540 		.word	1074069760
 625              		.cfi_endproc
 626              	.LFE10:
 627              		.size	PWM_1_SetPWMStopOnKill, .-PWM_1_SetPWMStopOnKill
 628              		.section	.text.PWM_1_SetPWMDeadTime,"ax",%progbits
 629              		.align	2
 630              		.global	PWM_1_SetPWMDeadTime
 631              		.code	16
 632              		.thumb_func
 633              		.type	PWM_1_SetPWMDeadTime, %function
 634              	PWM_1_SetPWMDeadTime:
 635              	.LFB11:
 548:.\Generated_Source\PSoC4/PWM_1.c **** 
 549:.\Generated_Source\PSoC4/PWM_1.c **** 
 550:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 551:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetPWMDeadTime
 552:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 553:.\Generated_Source\PSoC4/PWM_1.c **** *
 554:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 555:.\Generated_Source\PSoC4/PWM_1.c **** *  Writes the dead time control value.  This value delays the rising edge of
 556:.\Generated_Source\PSoC4/PWM_1.c **** *  both the line and line_n signals the designated number of cycles resulting
 557:.\Generated_Source\PSoC4/PWM_1.c **** *  in both signals being inactive for that many cycles.  This functionality is
 558:.\Generated_Source\PSoC4/PWM_1.c **** *  only applicable to the PWM in the dead time mode.
 559:.\Generated_Source\PSoC4/PWM_1.c **** 
 560:.\Generated_Source\PSoC4/PWM_1.c **** *
 561:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 562:.\Generated_Source\PSoC4/PWM_1.c **** *  Dead time to insert
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 22


 563:.\Generated_Source\PSoC4/PWM_1.c **** *   Values: 0 to 255
 564:.\Generated_Source\PSoC4/PWM_1.c **** *
 565:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 566:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 567:.\Generated_Source\PSoC4/PWM_1.c **** *
 568:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 569:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetPWMDeadTime(uint32 deadTime)
 570:.\Generated_Source\PSoC4/PWM_1.c **** {
 636              		.loc 1 570 0
 637              		.cfi_startproc
 638 0000 90B5     		push	{r4, r7, lr}
 639              		.cfi_def_cfa_offset 12
 640              		.cfi_offset 4, -12
 641              		.cfi_offset 7, -8
 642              		.cfi_offset 14, -4
 643 0002 85B0     		sub	sp, sp, #20
 644              		.cfi_def_cfa_offset 32
 645 0004 00AF     		add	r7, sp, #0
 646              		.cfi_def_cfa_register 7
 647 0006 7860     		str	r0, [r7, #4]
 571:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
 572:.\Generated_Source\PSoC4/PWM_1.c **** 
 573:.\Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 648              		.loc 1 573 0
 649 0008 3C1C     		mov	r4, r7
 650 000a 0F34     		add	r4, r4, #15
 651 000c FFF7FEFF 		bl	CyEnterCriticalSection
 652 0010 031C     		mov	r3, r0
 653 0012 2370     		strb	r3, [r4]
 574:.\Generated_Source\PSoC4/PWM_1.c **** 
 575:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG &= (uint32)~PWM_1_PRESCALER_MASK;
 654              		.loc 1 575 0
 655 0014 0B4B     		ldr	r3, .L36
 656 0016 0B4A     		ldr	r2, .L36
 657 0018 1168     		ldr	r1, [r2]
 658 001a 0B4A     		ldr	r2, .L36+4
 659 001c 0A40     		and	r2, r1
 660 001e 1A60     		str	r2, [r3]
 576:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG |= ((uint32)((deadTime & PWM_1_8BIT_MASK) <<
 661              		.loc 1 576 0
 662 0020 084B     		ldr	r3, .L36
 663 0022 084A     		ldr	r2, .L36
 664 0024 1168     		ldr	r1, [r2]
 665 0026 7A68     		ldr	r2, [r7, #4]
 666 0028 1202     		lsl	r2, r2, #8
 667 002a 1204     		lsl	r2, r2, #16
 668 002c 120C     		lsr	r2, r2, #16
 669 002e 0A43     		orr	r2, r1
 670 0030 1A60     		str	r2, [r3]
 577:.\Generated_Source\PSoC4/PWM_1.c ****                                                           PWM_1_PRESCALER_SHIFT));
 578:.\Generated_Source\PSoC4/PWM_1.c **** 
 579:.\Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 671              		.loc 1 579 0
 672 0032 3B1C     		mov	r3, r7
 673 0034 0F33     		add	r3, r3, #15
 674 0036 1B78     		ldrb	r3, [r3]
 675 0038 181C     		mov	r0, r3
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 23


 676 003a FFF7FEFF 		bl	CyExitCriticalSection
 580:.\Generated_Source\PSoC4/PWM_1.c **** }
 677              		.loc 1 580 0
 678 003e BD46     		mov	sp, r7
 679 0040 05B0     		add	sp, sp, #20
 680              		@ sp needed
 681 0042 90BD     		pop	{r4, r7, pc}
 682              	.L37:
 683              		.align	2
 684              	.L36:
 685 0044 00010540 		.word	1074069760
 686 0048 FF00FFFF 		.word	-65281
 687              		.cfi_endproc
 688              	.LFE11:
 689              		.size	PWM_1_SetPWMDeadTime, .-PWM_1_SetPWMDeadTime
 690              		.section	.text.PWM_1_SetPWMInvert,"ax",%progbits
 691              		.align	2
 692              		.global	PWM_1_SetPWMInvert
 693              		.code	16
 694              		.thumb_func
 695              		.type	PWM_1_SetPWMInvert, %function
 696              	PWM_1_SetPWMInvert:
 697              	.LFB12:
 581:.\Generated_Source\PSoC4/PWM_1.c **** 
 582:.\Generated_Source\PSoC4/PWM_1.c **** 
 583:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 584:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetPWMInvert
 585:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 586:.\Generated_Source\PSoC4/PWM_1.c **** *
 587:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 588:.\Generated_Source\PSoC4/PWM_1.c **** *  Writes the bits that control whether the line and line_n outputs are
 589:.\Generated_Source\PSoC4/PWM_1.c **** *  inverted from their normal output values.  This functionality is only
 590:.\Generated_Source\PSoC4/PWM_1.c **** *  applicable to the three PWM modes.
 591:.\Generated_Source\PSoC4/PWM_1.c **** *
 592:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 593:.\Generated_Source\PSoC4/PWM_1.c **** *  mask: Mask of outputs to invert.
 594:.\Generated_Source\PSoC4/PWM_1.c **** *   Values:
 595:.\Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_INVERT_LINE   - Inverts the line output
 596:.\Generated_Source\PSoC4/PWM_1.c **** *         - PWM_1_INVERT_LINE_N - Inverts the line_n output
 597:.\Generated_Source\PSoC4/PWM_1.c **** *
 598:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 599:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 600:.\Generated_Source\PSoC4/PWM_1.c **** *
 601:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 602:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetPWMInvert(uint32 mask)
 603:.\Generated_Source\PSoC4/PWM_1.c **** {
 698              		.loc 1 603 0
 699              		.cfi_startproc
 700 0000 90B5     		push	{r4, r7, lr}
 701              		.cfi_def_cfa_offset 12
 702              		.cfi_offset 4, -12
 703              		.cfi_offset 7, -8
 704              		.cfi_offset 14, -4
 705 0002 85B0     		sub	sp, sp, #20
 706              		.cfi_def_cfa_offset 32
 707 0004 00AF     		add	r7, sp, #0
 708              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 24


 709 0006 7860     		str	r0, [r7, #4]
 604:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
 605:.\Generated_Source\PSoC4/PWM_1.c **** 
 606:.\Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 710              		.loc 1 606 0
 711 0008 3C1C     		mov	r4, r7
 712 000a 0F34     		add	r4, r4, #15
 713 000c FFF7FEFF 		bl	CyEnterCriticalSection
 714 0010 031C     		mov	r3, r0
 715 0012 2370     		strb	r3, [r4]
 607:.\Generated_Source\PSoC4/PWM_1.c **** 
 608:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG &= (uint32)~PWM_1_INV_OUT_MASK;
 716              		.loc 1 608 0
 717 0014 0A4B     		ldr	r3, .L39
 718 0016 0A4A     		ldr	r2, .L39
 719 0018 1168     		ldr	r1, [r2]
 720 001a 0A4A     		ldr	r2, .L39+4
 721 001c 0A40     		and	r2, r1
 722 001e 1A60     		str	r2, [r3]
 609:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG |= mask;
 723              		.loc 1 609 0
 724 0020 074B     		ldr	r3, .L39
 725 0022 074A     		ldr	r2, .L39
 726 0024 1168     		ldr	r1, [r2]
 727 0026 7A68     		ldr	r2, [r7, #4]
 728 0028 0A43     		orr	r2, r1
 729 002a 1A60     		str	r2, [r3]
 610:.\Generated_Source\PSoC4/PWM_1.c **** 
 611:.\Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 730              		.loc 1 611 0
 731 002c 3B1C     		mov	r3, r7
 732 002e 0F33     		add	r3, r3, #15
 733 0030 1B78     		ldrb	r3, [r3]
 734 0032 181C     		mov	r0, r3
 735 0034 FFF7FEFF 		bl	CyExitCriticalSection
 612:.\Generated_Source\PSoC4/PWM_1.c **** }
 736              		.loc 1 612 0
 737 0038 BD46     		mov	sp, r7
 738 003a 05B0     		add	sp, sp, #20
 739              		@ sp needed
 740 003c 90BD     		pop	{r4, r7, pc}
 741              	.L40:
 742 003e C046     		.align	2
 743              	.L39:
 744 0040 00010540 		.word	1074069760
 745 0044 FFFFCFFF 		.word	-3145729
 746              		.cfi_endproc
 747              	.LFE12:
 748              		.size	PWM_1_SetPWMInvert, .-PWM_1_SetPWMInvert
 749              		.section	.text.PWM_1_WriteCounter,"ax",%progbits
 750              		.align	2
 751              		.global	PWM_1_WriteCounter
 752              		.code	16
 753              		.thumb_func
 754              		.type	PWM_1_WriteCounter, %function
 755              	PWM_1_WriteCounter:
 756              	.LFB13:
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 25


 613:.\Generated_Source\PSoC4/PWM_1.c **** 
 614:.\Generated_Source\PSoC4/PWM_1.c **** 
 615:.\Generated_Source\PSoC4/PWM_1.c **** 
 616:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 617:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_WriteCounter
 618:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 619:.\Generated_Source\PSoC4/PWM_1.c **** *
 620:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 621:.\Generated_Source\PSoC4/PWM_1.c **** *  Writes a new 16bit counter value directly into the counter register, thus
 622:.\Generated_Source\PSoC4/PWM_1.c **** *  setting the counter (not the period) to the value written. It is not
 623:.\Generated_Source\PSoC4/PWM_1.c **** *  advised to write to this field when the counter is running.
 624:.\Generated_Source\PSoC4/PWM_1.c **** *
 625:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 626:.\Generated_Source\PSoC4/PWM_1.c **** *  count: value to write
 627:.\Generated_Source\PSoC4/PWM_1.c **** *
 628:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 629:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 630:.\Generated_Source\PSoC4/PWM_1.c **** *
 631:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 632:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_WriteCounter(uint32 count)
 633:.\Generated_Source\PSoC4/PWM_1.c **** {
 757              		.loc 1 633 0
 758              		.cfi_startproc
 759 0000 80B5     		push	{r7, lr}
 760              		.cfi_def_cfa_offset 8
 761              		.cfi_offset 7, -8
 762              		.cfi_offset 14, -4
 763 0002 82B0     		sub	sp, sp, #8
 764              		.cfi_def_cfa_offset 16
 765 0004 00AF     		add	r7, sp, #0
 766              		.cfi_def_cfa_register 7
 767 0006 7860     		str	r0, [r7, #4]
 634:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_COUNTER_REG = (count & PWM_1_16BIT_MASK);
 768              		.loc 1 634 0
 769 0008 034B     		ldr	r3, .L42
 770 000a 7A68     		ldr	r2, [r7, #4]
 771 000c 1204     		lsl	r2, r2, #16
 772 000e 120C     		lsr	r2, r2, #16
 773 0010 1A60     		str	r2, [r3]
 635:.\Generated_Source\PSoC4/PWM_1.c **** }
 774              		.loc 1 635 0
 775 0012 BD46     		mov	sp, r7
 776 0014 02B0     		add	sp, sp, #8
 777              		@ sp needed
 778 0016 80BD     		pop	{r7, pc}
 779              	.L43:
 780              		.align	2
 781              	.L42:
 782 0018 08010540 		.word	1074069768
 783              		.cfi_endproc
 784              	.LFE13:
 785              		.size	PWM_1_WriteCounter, .-PWM_1_WriteCounter
 786              		.section	.text.PWM_1_ReadCounter,"ax",%progbits
 787              		.align	2
 788              		.global	PWM_1_ReadCounter
 789              		.code	16
 790              		.thumb_func
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 26


 791              		.type	PWM_1_ReadCounter, %function
 792              	PWM_1_ReadCounter:
 793              	.LFB14:
 636:.\Generated_Source\PSoC4/PWM_1.c **** 
 637:.\Generated_Source\PSoC4/PWM_1.c **** 
 638:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 639:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_ReadCounter
 640:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 641:.\Generated_Source\PSoC4/PWM_1.c **** *
 642:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 643:.\Generated_Source\PSoC4/PWM_1.c **** *  Reads the current counter value.
 644:.\Generated_Source\PSoC4/PWM_1.c **** *
 645:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 646:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 647:.\Generated_Source\PSoC4/PWM_1.c **** *
 648:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 649:.\Generated_Source\PSoC4/PWM_1.c **** *  Current counter value
 650:.\Generated_Source\PSoC4/PWM_1.c **** *
 651:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 652:.\Generated_Source\PSoC4/PWM_1.c **** uint32 PWM_1_ReadCounter(void)
 653:.\Generated_Source\PSoC4/PWM_1.c **** {
 794              		.loc 1 653 0
 795              		.cfi_startproc
 796 0000 80B5     		push	{r7, lr}
 797              		.cfi_def_cfa_offset 8
 798              		.cfi_offset 7, -8
 799              		.cfi_offset 14, -4
 800 0002 00AF     		add	r7, sp, #0
 801              		.cfi_def_cfa_register 7
 654:.\Generated_Source\PSoC4/PWM_1.c ****     return (PWM_1_COUNTER_REG & PWM_1_16BIT_MASK);
 802              		.loc 1 654 0
 803 0004 034B     		ldr	r3, .L46
 804 0006 1B68     		ldr	r3, [r3]
 805 0008 1B04     		lsl	r3, r3, #16
 806 000a 1B0C     		lsr	r3, r3, #16
 655:.\Generated_Source\PSoC4/PWM_1.c **** }
 807              		.loc 1 655 0
 808 000c 181C     		mov	r0, r3
 809 000e BD46     		mov	sp, r7
 810              		@ sp needed
 811 0010 80BD     		pop	{r7, pc}
 812              	.L47:
 813 0012 C046     		.align	2
 814              	.L46:
 815 0014 08010540 		.word	1074069768
 816              		.cfi_endproc
 817              	.LFE14:
 818              		.size	PWM_1_ReadCounter, .-PWM_1_ReadCounter
 819              		.section	.text.PWM_1_SetCounterMode,"ax",%progbits
 820              		.align	2
 821              		.global	PWM_1_SetCounterMode
 822              		.code	16
 823              		.thumb_func
 824              		.type	PWM_1_SetCounterMode, %function
 825              	PWM_1_SetCounterMode:
 826              	.LFB15:
 656:.\Generated_Source\PSoC4/PWM_1.c **** 
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 27


 657:.\Generated_Source\PSoC4/PWM_1.c **** 
 658:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 659:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetCounterMode
 660:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 661:.\Generated_Source\PSoC4/PWM_1.c **** *
 662:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 663:.\Generated_Source\PSoC4/PWM_1.c **** *  Sets the counter mode.  Applicable to all modes except Quadrature Decoder
 664:.\Generated_Source\PSoC4/PWM_1.c **** *  and the PWM with a pseudo random output.
 665:.\Generated_Source\PSoC4/PWM_1.c **** *
 666:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 667:.\Generated_Source\PSoC4/PWM_1.c **** *  counterMode: Enumerated counter type values
 668:.\Generated_Source\PSoC4/PWM_1.c **** *   Values:
 669:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_COUNT_UP       - Counts up
 670:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_COUNT_DOWN     - Counts down
 671:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_COUNT_UPDOWN0  - Counts up and down. Terminal count
 672:.\Generated_Source\PSoC4/PWM_1.c **** *                                         generated when counter reaches 0
 673:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_COUNT_UPDOWN1  - Counts up and down. Terminal count
 674:.\Generated_Source\PSoC4/PWM_1.c **** *                                         generated both when counter reaches 0
 675:.\Generated_Source\PSoC4/PWM_1.c **** *                                         and period
 676:.\Generated_Source\PSoC4/PWM_1.c **** *
 677:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 678:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 679:.\Generated_Source\PSoC4/PWM_1.c **** *
 680:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 681:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetCounterMode(uint32 counterMode)
 682:.\Generated_Source\PSoC4/PWM_1.c **** {
 827              		.loc 1 682 0
 828              		.cfi_startproc
 829 0000 90B5     		push	{r4, r7, lr}
 830              		.cfi_def_cfa_offset 12
 831              		.cfi_offset 4, -12
 832              		.cfi_offset 7, -8
 833              		.cfi_offset 14, -4
 834 0002 85B0     		sub	sp, sp, #20
 835              		.cfi_def_cfa_offset 32
 836 0004 00AF     		add	r7, sp, #0
 837              		.cfi_def_cfa_register 7
 838 0006 7860     		str	r0, [r7, #4]
 683:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
 684:.\Generated_Source\PSoC4/PWM_1.c **** 
 685:.\Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 839              		.loc 1 685 0
 840 0008 3C1C     		mov	r4, r7
 841 000a 0F34     		add	r4, r4, #15
 842 000c FFF7FEFF 		bl	CyEnterCriticalSection
 843 0010 031C     		mov	r3, r0
 844 0012 2370     		strb	r3, [r4]
 686:.\Generated_Source\PSoC4/PWM_1.c **** 
 687:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG &= (uint32)~PWM_1_UPDOWN_MASK;
 845              		.loc 1 687 0
 846 0014 0A4B     		ldr	r3, .L49
 847 0016 0A4A     		ldr	r2, .L49
 848 0018 1168     		ldr	r1, [r2]
 849 001a 0A4A     		ldr	r2, .L49+4
 850 001c 0A40     		and	r2, r1
 851 001e 1A60     		str	r2, [r3]
 688:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG |= counterMode;
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 28


 852              		.loc 1 688 0
 853 0020 074B     		ldr	r3, .L49
 854 0022 074A     		ldr	r2, .L49
 855 0024 1168     		ldr	r1, [r2]
 856 0026 7A68     		ldr	r2, [r7, #4]
 857 0028 0A43     		orr	r2, r1
 858 002a 1A60     		str	r2, [r3]
 689:.\Generated_Source\PSoC4/PWM_1.c **** 
 690:.\Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 859              		.loc 1 690 0
 860 002c 3B1C     		mov	r3, r7
 861 002e 0F33     		add	r3, r3, #15
 862 0030 1B78     		ldrb	r3, [r3]
 863 0032 181C     		mov	r0, r3
 864 0034 FFF7FEFF 		bl	CyExitCriticalSection
 691:.\Generated_Source\PSoC4/PWM_1.c **** }
 865              		.loc 1 691 0
 866 0038 BD46     		mov	sp, r7
 867 003a 05B0     		add	sp, sp, #20
 868              		@ sp needed
 869 003c 90BD     		pop	{r4, r7, pc}
 870              	.L50:
 871 003e C046     		.align	2
 872              	.L49:
 873 0040 00010540 		.word	1074069760
 874 0044 FFFFFCFF 		.word	-196609
 875              		.cfi_endproc
 876              	.LFE15:
 877              		.size	PWM_1_SetCounterMode, .-PWM_1_SetCounterMode
 878              		.section	.text.PWM_1_WritePeriod,"ax",%progbits
 879              		.align	2
 880              		.global	PWM_1_WritePeriod
 881              		.code	16
 882              		.thumb_func
 883              		.type	PWM_1_WritePeriod, %function
 884              	PWM_1_WritePeriod:
 885              	.LFB16:
 692:.\Generated_Source\PSoC4/PWM_1.c **** 
 693:.\Generated_Source\PSoC4/PWM_1.c **** 
 694:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 695:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_WritePeriod
 696:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 697:.\Generated_Source\PSoC4/PWM_1.c **** *
 698:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 699:.\Generated_Source\PSoC4/PWM_1.c **** *  Writes the 16 bit period register with the new period value.
 700:.\Generated_Source\PSoC4/PWM_1.c **** *  To cause the counter to count for N cycles this register should be written
 701:.\Generated_Source\PSoC4/PWM_1.c **** *  with N-1 (counts from 0 to period inclusive).
 702:.\Generated_Source\PSoC4/PWM_1.c **** *
 703:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 704:.\Generated_Source\PSoC4/PWM_1.c **** *  period: Period value
 705:.\Generated_Source\PSoC4/PWM_1.c **** *
 706:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 707:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 708:.\Generated_Source\PSoC4/PWM_1.c **** *
 709:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 710:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_WritePeriod(uint32 period)
 711:.\Generated_Source\PSoC4/PWM_1.c **** {
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 29


 886              		.loc 1 711 0
 887              		.cfi_startproc
 888 0000 80B5     		push	{r7, lr}
 889              		.cfi_def_cfa_offset 8
 890              		.cfi_offset 7, -8
 891              		.cfi_offset 14, -4
 892 0002 82B0     		sub	sp, sp, #8
 893              		.cfi_def_cfa_offset 16
 894 0004 00AF     		add	r7, sp, #0
 895              		.cfi_def_cfa_register 7
 896 0006 7860     		str	r0, [r7, #4]
 712:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_PERIOD_REG = (period & PWM_1_16BIT_MASK);
 897              		.loc 1 712 0
 898 0008 034B     		ldr	r3, .L52
 899 000a 7A68     		ldr	r2, [r7, #4]
 900 000c 1204     		lsl	r2, r2, #16
 901 000e 120C     		lsr	r2, r2, #16
 902 0010 1A60     		str	r2, [r3]
 713:.\Generated_Source\PSoC4/PWM_1.c **** }
 903              		.loc 1 713 0
 904 0012 BD46     		mov	sp, r7
 905 0014 02B0     		add	sp, sp, #8
 906              		@ sp needed
 907 0016 80BD     		pop	{r7, pc}
 908              	.L53:
 909              		.align	2
 910              	.L52:
 911 0018 14010540 		.word	1074069780
 912              		.cfi_endproc
 913              	.LFE16:
 914              		.size	PWM_1_WritePeriod, .-PWM_1_WritePeriod
 915              		.section	.text.PWM_1_ReadPeriod,"ax",%progbits
 916              		.align	2
 917              		.global	PWM_1_ReadPeriod
 918              		.code	16
 919              		.thumb_func
 920              		.type	PWM_1_ReadPeriod, %function
 921              	PWM_1_ReadPeriod:
 922              	.LFB17:
 714:.\Generated_Source\PSoC4/PWM_1.c **** 
 715:.\Generated_Source\PSoC4/PWM_1.c **** 
 716:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 717:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_ReadPeriod
 718:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 719:.\Generated_Source\PSoC4/PWM_1.c **** *
 720:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 721:.\Generated_Source\PSoC4/PWM_1.c **** *  Reads the 16 bit period register.
 722:.\Generated_Source\PSoC4/PWM_1.c **** *
 723:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 724:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 725:.\Generated_Source\PSoC4/PWM_1.c **** *
 726:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 727:.\Generated_Source\PSoC4/PWM_1.c **** *  Period value
 728:.\Generated_Source\PSoC4/PWM_1.c **** *
 729:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 730:.\Generated_Source\PSoC4/PWM_1.c **** uint32 PWM_1_ReadPeriod(void)
 731:.\Generated_Source\PSoC4/PWM_1.c **** {
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 30


 923              		.loc 1 731 0
 924              		.cfi_startproc
 925 0000 80B5     		push	{r7, lr}
 926              		.cfi_def_cfa_offset 8
 927              		.cfi_offset 7, -8
 928              		.cfi_offset 14, -4
 929 0002 00AF     		add	r7, sp, #0
 930              		.cfi_def_cfa_register 7
 732:.\Generated_Source\PSoC4/PWM_1.c ****     return (PWM_1_PERIOD_REG & PWM_1_16BIT_MASK);
 931              		.loc 1 732 0
 932 0004 034B     		ldr	r3, .L56
 933 0006 1B68     		ldr	r3, [r3]
 934 0008 1B04     		lsl	r3, r3, #16
 935 000a 1B0C     		lsr	r3, r3, #16
 733:.\Generated_Source\PSoC4/PWM_1.c **** }
 936              		.loc 1 733 0
 937 000c 181C     		mov	r0, r3
 938 000e BD46     		mov	sp, r7
 939              		@ sp needed
 940 0010 80BD     		pop	{r7, pc}
 941              	.L57:
 942 0012 C046     		.align	2
 943              	.L56:
 944 0014 14010540 		.word	1074069780
 945              		.cfi_endproc
 946              	.LFE17:
 947              		.size	PWM_1_ReadPeriod, .-PWM_1_ReadPeriod
 948              		.section	.text.PWM_1_SetCompareSwap,"ax",%progbits
 949              		.align	2
 950              		.global	PWM_1_SetCompareSwap
 951              		.code	16
 952              		.thumb_func
 953              		.type	PWM_1_SetCompareSwap, %function
 954              	PWM_1_SetCompareSwap:
 955              	.LFB18:
 734:.\Generated_Source\PSoC4/PWM_1.c **** 
 735:.\Generated_Source\PSoC4/PWM_1.c **** 
 736:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 737:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetCompareSwap
 738:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 739:.\Generated_Source\PSoC4/PWM_1.c **** *
 740:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 741:.\Generated_Source\PSoC4/PWM_1.c **** *  Writes the register that controls whether the compare registers are
 742:.\Generated_Source\PSoC4/PWM_1.c **** *  swapped. When enabled in the Timer/Counter mode(without capture) the swap
 743:.\Generated_Source\PSoC4/PWM_1.c **** *  occurs at a TC event. In the PWM mode the swap occurs at the next TC event
 744:.\Generated_Source\PSoC4/PWM_1.c **** *  following a hardware switch event.
 745:.\Generated_Source\PSoC4/PWM_1.c **** *
 746:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 747:.\Generated_Source\PSoC4/PWM_1.c **** *  swapEnable
 748:.\Generated_Source\PSoC4/PWM_1.c **** *   Values:
 749:.\Generated_Source\PSoC4/PWM_1.c **** *     - 0 - Disable swap
 750:.\Generated_Source\PSoC4/PWM_1.c **** *     - 1 - Enable swap
 751:.\Generated_Source\PSoC4/PWM_1.c **** *
 752:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 753:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 754:.\Generated_Source\PSoC4/PWM_1.c **** *
 755:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 31


 756:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetCompareSwap(uint32 swapEnable)
 757:.\Generated_Source\PSoC4/PWM_1.c **** {
 956              		.loc 1 757 0
 957              		.cfi_startproc
 958 0000 90B5     		push	{r4, r7, lr}
 959              		.cfi_def_cfa_offset 12
 960              		.cfi_offset 4, -12
 961              		.cfi_offset 7, -8
 962              		.cfi_offset 14, -4
 963 0002 85B0     		sub	sp, sp, #20
 964              		.cfi_def_cfa_offset 32
 965 0004 00AF     		add	r7, sp, #0
 966              		.cfi_def_cfa_register 7
 967 0006 7860     		str	r0, [r7, #4]
 758:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
 759:.\Generated_Source\PSoC4/PWM_1.c **** 
 760:.\Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 968              		.loc 1 760 0
 969 0008 3C1C     		mov	r4, r7
 970 000a 0F34     		add	r4, r4, #15
 971 000c FFF7FEFF 		bl	CyEnterCriticalSection
 972 0010 031C     		mov	r3, r0
 973 0012 2370     		strb	r3, [r4]
 761:.\Generated_Source\PSoC4/PWM_1.c **** 
 762:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG &= (uint32)~PWM_1_RELOAD_CC_MASK;
 974              		.loc 1 762 0
 975 0014 0B4B     		ldr	r3, .L59
 976 0016 0B4A     		ldr	r2, .L59
 977 0018 1268     		ldr	r2, [r2]
 978 001a 0121     		mov	r1, #1
 979 001c 8A43     		bic	r2, r1
 980 001e 1A60     		str	r2, [r3]
 763:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG |= (swapEnable & PWM_1_1BIT_MASK);
 981              		.loc 1 763 0
 982 0020 084B     		ldr	r3, .L59
 983 0022 084A     		ldr	r2, .L59
 984 0024 1168     		ldr	r1, [r2]
 985 0026 7868     		ldr	r0, [r7, #4]
 986 0028 0122     		mov	r2, #1
 987 002a 0240     		and	r2, r0
 988 002c 0A43     		orr	r2, r1
 989 002e 1A60     		str	r2, [r3]
 764:.\Generated_Source\PSoC4/PWM_1.c **** 
 765:.\Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 990              		.loc 1 765 0
 991 0030 3B1C     		mov	r3, r7
 992 0032 0F33     		add	r3, r3, #15
 993 0034 1B78     		ldrb	r3, [r3]
 994 0036 181C     		mov	r0, r3
 995 0038 FFF7FEFF 		bl	CyExitCriticalSection
 766:.\Generated_Source\PSoC4/PWM_1.c **** }
 996              		.loc 1 766 0
 997 003c BD46     		mov	sp, r7
 998 003e 05B0     		add	sp, sp, #20
 999              		@ sp needed
 1000 0040 90BD     		pop	{r4, r7, pc}
 1001              	.L60:
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 32


 1002 0042 C046     		.align	2
 1003              	.L59:
 1004 0044 00010540 		.word	1074069760
 1005              		.cfi_endproc
 1006              	.LFE18:
 1007              		.size	PWM_1_SetCompareSwap, .-PWM_1_SetCompareSwap
 1008              		.section	.text.PWM_1_WritePeriodBuf,"ax",%progbits
 1009              		.align	2
 1010              		.global	PWM_1_WritePeriodBuf
 1011              		.code	16
 1012              		.thumb_func
 1013              		.type	PWM_1_WritePeriodBuf, %function
 1014              	PWM_1_WritePeriodBuf:
 1015              	.LFB19:
 767:.\Generated_Source\PSoC4/PWM_1.c **** 
 768:.\Generated_Source\PSoC4/PWM_1.c **** 
 769:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 770:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_WritePeriodBuf
 771:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 772:.\Generated_Source\PSoC4/PWM_1.c **** *
 773:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 774:.\Generated_Source\PSoC4/PWM_1.c **** *  Writes the 16 bit period buf register with the new period value.
 775:.\Generated_Source\PSoC4/PWM_1.c **** *
 776:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 777:.\Generated_Source\PSoC4/PWM_1.c **** *  periodBuf: Period value
 778:.\Generated_Source\PSoC4/PWM_1.c **** *
 779:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 780:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 781:.\Generated_Source\PSoC4/PWM_1.c **** *
 782:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 783:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_WritePeriodBuf(uint32 periodBuf)
 784:.\Generated_Source\PSoC4/PWM_1.c **** {
 1016              		.loc 1 784 0
 1017              		.cfi_startproc
 1018 0000 80B5     		push	{r7, lr}
 1019              		.cfi_def_cfa_offset 8
 1020              		.cfi_offset 7, -8
 1021              		.cfi_offset 14, -4
 1022 0002 82B0     		sub	sp, sp, #8
 1023              		.cfi_def_cfa_offset 16
 1024 0004 00AF     		add	r7, sp, #0
 1025              		.cfi_def_cfa_register 7
 1026 0006 7860     		str	r0, [r7, #4]
 785:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_PERIOD_BUF_REG = (periodBuf & PWM_1_16BIT_MASK);
 1027              		.loc 1 785 0
 1028 0008 034B     		ldr	r3, .L62
 1029 000a 7A68     		ldr	r2, [r7, #4]
 1030 000c 1204     		lsl	r2, r2, #16
 1031 000e 120C     		lsr	r2, r2, #16
 1032 0010 1A60     		str	r2, [r3]
 786:.\Generated_Source\PSoC4/PWM_1.c **** }
 1033              		.loc 1 786 0
 1034 0012 BD46     		mov	sp, r7
 1035 0014 02B0     		add	sp, sp, #8
 1036              		@ sp needed
 1037 0016 80BD     		pop	{r7, pc}
 1038              	.L63:
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 33


 1039              		.align	2
 1040              	.L62:
 1041 0018 18010540 		.word	1074069784
 1042              		.cfi_endproc
 1043              	.LFE19:
 1044              		.size	PWM_1_WritePeriodBuf, .-PWM_1_WritePeriodBuf
 1045              		.section	.text.PWM_1_ReadPeriodBuf,"ax",%progbits
 1046              		.align	2
 1047              		.global	PWM_1_ReadPeriodBuf
 1048              		.code	16
 1049              		.thumb_func
 1050              		.type	PWM_1_ReadPeriodBuf, %function
 1051              	PWM_1_ReadPeriodBuf:
 1052              	.LFB20:
 787:.\Generated_Source\PSoC4/PWM_1.c **** 
 788:.\Generated_Source\PSoC4/PWM_1.c **** 
 789:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 790:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_ReadPeriodBuf
 791:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 792:.\Generated_Source\PSoC4/PWM_1.c **** *
 793:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 794:.\Generated_Source\PSoC4/PWM_1.c **** *  Reads the 16 bit period buf register.
 795:.\Generated_Source\PSoC4/PWM_1.c **** *
 796:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 797:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 798:.\Generated_Source\PSoC4/PWM_1.c **** *
 799:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 800:.\Generated_Source\PSoC4/PWM_1.c **** *  Period value
 801:.\Generated_Source\PSoC4/PWM_1.c **** *
 802:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 803:.\Generated_Source\PSoC4/PWM_1.c **** uint32 PWM_1_ReadPeriodBuf(void)
 804:.\Generated_Source\PSoC4/PWM_1.c **** {
 1053              		.loc 1 804 0
 1054              		.cfi_startproc
 1055 0000 80B5     		push	{r7, lr}
 1056              		.cfi_def_cfa_offset 8
 1057              		.cfi_offset 7, -8
 1058              		.cfi_offset 14, -4
 1059 0002 00AF     		add	r7, sp, #0
 1060              		.cfi_def_cfa_register 7
 805:.\Generated_Source\PSoC4/PWM_1.c ****     return (PWM_1_PERIOD_BUF_REG & PWM_1_16BIT_MASK);
 1061              		.loc 1 805 0
 1062 0004 034B     		ldr	r3, .L66
 1063 0006 1B68     		ldr	r3, [r3]
 1064 0008 1B04     		lsl	r3, r3, #16
 1065 000a 1B0C     		lsr	r3, r3, #16
 806:.\Generated_Source\PSoC4/PWM_1.c **** }
 1066              		.loc 1 806 0
 1067 000c 181C     		mov	r0, r3
 1068 000e BD46     		mov	sp, r7
 1069              		@ sp needed
 1070 0010 80BD     		pop	{r7, pc}
 1071              	.L67:
 1072 0012 C046     		.align	2
 1073              	.L66:
 1074 0014 18010540 		.word	1074069784
 1075              		.cfi_endproc
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 34


 1076              	.LFE20:
 1077              		.size	PWM_1_ReadPeriodBuf, .-PWM_1_ReadPeriodBuf
 1078              		.section	.text.PWM_1_SetPeriodSwap,"ax",%progbits
 1079              		.align	2
 1080              		.global	PWM_1_SetPeriodSwap
 1081              		.code	16
 1082              		.thumb_func
 1083              		.type	PWM_1_SetPeriodSwap, %function
 1084              	PWM_1_SetPeriodSwap:
 1085              	.LFB21:
 807:.\Generated_Source\PSoC4/PWM_1.c **** 
 808:.\Generated_Source\PSoC4/PWM_1.c **** 
 809:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 810:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetPeriodSwap
 811:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 812:.\Generated_Source\PSoC4/PWM_1.c **** *
 813:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 814:.\Generated_Source\PSoC4/PWM_1.c **** *  Writes the register that controls whether the period registers are
 815:.\Generated_Source\PSoC4/PWM_1.c **** *  swapped. When enabled in Timer/Counter mode the swap occurs at a TC event.
 816:.\Generated_Source\PSoC4/PWM_1.c **** *  In the PWM mode the swap occurs at the next TC event following a hardware
 817:.\Generated_Source\PSoC4/PWM_1.c **** *  switch event.
 818:.\Generated_Source\PSoC4/PWM_1.c **** *
 819:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 820:.\Generated_Source\PSoC4/PWM_1.c **** *  swapEnable
 821:.\Generated_Source\PSoC4/PWM_1.c **** *   Values:
 822:.\Generated_Source\PSoC4/PWM_1.c **** *     - 0 - Disable swap
 823:.\Generated_Source\PSoC4/PWM_1.c **** *     - 1 - Enable swap
 824:.\Generated_Source\PSoC4/PWM_1.c **** *
 825:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 826:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 827:.\Generated_Source\PSoC4/PWM_1.c **** *
 828:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 829:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetPeriodSwap(uint32 swapEnable)
 830:.\Generated_Source\PSoC4/PWM_1.c **** {
 1086              		.loc 1 830 0
 1087              		.cfi_startproc
 1088 0000 90B5     		push	{r4, r7, lr}
 1089              		.cfi_def_cfa_offset 12
 1090              		.cfi_offset 4, -12
 1091              		.cfi_offset 7, -8
 1092              		.cfi_offset 14, -4
 1093 0002 85B0     		sub	sp, sp, #20
 1094              		.cfi_def_cfa_offset 32
 1095 0004 00AF     		add	r7, sp, #0
 1096              		.cfi_def_cfa_register 7
 1097 0006 7860     		str	r0, [r7, #4]
 831:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
 832:.\Generated_Source\PSoC4/PWM_1.c **** 
 833:.\Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 1098              		.loc 1 833 0
 1099 0008 3C1C     		mov	r4, r7
 1100 000a 0F34     		add	r4, r4, #15
 1101 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1102 0010 031C     		mov	r3, r0
 1103 0012 2370     		strb	r3, [r4]
 834:.\Generated_Source\PSoC4/PWM_1.c **** 
 835:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG &= (uint32)~PWM_1_RELOAD_PERIOD_MASK;
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 35


 1104              		.loc 1 835 0
 1105 0014 0B4B     		ldr	r3, .L69
 1106 0016 0B4A     		ldr	r2, .L69
 1107 0018 1268     		ldr	r2, [r2]
 1108 001a 0221     		mov	r1, #2
 1109 001c 8A43     		bic	r2, r1
 1110 001e 1A60     		str	r2, [r3]
 836:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_CONTROL_REG |= ((uint32)((swapEnable & PWM_1_1BIT_MASK) <<
 1111              		.loc 1 836 0
 1112 0020 084B     		ldr	r3, .L69
 1113 0022 084A     		ldr	r2, .L69
 1114 0024 1168     		ldr	r1, [r2]
 1115 0026 7868     		ldr	r0, [r7, #4]
 1116 0028 0122     		mov	r2, #1
 1117 002a 0240     		and	r2, r0
 1118 002c 5200     		lsl	r2, r2, #1
 1119 002e 0A43     		orr	r2, r1
 1120 0030 1A60     		str	r2, [r3]
 837:.\Generated_Source\PSoC4/PWM_1.c ****                                                             PWM_1_RELOAD_PERIOD_SHIFT));
 838:.\Generated_Source\PSoC4/PWM_1.c **** 
 839:.\Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 1121              		.loc 1 839 0
 1122 0032 3B1C     		mov	r3, r7
 1123 0034 0F33     		add	r3, r3, #15
 1124 0036 1B78     		ldrb	r3, [r3]
 1125 0038 181C     		mov	r0, r3
 1126 003a FFF7FEFF 		bl	CyExitCriticalSection
 840:.\Generated_Source\PSoC4/PWM_1.c **** }
 1127              		.loc 1 840 0
 1128 003e BD46     		mov	sp, r7
 1129 0040 05B0     		add	sp, sp, #20
 1130              		@ sp needed
 1131 0042 90BD     		pop	{r4, r7, pc}
 1132              	.L70:
 1133              		.align	2
 1134              	.L69:
 1135 0044 00010540 		.word	1074069760
 1136              		.cfi_endproc
 1137              	.LFE21:
 1138              		.size	PWM_1_SetPeriodSwap, .-PWM_1_SetPeriodSwap
 1139              		.section	.text.PWM_1_WriteCompare,"ax",%progbits
 1140              		.align	2
 1141              		.global	PWM_1_WriteCompare
 1142              		.code	16
 1143              		.thumb_func
 1144              		.type	PWM_1_WriteCompare, %function
 1145              	PWM_1_WriteCompare:
 1146              	.LFB22:
 841:.\Generated_Source\PSoC4/PWM_1.c **** 
 842:.\Generated_Source\PSoC4/PWM_1.c **** 
 843:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 844:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_WriteCompare
 845:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 846:.\Generated_Source\PSoC4/PWM_1.c **** *
 847:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 848:.\Generated_Source\PSoC4/PWM_1.c **** *  Writes the 16 bit compare register with the new compare value. Not
 849:.\Generated_Source\PSoC4/PWM_1.c **** *  applicable for Timer/Counter with Capture or in Quadrature Decoder modes.
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 36


 850:.\Generated_Source\PSoC4/PWM_1.c **** *
 851:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 852:.\Generated_Source\PSoC4/PWM_1.c **** *  compare: Compare value
 853:.\Generated_Source\PSoC4/PWM_1.c **** *
 854:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 855:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 856:.\Generated_Source\PSoC4/PWM_1.c **** *
 857:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 858:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_WriteCompare(uint32 compare)
 859:.\Generated_Source\PSoC4/PWM_1.c **** {
 1147              		.loc 1 859 0
 1148              		.cfi_startproc
 1149 0000 80B5     		push	{r7, lr}
 1150              		.cfi_def_cfa_offset 8
 1151              		.cfi_offset 7, -8
 1152              		.cfi_offset 14, -4
 1153 0002 82B0     		sub	sp, sp, #8
 1154              		.cfi_def_cfa_offset 16
 1155 0004 00AF     		add	r7, sp, #0
 1156              		.cfi_def_cfa_register 7
 1157 0006 7860     		str	r0, [r7, #4]
 860:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_CY_TCPWM_V2)
 861:.\Generated_Source\PSoC4/PWM_1.c ****         uint32 currentMode;
 862:.\Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1_CY_TCPWM_V2) */
 863:.\Generated_Source\PSoC4/PWM_1.c **** 
 864:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_CY_TCPWM_V2)
 865:.\Generated_Source\PSoC4/PWM_1.c ****         currentMode = ((PWM_1_CONTROL_REG & PWM_1_UPDOWN_MASK) >> PWM_1_UPDOWN_SHIFT);
 866:.\Generated_Source\PSoC4/PWM_1.c **** 
 867:.\Generated_Source\PSoC4/PWM_1.c ****         if (PWM_1__COUNT_DOWN == currentMode)
 868:.\Generated_Source\PSoC4/PWM_1.c ****         {
 869:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_COMP_CAP_REG = ((compare + 1u) & PWM_1_16BIT_MASK);
 870:.\Generated_Source\PSoC4/PWM_1.c ****         }
 871:.\Generated_Source\PSoC4/PWM_1.c ****         else if (PWM_1__COUNT_UP == currentMode)
 872:.\Generated_Source\PSoC4/PWM_1.c ****         {
 873:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_COMP_CAP_REG = ((compare - 1u) & PWM_1_16BIT_MASK);
 874:.\Generated_Source\PSoC4/PWM_1.c ****         }
 875:.\Generated_Source\PSoC4/PWM_1.c ****         else
 876:.\Generated_Source\PSoC4/PWM_1.c ****         {
 877:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_COMP_CAP_REG = (compare & PWM_1_16BIT_MASK);
 878:.\Generated_Source\PSoC4/PWM_1.c ****         }
 879:.\Generated_Source\PSoC4/PWM_1.c ****     #else
 880:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_COMP_CAP_REG = (compare & PWM_1_16BIT_MASK);
 1158              		.loc 1 880 0
 1159 0008 034B     		ldr	r3, .L72
 1160 000a 7A68     		ldr	r2, [r7, #4]
 1161 000c 1204     		lsl	r2, r2, #16
 1162 000e 120C     		lsr	r2, r2, #16
 1163 0010 1A60     		str	r2, [r3]
 881:.\Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1_CY_TCPWM_V2) */
 882:.\Generated_Source\PSoC4/PWM_1.c **** }
 1164              		.loc 1 882 0
 1165 0012 BD46     		mov	sp, r7
 1166 0014 02B0     		add	sp, sp, #8
 1167              		@ sp needed
 1168 0016 80BD     		pop	{r7, pc}
 1169              	.L73:
 1170              		.align	2
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 37


 1171              	.L72:
 1172 0018 0C010540 		.word	1074069772
 1173              		.cfi_endproc
 1174              	.LFE22:
 1175              		.size	PWM_1_WriteCompare, .-PWM_1_WriteCompare
 1176              		.section	.text.PWM_1_ReadCompare,"ax",%progbits
 1177              		.align	2
 1178              		.global	PWM_1_ReadCompare
 1179              		.code	16
 1180              		.thumb_func
 1181              		.type	PWM_1_ReadCompare, %function
 1182              	PWM_1_ReadCompare:
 1183              	.LFB23:
 883:.\Generated_Source\PSoC4/PWM_1.c **** 
 884:.\Generated_Source\PSoC4/PWM_1.c **** 
 885:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 886:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_ReadCompare
 887:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 888:.\Generated_Source\PSoC4/PWM_1.c **** *
 889:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 890:.\Generated_Source\PSoC4/PWM_1.c **** *  Reads the compare register. Not applicable for Timer/Counter with Capture
 891:.\Generated_Source\PSoC4/PWM_1.c **** *  or in Quadrature Decoder modes.
 892:.\Generated_Source\PSoC4/PWM_1.c **** *
 893:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 894:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 895:.\Generated_Source\PSoC4/PWM_1.c **** *
 896:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 897:.\Generated_Source\PSoC4/PWM_1.c **** *  Compare value
 898:.\Generated_Source\PSoC4/PWM_1.c **** *
 899:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 900:.\Generated_Source\PSoC4/PWM_1.c **** uint32 PWM_1_ReadCompare(void)
 901:.\Generated_Source\PSoC4/PWM_1.c **** {
 1184              		.loc 1 901 0
 1185              		.cfi_startproc
 1186 0000 80B5     		push	{r7, lr}
 1187              		.cfi_def_cfa_offset 8
 1188              		.cfi_offset 7, -8
 1189              		.cfi_offset 14, -4
 1190 0002 00AF     		add	r7, sp, #0
 1191              		.cfi_def_cfa_register 7
 902:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_CY_TCPWM_V2)
 903:.\Generated_Source\PSoC4/PWM_1.c ****         uint32 currentMode;
 904:.\Generated_Source\PSoC4/PWM_1.c ****         uint32 regVal;
 905:.\Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1_CY_TCPWM_V2) */
 906:.\Generated_Source\PSoC4/PWM_1.c **** 
 907:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_CY_TCPWM_V2)
 908:.\Generated_Source\PSoC4/PWM_1.c ****         currentMode = ((PWM_1_CONTROL_REG & PWM_1_UPDOWN_MASK) >> PWM_1_UPDOWN_SHIFT);
 909:.\Generated_Source\PSoC4/PWM_1.c **** 
 910:.\Generated_Source\PSoC4/PWM_1.c ****         if (PWM_1__COUNT_DOWN == currentMode)
 911:.\Generated_Source\PSoC4/PWM_1.c ****         {
 912:.\Generated_Source\PSoC4/PWM_1.c ****             regVal = ((PWM_1_COMP_CAP_REG - 1u) & PWM_1_16BIT_MASK);
 913:.\Generated_Source\PSoC4/PWM_1.c ****         }
 914:.\Generated_Source\PSoC4/PWM_1.c ****         else if (PWM_1__COUNT_UP == currentMode)
 915:.\Generated_Source\PSoC4/PWM_1.c ****         {
 916:.\Generated_Source\PSoC4/PWM_1.c ****             regVal = ((PWM_1_COMP_CAP_REG + 1u) & PWM_1_16BIT_MASK);
 917:.\Generated_Source\PSoC4/PWM_1.c ****         }
 918:.\Generated_Source\PSoC4/PWM_1.c ****         else
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 38


 919:.\Generated_Source\PSoC4/PWM_1.c ****         {
 920:.\Generated_Source\PSoC4/PWM_1.c ****             regVal = (PWM_1_COMP_CAP_REG & PWM_1_16BIT_MASK);
 921:.\Generated_Source\PSoC4/PWM_1.c ****         }
 922:.\Generated_Source\PSoC4/PWM_1.c ****         return (regVal);
 923:.\Generated_Source\PSoC4/PWM_1.c ****     #else
 924:.\Generated_Source\PSoC4/PWM_1.c ****         return (PWM_1_COMP_CAP_REG & PWM_1_16BIT_MASK);
 1192              		.loc 1 924 0
 1193 0004 034B     		ldr	r3, .L76
 1194 0006 1B68     		ldr	r3, [r3]
 1195 0008 1B04     		lsl	r3, r3, #16
 1196 000a 1B0C     		lsr	r3, r3, #16
 925:.\Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1_CY_TCPWM_V2) */
 926:.\Generated_Source\PSoC4/PWM_1.c **** }
 1197              		.loc 1 926 0
 1198 000c 181C     		mov	r0, r3
 1199 000e BD46     		mov	sp, r7
 1200              		@ sp needed
 1201 0010 80BD     		pop	{r7, pc}
 1202              	.L77:
 1203 0012 C046     		.align	2
 1204              	.L76:
 1205 0014 0C010540 		.word	1074069772
 1206              		.cfi_endproc
 1207              	.LFE23:
 1208              		.size	PWM_1_ReadCompare, .-PWM_1_ReadCompare
 1209              		.section	.text.PWM_1_WriteCompareBuf,"ax",%progbits
 1210              		.align	2
 1211              		.global	PWM_1_WriteCompareBuf
 1212              		.code	16
 1213              		.thumb_func
 1214              		.type	PWM_1_WriteCompareBuf, %function
 1215              	PWM_1_WriteCompareBuf:
 1216              	.LFB24:
 927:.\Generated_Source\PSoC4/PWM_1.c **** 
 928:.\Generated_Source\PSoC4/PWM_1.c **** 
 929:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 930:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_WriteCompareBuf
 931:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 932:.\Generated_Source\PSoC4/PWM_1.c **** *
 933:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 934:.\Generated_Source\PSoC4/PWM_1.c **** *  Writes the 16 bit compare buffer register with the new compare value. Not
 935:.\Generated_Source\PSoC4/PWM_1.c **** *  applicable for Timer/Counter with Capture or in Quadrature Decoder modes.
 936:.\Generated_Source\PSoC4/PWM_1.c **** *
 937:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 938:.\Generated_Source\PSoC4/PWM_1.c **** *  compareBuf: Compare value
 939:.\Generated_Source\PSoC4/PWM_1.c **** *
 940:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 941:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 942:.\Generated_Source\PSoC4/PWM_1.c **** *
 943:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 944:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_WriteCompareBuf(uint32 compareBuf)
 945:.\Generated_Source\PSoC4/PWM_1.c **** {
 1217              		.loc 1 945 0
 1218              		.cfi_startproc
 1219 0000 80B5     		push	{r7, lr}
 1220              		.cfi_def_cfa_offset 8
 1221              		.cfi_offset 7, -8
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 39


 1222              		.cfi_offset 14, -4
 1223 0002 82B0     		sub	sp, sp, #8
 1224              		.cfi_def_cfa_offset 16
 1225 0004 00AF     		add	r7, sp, #0
 1226              		.cfi_def_cfa_register 7
 1227 0006 7860     		str	r0, [r7, #4]
 946:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_CY_TCPWM_V2)
 947:.\Generated_Source\PSoC4/PWM_1.c ****         uint32 currentMode;
 948:.\Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1_CY_TCPWM_V2) */
 949:.\Generated_Source\PSoC4/PWM_1.c **** 
 950:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_CY_TCPWM_V2)
 951:.\Generated_Source\PSoC4/PWM_1.c ****         currentMode = ((PWM_1_CONTROL_REG & PWM_1_UPDOWN_MASK) >> PWM_1_UPDOWN_SHIFT);
 952:.\Generated_Source\PSoC4/PWM_1.c **** 
 953:.\Generated_Source\PSoC4/PWM_1.c ****         if (PWM_1__COUNT_DOWN == currentMode)
 954:.\Generated_Source\PSoC4/PWM_1.c ****         {
 955:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_COMP_CAP_BUF_REG = ((compareBuf + 1u) & PWM_1_16BIT_MASK);
 956:.\Generated_Source\PSoC4/PWM_1.c ****         }
 957:.\Generated_Source\PSoC4/PWM_1.c ****         else if (PWM_1__COUNT_UP == currentMode)
 958:.\Generated_Source\PSoC4/PWM_1.c ****         {
 959:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_COMP_CAP_BUF_REG = ((compareBuf - 1u) & PWM_1_16BIT_MASK);
 960:.\Generated_Source\PSoC4/PWM_1.c ****         }
 961:.\Generated_Source\PSoC4/PWM_1.c ****         else
 962:.\Generated_Source\PSoC4/PWM_1.c ****         {
 963:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_COMP_CAP_BUF_REG = (compareBuf & PWM_1_16BIT_MASK);
 964:.\Generated_Source\PSoC4/PWM_1.c ****         }
 965:.\Generated_Source\PSoC4/PWM_1.c ****     #else
 966:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_COMP_CAP_BUF_REG = (compareBuf & PWM_1_16BIT_MASK);
 1228              		.loc 1 966 0
 1229 0008 034B     		ldr	r3, .L79
 1230 000a 7A68     		ldr	r2, [r7, #4]
 1231 000c 1204     		lsl	r2, r2, #16
 1232 000e 120C     		lsr	r2, r2, #16
 1233 0010 1A60     		str	r2, [r3]
 967:.\Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1_CY_TCPWM_V2) */
 968:.\Generated_Source\PSoC4/PWM_1.c **** }
 1234              		.loc 1 968 0
 1235 0012 BD46     		mov	sp, r7
 1236 0014 02B0     		add	sp, sp, #8
 1237              		@ sp needed
 1238 0016 80BD     		pop	{r7, pc}
 1239              	.L80:
 1240              		.align	2
 1241              	.L79:
 1242 0018 10010540 		.word	1074069776
 1243              		.cfi_endproc
 1244              	.LFE24:
 1245              		.size	PWM_1_WriteCompareBuf, .-PWM_1_WriteCompareBuf
 1246              		.section	.text.PWM_1_ReadCompareBuf,"ax",%progbits
 1247              		.align	2
 1248              		.global	PWM_1_ReadCompareBuf
 1249              		.code	16
 1250              		.thumb_func
 1251              		.type	PWM_1_ReadCompareBuf, %function
 1252              	PWM_1_ReadCompareBuf:
 1253              	.LFB25:
 969:.\Generated_Source\PSoC4/PWM_1.c **** 
 970:.\Generated_Source\PSoC4/PWM_1.c **** 
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 40


 971:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 972:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_ReadCompareBuf
 973:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 974:.\Generated_Source\PSoC4/PWM_1.c **** *
 975:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 976:.\Generated_Source\PSoC4/PWM_1.c **** *  Reads the compare buffer register. Not applicable for Timer/Counter with
 977:.\Generated_Source\PSoC4/PWM_1.c **** *  Capture or in Quadrature Decoder modes.
 978:.\Generated_Source\PSoC4/PWM_1.c **** *
 979:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 980:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 981:.\Generated_Source\PSoC4/PWM_1.c **** *
 982:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 983:.\Generated_Source\PSoC4/PWM_1.c **** *  Compare buffer value
 984:.\Generated_Source\PSoC4/PWM_1.c **** *
 985:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 986:.\Generated_Source\PSoC4/PWM_1.c **** uint32 PWM_1_ReadCompareBuf(void)
 987:.\Generated_Source\PSoC4/PWM_1.c **** {
 1254              		.loc 1 987 0
 1255              		.cfi_startproc
 1256 0000 80B5     		push	{r7, lr}
 1257              		.cfi_def_cfa_offset 8
 1258              		.cfi_offset 7, -8
 1259              		.cfi_offset 14, -4
 1260 0002 00AF     		add	r7, sp, #0
 1261              		.cfi_def_cfa_register 7
 988:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_CY_TCPWM_V2)
 989:.\Generated_Source\PSoC4/PWM_1.c ****         uint32 currentMode;
 990:.\Generated_Source\PSoC4/PWM_1.c ****         uint32 regVal;
 991:.\Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1_CY_TCPWM_V2) */
 992:.\Generated_Source\PSoC4/PWM_1.c **** 
 993:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_CY_TCPWM_V2)
 994:.\Generated_Source\PSoC4/PWM_1.c ****         currentMode = ((PWM_1_CONTROL_REG & PWM_1_UPDOWN_MASK) >> PWM_1_UPDOWN_SHIFT);
 995:.\Generated_Source\PSoC4/PWM_1.c **** 
 996:.\Generated_Source\PSoC4/PWM_1.c ****         if (PWM_1__COUNT_DOWN == currentMode)
 997:.\Generated_Source\PSoC4/PWM_1.c ****         {
 998:.\Generated_Source\PSoC4/PWM_1.c ****             regVal = ((PWM_1_COMP_CAP_BUF_REG - 1u) & PWM_1_16BIT_MASK);
 999:.\Generated_Source\PSoC4/PWM_1.c ****         }
1000:.\Generated_Source\PSoC4/PWM_1.c ****         else if (PWM_1__COUNT_UP == currentMode)
1001:.\Generated_Source\PSoC4/PWM_1.c ****         {
1002:.\Generated_Source\PSoC4/PWM_1.c ****             regVal = ((PWM_1_COMP_CAP_BUF_REG + 1u) & PWM_1_16BIT_MASK);
1003:.\Generated_Source\PSoC4/PWM_1.c ****         }
1004:.\Generated_Source\PSoC4/PWM_1.c ****         else
1005:.\Generated_Source\PSoC4/PWM_1.c ****         {
1006:.\Generated_Source\PSoC4/PWM_1.c ****             regVal = (PWM_1_COMP_CAP_BUF_REG & PWM_1_16BIT_MASK);
1007:.\Generated_Source\PSoC4/PWM_1.c ****         }
1008:.\Generated_Source\PSoC4/PWM_1.c ****         return (regVal);
1009:.\Generated_Source\PSoC4/PWM_1.c ****     #else
1010:.\Generated_Source\PSoC4/PWM_1.c ****         return (PWM_1_COMP_CAP_BUF_REG & PWM_1_16BIT_MASK);
 1262              		.loc 1 1010 0
 1263 0004 034B     		ldr	r3, .L83
 1264 0006 1B68     		ldr	r3, [r3]
 1265 0008 1B04     		lsl	r3, r3, #16
 1266 000a 1B0C     		lsr	r3, r3, #16
1011:.\Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1_CY_TCPWM_V2) */
1012:.\Generated_Source\PSoC4/PWM_1.c **** }
 1267              		.loc 1 1012 0
 1268 000c 181C     		mov	r0, r3
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 41


 1269 000e BD46     		mov	sp, r7
 1270              		@ sp needed
 1271 0010 80BD     		pop	{r7, pc}
 1272              	.L84:
 1273 0012 C046     		.align	2
 1274              	.L83:
 1275 0014 10010540 		.word	1074069776
 1276              		.cfi_endproc
 1277              	.LFE25:
 1278              		.size	PWM_1_ReadCompareBuf, .-PWM_1_ReadCompareBuf
 1279              		.section	.text.PWM_1_ReadCapture,"ax",%progbits
 1280              		.align	2
 1281              		.global	PWM_1_ReadCapture
 1282              		.code	16
 1283              		.thumb_func
 1284              		.type	PWM_1_ReadCapture, %function
 1285              	PWM_1_ReadCapture:
 1286              	.LFB26:
1013:.\Generated_Source\PSoC4/PWM_1.c **** 
1014:.\Generated_Source\PSoC4/PWM_1.c **** 
1015:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1016:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_ReadCapture
1017:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1018:.\Generated_Source\PSoC4/PWM_1.c **** *
1019:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
1020:.\Generated_Source\PSoC4/PWM_1.c **** *  Reads the captured counter value. This API is applicable only for
1021:.\Generated_Source\PSoC4/PWM_1.c **** *  Timer/Counter with the capture mode and Quadrature Decoder modes.
1022:.\Generated_Source\PSoC4/PWM_1.c **** *
1023:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1024:.\Generated_Source\PSoC4/PWM_1.c **** *  None
1025:.\Generated_Source\PSoC4/PWM_1.c **** *
1026:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
1027:.\Generated_Source\PSoC4/PWM_1.c **** *  Capture value
1028:.\Generated_Source\PSoC4/PWM_1.c **** *
1029:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1030:.\Generated_Source\PSoC4/PWM_1.c **** uint32 PWM_1_ReadCapture(void)
1031:.\Generated_Source\PSoC4/PWM_1.c **** {
 1287              		.loc 1 1031 0
 1288              		.cfi_startproc
 1289 0000 80B5     		push	{r7, lr}
 1290              		.cfi_def_cfa_offset 8
 1291              		.cfi_offset 7, -8
 1292              		.cfi_offset 14, -4
 1293 0002 00AF     		add	r7, sp, #0
 1294              		.cfi_def_cfa_register 7
1032:.\Generated_Source\PSoC4/PWM_1.c ****     return (PWM_1_COMP_CAP_REG & PWM_1_16BIT_MASK);
 1295              		.loc 1 1032 0
 1296 0004 034B     		ldr	r3, .L87
 1297 0006 1B68     		ldr	r3, [r3]
 1298 0008 1B04     		lsl	r3, r3, #16
 1299 000a 1B0C     		lsr	r3, r3, #16
1033:.\Generated_Source\PSoC4/PWM_1.c **** }
 1300              		.loc 1 1033 0
 1301 000c 181C     		mov	r0, r3
 1302 000e BD46     		mov	sp, r7
 1303              		@ sp needed
 1304 0010 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 42


 1305              	.L88:
 1306 0012 C046     		.align	2
 1307              	.L87:
 1308 0014 0C010540 		.word	1074069772
 1309              		.cfi_endproc
 1310              	.LFE26:
 1311              		.size	PWM_1_ReadCapture, .-PWM_1_ReadCapture
 1312              		.section	.text.PWM_1_ReadCaptureBuf,"ax",%progbits
 1313              		.align	2
 1314              		.global	PWM_1_ReadCaptureBuf
 1315              		.code	16
 1316              		.thumb_func
 1317              		.type	PWM_1_ReadCaptureBuf, %function
 1318              	PWM_1_ReadCaptureBuf:
 1319              	.LFB27:
1034:.\Generated_Source\PSoC4/PWM_1.c **** 
1035:.\Generated_Source\PSoC4/PWM_1.c **** 
1036:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1037:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_ReadCaptureBuf
1038:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1039:.\Generated_Source\PSoC4/PWM_1.c **** *
1040:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
1041:.\Generated_Source\PSoC4/PWM_1.c **** *  Reads the capture buffer register. This API is applicable only for
1042:.\Generated_Source\PSoC4/PWM_1.c **** *  Timer/Counter with the capture mode and Quadrature Decoder modes.
1043:.\Generated_Source\PSoC4/PWM_1.c **** *
1044:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1045:.\Generated_Source\PSoC4/PWM_1.c **** *  None
1046:.\Generated_Source\PSoC4/PWM_1.c **** *
1047:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
1048:.\Generated_Source\PSoC4/PWM_1.c **** *  Capture buffer value
1049:.\Generated_Source\PSoC4/PWM_1.c **** *
1050:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1051:.\Generated_Source\PSoC4/PWM_1.c **** uint32 PWM_1_ReadCaptureBuf(void)
1052:.\Generated_Source\PSoC4/PWM_1.c **** {
 1320              		.loc 1 1052 0
 1321              		.cfi_startproc
 1322 0000 80B5     		push	{r7, lr}
 1323              		.cfi_def_cfa_offset 8
 1324              		.cfi_offset 7, -8
 1325              		.cfi_offset 14, -4
 1326 0002 00AF     		add	r7, sp, #0
 1327              		.cfi_def_cfa_register 7
1053:.\Generated_Source\PSoC4/PWM_1.c ****     return (PWM_1_COMP_CAP_BUF_REG & PWM_1_16BIT_MASK);
 1328              		.loc 1 1053 0
 1329 0004 034B     		ldr	r3, .L91
 1330 0006 1B68     		ldr	r3, [r3]
 1331 0008 1B04     		lsl	r3, r3, #16
 1332 000a 1B0C     		lsr	r3, r3, #16
1054:.\Generated_Source\PSoC4/PWM_1.c **** }
 1333              		.loc 1 1054 0
 1334 000c 181C     		mov	r0, r3
 1335 000e BD46     		mov	sp, r7
 1336              		@ sp needed
 1337 0010 80BD     		pop	{r7, pc}
 1338              	.L92:
 1339 0012 C046     		.align	2
 1340              	.L91:
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 43


 1341 0014 10010540 		.word	1074069776
 1342              		.cfi_endproc
 1343              	.LFE27:
 1344              		.size	PWM_1_ReadCaptureBuf, .-PWM_1_ReadCaptureBuf
 1345              		.section	.text.PWM_1_SetCaptureMode,"ax",%progbits
 1346              		.align	2
 1347              		.global	PWM_1_SetCaptureMode
 1348              		.code	16
 1349              		.thumb_func
 1350              		.type	PWM_1_SetCaptureMode, %function
 1351              	PWM_1_SetCaptureMode:
 1352              	.LFB28:
1055:.\Generated_Source\PSoC4/PWM_1.c **** 
1056:.\Generated_Source\PSoC4/PWM_1.c **** 
1057:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1058:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetCaptureMode
1059:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1060:.\Generated_Source\PSoC4/PWM_1.c **** *
1061:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
1062:.\Generated_Source\PSoC4/PWM_1.c **** *  Sets the capture trigger mode. For PWM mode this is the switch input.
1063:.\Generated_Source\PSoC4/PWM_1.c **** *  This input is not applicable to the Timer/Counter without Capture and
1064:.\Generated_Source\PSoC4/PWM_1.c **** *  Quadrature Decoder modes.
1065:.\Generated_Source\PSoC4/PWM_1.c **** *
1066:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1067:.\Generated_Source\PSoC4/PWM_1.c **** *  triggerMode: Enumerated trigger mode value
1068:.\Generated_Source\PSoC4/PWM_1.c **** *   Values:
1069:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_LEVEL     - Level
1070:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_RISING    - Rising edge
1071:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_FALLING   - Falling edge
1072:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_BOTH      - Both rising and falling edge
1073:.\Generated_Source\PSoC4/PWM_1.c **** *
1074:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
1075:.\Generated_Source\PSoC4/PWM_1.c **** *  None
1076:.\Generated_Source\PSoC4/PWM_1.c **** *
1077:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1078:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetCaptureMode(uint32 triggerMode)
1079:.\Generated_Source\PSoC4/PWM_1.c **** {
 1353              		.loc 1 1079 0
 1354              		.cfi_startproc
 1355 0000 90B5     		push	{r4, r7, lr}
 1356              		.cfi_def_cfa_offset 12
 1357              		.cfi_offset 4, -12
 1358              		.cfi_offset 7, -8
 1359              		.cfi_offset 14, -4
 1360 0002 85B0     		sub	sp, sp, #20
 1361              		.cfi_def_cfa_offset 32
 1362 0004 00AF     		add	r7, sp, #0
 1363              		.cfi_def_cfa_register 7
 1364 0006 7860     		str	r0, [r7, #4]
1080:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
1081:.\Generated_Source\PSoC4/PWM_1.c **** 
1082:.\Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 1365              		.loc 1 1082 0
 1366 0008 3C1C     		mov	r4, r7
 1367 000a 0F34     		add	r4, r4, #15
 1368 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1369 0010 031C     		mov	r3, r0
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 44


 1370 0012 2370     		strb	r3, [r4]
1083:.\Generated_Source\PSoC4/PWM_1.c **** 
1084:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_TRIG_CONTROL1_REG &= (uint32)~PWM_1_CAPTURE_MASK;
 1371              		.loc 1 1084 0
 1372 0014 0A4B     		ldr	r3, .L94
 1373 0016 0A4A     		ldr	r2, .L94
 1374 0018 1268     		ldr	r2, [r2]
 1375 001a 0321     		mov	r1, #3
 1376 001c 8A43     		bic	r2, r1
 1377 001e 1A60     		str	r2, [r3]
1085:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_TRIG_CONTROL1_REG |= triggerMode;
 1378              		.loc 1 1085 0
 1379 0020 074B     		ldr	r3, .L94
 1380 0022 074A     		ldr	r2, .L94
 1381 0024 1168     		ldr	r1, [r2]
 1382 0026 7A68     		ldr	r2, [r7, #4]
 1383 0028 0A43     		orr	r2, r1
 1384 002a 1A60     		str	r2, [r3]
1086:.\Generated_Source\PSoC4/PWM_1.c **** 
1087:.\Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 1385              		.loc 1 1087 0
 1386 002c 3B1C     		mov	r3, r7
 1387 002e 0F33     		add	r3, r3, #15
 1388 0030 1B78     		ldrb	r3, [r3]
 1389 0032 181C     		mov	r0, r3
 1390 0034 FFF7FEFF 		bl	CyExitCriticalSection
1088:.\Generated_Source\PSoC4/PWM_1.c **** }
 1391              		.loc 1 1088 0
 1392 0038 BD46     		mov	sp, r7
 1393 003a 05B0     		add	sp, sp, #20
 1394              		@ sp needed
 1395 003c 90BD     		pop	{r4, r7, pc}
 1396              	.L95:
 1397 003e C046     		.align	2
 1398              	.L94:
 1399 0040 24010540 		.word	1074069796
 1400              		.cfi_endproc
 1401              	.LFE28:
 1402              		.size	PWM_1_SetCaptureMode, .-PWM_1_SetCaptureMode
 1403              		.section	.text.PWM_1_SetReloadMode,"ax",%progbits
 1404              		.align	2
 1405              		.global	PWM_1_SetReloadMode
 1406              		.code	16
 1407              		.thumb_func
 1408              		.type	PWM_1_SetReloadMode, %function
 1409              	PWM_1_SetReloadMode:
 1410              	.LFB29:
1089:.\Generated_Source\PSoC4/PWM_1.c **** 
1090:.\Generated_Source\PSoC4/PWM_1.c **** 
1091:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1092:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetReloadMode
1093:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1094:.\Generated_Source\PSoC4/PWM_1.c **** *
1095:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
1096:.\Generated_Source\PSoC4/PWM_1.c **** *  Sets the reload trigger mode. For Quadrature Decoder mode this is the index
1097:.\Generated_Source\PSoC4/PWM_1.c **** *  input.
1098:.\Generated_Source\PSoC4/PWM_1.c **** *
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 45


1099:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1100:.\Generated_Source\PSoC4/PWM_1.c **** *  triggerMode: Enumerated trigger mode value
1101:.\Generated_Source\PSoC4/PWM_1.c **** *   Values:
1102:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_LEVEL     - Level
1103:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_RISING    - Rising edge
1104:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_FALLING   - Falling edge
1105:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_BOTH      - Both rising and falling edge
1106:.\Generated_Source\PSoC4/PWM_1.c **** *
1107:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
1108:.\Generated_Source\PSoC4/PWM_1.c **** *  None
1109:.\Generated_Source\PSoC4/PWM_1.c **** *
1110:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1111:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetReloadMode(uint32 triggerMode)
1112:.\Generated_Source\PSoC4/PWM_1.c **** {
 1411              		.loc 1 1112 0
 1412              		.cfi_startproc
 1413 0000 90B5     		push	{r4, r7, lr}
 1414              		.cfi_def_cfa_offset 12
 1415              		.cfi_offset 4, -12
 1416              		.cfi_offset 7, -8
 1417              		.cfi_offset 14, -4
 1418 0002 85B0     		sub	sp, sp, #20
 1419              		.cfi_def_cfa_offset 32
 1420 0004 00AF     		add	r7, sp, #0
 1421              		.cfi_def_cfa_register 7
 1422 0006 7860     		str	r0, [r7, #4]
1113:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
1114:.\Generated_Source\PSoC4/PWM_1.c **** 
1115:.\Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 1423              		.loc 1 1115 0
 1424 0008 3C1C     		mov	r4, r7
 1425 000a 0F34     		add	r4, r4, #15
 1426 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1427 0010 031C     		mov	r3, r0
 1428 0012 2370     		strb	r3, [r4]
1116:.\Generated_Source\PSoC4/PWM_1.c **** 
1117:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_TRIG_CONTROL1_REG &= (uint32)~PWM_1_RELOAD_MASK;
 1429              		.loc 1 1117 0
 1430 0014 0A4B     		ldr	r3, .L97
 1431 0016 0A4A     		ldr	r2, .L97
 1432 0018 1268     		ldr	r2, [r2]
 1433 001a 3021     		mov	r1, #48
 1434 001c 8A43     		bic	r2, r1
 1435 001e 1A60     		str	r2, [r3]
1118:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << PWM_1_RELOAD_SHIFT));
 1436              		.loc 1 1118 0
 1437 0020 074B     		ldr	r3, .L97
 1438 0022 074A     		ldr	r2, .L97
 1439 0024 1168     		ldr	r1, [r2]
 1440 0026 7A68     		ldr	r2, [r7, #4]
 1441 0028 1201     		lsl	r2, r2, #4
 1442 002a 0A43     		orr	r2, r1
 1443 002c 1A60     		str	r2, [r3]
1119:.\Generated_Source\PSoC4/PWM_1.c **** 
1120:.\Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 1444              		.loc 1 1120 0
 1445 002e 3B1C     		mov	r3, r7
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 46


 1446 0030 0F33     		add	r3, r3, #15
 1447 0032 1B78     		ldrb	r3, [r3]
 1448 0034 181C     		mov	r0, r3
 1449 0036 FFF7FEFF 		bl	CyExitCriticalSection
1121:.\Generated_Source\PSoC4/PWM_1.c **** }
 1450              		.loc 1 1121 0
 1451 003a BD46     		mov	sp, r7
 1452 003c 05B0     		add	sp, sp, #20
 1453              		@ sp needed
 1454 003e 90BD     		pop	{r4, r7, pc}
 1455              	.L98:
 1456              		.align	2
 1457              	.L97:
 1458 0040 24010540 		.word	1074069796
 1459              		.cfi_endproc
 1460              	.LFE29:
 1461              		.size	PWM_1_SetReloadMode, .-PWM_1_SetReloadMode
 1462              		.section	.text.PWM_1_SetStartMode,"ax",%progbits
 1463              		.align	2
 1464              		.global	PWM_1_SetStartMode
 1465              		.code	16
 1466              		.thumb_func
 1467              		.type	PWM_1_SetStartMode, %function
 1468              	PWM_1_SetStartMode:
 1469              	.LFB30:
1122:.\Generated_Source\PSoC4/PWM_1.c **** 
1123:.\Generated_Source\PSoC4/PWM_1.c **** 
1124:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1125:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetStartMode
1126:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1127:.\Generated_Source\PSoC4/PWM_1.c **** *
1128:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
1129:.\Generated_Source\PSoC4/PWM_1.c **** *  Sets the start trigger mode. For Quadrature Decoder mode this is the
1130:.\Generated_Source\PSoC4/PWM_1.c **** *  phiB input.
1131:.\Generated_Source\PSoC4/PWM_1.c **** *
1132:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1133:.\Generated_Source\PSoC4/PWM_1.c **** *  triggerMode: Enumerated trigger mode value
1134:.\Generated_Source\PSoC4/PWM_1.c **** *   Values:
1135:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_LEVEL     - Level
1136:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_RISING    - Rising edge
1137:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_FALLING   - Falling edge
1138:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_BOTH      - Both rising and falling edge
1139:.\Generated_Source\PSoC4/PWM_1.c **** *
1140:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
1141:.\Generated_Source\PSoC4/PWM_1.c **** *  None
1142:.\Generated_Source\PSoC4/PWM_1.c **** *
1143:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1144:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetStartMode(uint32 triggerMode)
1145:.\Generated_Source\PSoC4/PWM_1.c **** {
 1470              		.loc 1 1145 0
 1471              		.cfi_startproc
 1472 0000 90B5     		push	{r4, r7, lr}
 1473              		.cfi_def_cfa_offset 12
 1474              		.cfi_offset 4, -12
 1475              		.cfi_offset 7, -8
 1476              		.cfi_offset 14, -4
 1477 0002 85B0     		sub	sp, sp, #20
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 47


 1478              		.cfi_def_cfa_offset 32
 1479 0004 00AF     		add	r7, sp, #0
 1480              		.cfi_def_cfa_register 7
 1481 0006 7860     		str	r0, [r7, #4]
1146:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
1147:.\Generated_Source\PSoC4/PWM_1.c **** 
1148:.\Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 1482              		.loc 1 1148 0
 1483 0008 3C1C     		mov	r4, r7
 1484 000a 0F34     		add	r4, r4, #15
 1485 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1486 0010 031C     		mov	r3, r0
 1487 0012 2370     		strb	r3, [r4]
1149:.\Generated_Source\PSoC4/PWM_1.c **** 
1150:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_TRIG_CONTROL1_REG &= (uint32)~PWM_1_START_MASK;
 1488              		.loc 1 1150 0
 1489 0014 0A4B     		ldr	r3, .L100
 1490 0016 0A4A     		ldr	r2, .L100
 1491 0018 1168     		ldr	r1, [r2]
 1492 001a 0A4A     		ldr	r2, .L100+4
 1493 001c 0A40     		and	r2, r1
 1494 001e 1A60     		str	r2, [r3]
1151:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << PWM_1_START_SHIFT));
 1495              		.loc 1 1151 0
 1496 0020 074B     		ldr	r3, .L100
 1497 0022 074A     		ldr	r2, .L100
 1498 0024 1168     		ldr	r1, [r2]
 1499 0026 7A68     		ldr	r2, [r7, #4]
 1500 0028 1202     		lsl	r2, r2, #8
 1501 002a 0A43     		orr	r2, r1
 1502 002c 1A60     		str	r2, [r3]
1152:.\Generated_Source\PSoC4/PWM_1.c **** 
1153:.\Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 1503              		.loc 1 1153 0
 1504 002e 3B1C     		mov	r3, r7
 1505 0030 0F33     		add	r3, r3, #15
 1506 0032 1B78     		ldrb	r3, [r3]
 1507 0034 181C     		mov	r0, r3
 1508 0036 FFF7FEFF 		bl	CyExitCriticalSection
1154:.\Generated_Source\PSoC4/PWM_1.c **** }
 1509              		.loc 1 1154 0
 1510 003a BD46     		mov	sp, r7
 1511 003c 05B0     		add	sp, sp, #20
 1512              		@ sp needed
 1513 003e 90BD     		pop	{r4, r7, pc}
 1514              	.L101:
 1515              		.align	2
 1516              	.L100:
 1517 0040 24010540 		.word	1074069796
 1518 0044 FFFCFFFF 		.word	-769
 1519              		.cfi_endproc
 1520              	.LFE30:
 1521              		.size	PWM_1_SetStartMode, .-PWM_1_SetStartMode
 1522              		.section	.text.PWM_1_SetStopMode,"ax",%progbits
 1523              		.align	2
 1524              		.global	PWM_1_SetStopMode
 1525              		.code	16
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 48


 1526              		.thumb_func
 1527              		.type	PWM_1_SetStopMode, %function
 1528              	PWM_1_SetStopMode:
 1529              	.LFB31:
1155:.\Generated_Source\PSoC4/PWM_1.c **** 
1156:.\Generated_Source\PSoC4/PWM_1.c **** 
1157:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1158:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetStopMode
1159:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1160:.\Generated_Source\PSoC4/PWM_1.c **** *
1161:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
1162:.\Generated_Source\PSoC4/PWM_1.c **** *  Sets the stop trigger mode. For PWM mode this is the kill input.
1163:.\Generated_Source\PSoC4/PWM_1.c **** *
1164:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1165:.\Generated_Source\PSoC4/PWM_1.c **** *  triggerMode: Enumerated trigger mode value
1166:.\Generated_Source\PSoC4/PWM_1.c **** *   Values:
1167:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_LEVEL     - Level
1168:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_RISING    - Rising edge
1169:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_FALLING   - Falling edge
1170:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_BOTH      - Both rising and falling edge
1171:.\Generated_Source\PSoC4/PWM_1.c **** *
1172:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
1173:.\Generated_Source\PSoC4/PWM_1.c **** *  None
1174:.\Generated_Source\PSoC4/PWM_1.c **** *
1175:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1176:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetStopMode(uint32 triggerMode)
1177:.\Generated_Source\PSoC4/PWM_1.c **** {
 1530              		.loc 1 1177 0
 1531              		.cfi_startproc
 1532 0000 90B5     		push	{r4, r7, lr}
 1533              		.cfi_def_cfa_offset 12
 1534              		.cfi_offset 4, -12
 1535              		.cfi_offset 7, -8
 1536              		.cfi_offset 14, -4
 1537 0002 85B0     		sub	sp, sp, #20
 1538              		.cfi_def_cfa_offset 32
 1539 0004 00AF     		add	r7, sp, #0
 1540              		.cfi_def_cfa_register 7
 1541 0006 7860     		str	r0, [r7, #4]
1178:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
1179:.\Generated_Source\PSoC4/PWM_1.c **** 
1180:.\Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 1542              		.loc 1 1180 0
 1543 0008 3C1C     		mov	r4, r7
 1544 000a 0F34     		add	r4, r4, #15
 1545 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1546 0010 031C     		mov	r3, r0
 1547 0012 2370     		strb	r3, [r4]
1181:.\Generated_Source\PSoC4/PWM_1.c **** 
1182:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_TRIG_CONTROL1_REG &= (uint32)~PWM_1_STOP_MASK;
 1548              		.loc 1 1182 0
 1549 0014 0A4B     		ldr	r3, .L103
 1550 0016 0A4A     		ldr	r2, .L103
 1551 0018 1268     		ldr	r2, [r2]
 1552 001a C021     		mov	r1, #192
 1553 001c 8A43     		bic	r2, r1
 1554 001e 1A60     		str	r2, [r3]
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 49


1183:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << PWM_1_STOP_SHIFT));
 1555              		.loc 1 1183 0
 1556 0020 074B     		ldr	r3, .L103
 1557 0022 074A     		ldr	r2, .L103
 1558 0024 1168     		ldr	r1, [r2]
 1559 0026 7A68     		ldr	r2, [r7, #4]
 1560 0028 9201     		lsl	r2, r2, #6
 1561 002a 0A43     		orr	r2, r1
 1562 002c 1A60     		str	r2, [r3]
1184:.\Generated_Source\PSoC4/PWM_1.c **** 
1185:.\Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 1563              		.loc 1 1185 0
 1564 002e 3B1C     		mov	r3, r7
 1565 0030 0F33     		add	r3, r3, #15
 1566 0032 1B78     		ldrb	r3, [r3]
 1567 0034 181C     		mov	r0, r3
 1568 0036 FFF7FEFF 		bl	CyExitCriticalSection
1186:.\Generated_Source\PSoC4/PWM_1.c **** }
 1569              		.loc 1 1186 0
 1570 003a BD46     		mov	sp, r7
 1571 003c 05B0     		add	sp, sp, #20
 1572              		@ sp needed
 1573 003e 90BD     		pop	{r4, r7, pc}
 1574              	.L104:
 1575              		.align	2
 1576              	.L103:
 1577 0040 24010540 		.word	1074069796
 1578              		.cfi_endproc
 1579              	.LFE31:
 1580              		.size	PWM_1_SetStopMode, .-PWM_1_SetStopMode
 1581              		.section	.text.PWM_1_SetCountMode,"ax",%progbits
 1582              		.align	2
 1583              		.global	PWM_1_SetCountMode
 1584              		.code	16
 1585              		.thumb_func
 1586              		.type	PWM_1_SetCountMode, %function
 1587              	PWM_1_SetCountMode:
 1588              	.LFB32:
1187:.\Generated_Source\PSoC4/PWM_1.c **** 
1188:.\Generated_Source\PSoC4/PWM_1.c **** 
1189:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1190:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetCountMode
1191:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1192:.\Generated_Source\PSoC4/PWM_1.c **** *
1193:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
1194:.\Generated_Source\PSoC4/PWM_1.c **** *  Sets the count trigger mode. For Quadrature Decoder mode this is the phiA
1195:.\Generated_Source\PSoC4/PWM_1.c **** *  input.
1196:.\Generated_Source\PSoC4/PWM_1.c **** *
1197:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1198:.\Generated_Source\PSoC4/PWM_1.c **** *  triggerMode: Enumerated trigger mode value
1199:.\Generated_Source\PSoC4/PWM_1.c **** *   Values:
1200:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_LEVEL     - Level
1201:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_RISING    - Rising edge
1202:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_FALLING   - Falling edge
1203:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_TRIG_BOTH      - Both rising and falling edge
1204:.\Generated_Source\PSoC4/PWM_1.c **** *
1205:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 50


1206:.\Generated_Source\PSoC4/PWM_1.c **** *  None
1207:.\Generated_Source\PSoC4/PWM_1.c **** *
1208:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1209:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetCountMode(uint32 triggerMode)
1210:.\Generated_Source\PSoC4/PWM_1.c **** {
 1589              		.loc 1 1210 0
 1590              		.cfi_startproc
 1591 0000 90B5     		push	{r4, r7, lr}
 1592              		.cfi_def_cfa_offset 12
 1593              		.cfi_offset 4, -12
 1594              		.cfi_offset 7, -8
 1595              		.cfi_offset 14, -4
 1596 0002 85B0     		sub	sp, sp, #20
 1597              		.cfi_def_cfa_offset 32
 1598 0004 00AF     		add	r7, sp, #0
 1599              		.cfi_def_cfa_register 7
 1600 0006 7860     		str	r0, [r7, #4]
1211:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
1212:.\Generated_Source\PSoC4/PWM_1.c **** 
1213:.\Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 1601              		.loc 1 1213 0
 1602 0008 3C1C     		mov	r4, r7
 1603 000a 0F34     		add	r4, r4, #15
 1604 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1605 0010 031C     		mov	r3, r0
 1606 0012 2370     		strb	r3, [r4]
1214:.\Generated_Source\PSoC4/PWM_1.c **** 
1215:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_TRIG_CONTROL1_REG &= (uint32)~PWM_1_COUNT_MASK;
 1607              		.loc 1 1215 0
 1608 0014 0A4B     		ldr	r3, .L106
 1609 0016 0A4A     		ldr	r2, .L106
 1610 0018 1268     		ldr	r2, [r2]
 1611 001a 0C21     		mov	r1, #12
 1612 001c 8A43     		bic	r2, r1
 1613 001e 1A60     		str	r2, [r3]
1216:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << PWM_1_COUNT_SHIFT));
 1614              		.loc 1 1216 0
 1615 0020 074B     		ldr	r3, .L106
 1616 0022 074A     		ldr	r2, .L106
 1617 0024 1168     		ldr	r1, [r2]
 1618 0026 7A68     		ldr	r2, [r7, #4]
 1619 0028 9200     		lsl	r2, r2, #2
 1620 002a 0A43     		orr	r2, r1
 1621 002c 1A60     		str	r2, [r3]
1217:.\Generated_Source\PSoC4/PWM_1.c **** 
1218:.\Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 1622              		.loc 1 1218 0
 1623 002e 3B1C     		mov	r3, r7
 1624 0030 0F33     		add	r3, r3, #15
 1625 0032 1B78     		ldrb	r3, [r3]
 1626 0034 181C     		mov	r0, r3
 1627 0036 FFF7FEFF 		bl	CyExitCriticalSection
1219:.\Generated_Source\PSoC4/PWM_1.c **** }
 1628              		.loc 1 1219 0
 1629 003a BD46     		mov	sp, r7
 1630 003c 05B0     		add	sp, sp, #20
 1631              		@ sp needed
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 51


 1632 003e 90BD     		pop	{r4, r7, pc}
 1633              	.L107:
 1634              		.align	2
 1635              	.L106:
 1636 0040 24010540 		.word	1074069796
 1637              		.cfi_endproc
 1638              	.LFE32:
 1639              		.size	PWM_1_SetCountMode, .-PWM_1_SetCountMode
 1640              		.section	.text.PWM_1_TriggerCommand,"ax",%progbits
 1641              		.align	2
 1642              		.global	PWM_1_TriggerCommand
 1643              		.code	16
 1644              		.thumb_func
 1645              		.type	PWM_1_TriggerCommand, %function
 1646              	PWM_1_TriggerCommand:
 1647              	.LFB33:
1220:.\Generated_Source\PSoC4/PWM_1.c **** 
1221:.\Generated_Source\PSoC4/PWM_1.c **** 
1222:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1223:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_TriggerCommand
1224:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1225:.\Generated_Source\PSoC4/PWM_1.c **** *
1226:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
1227:.\Generated_Source\PSoC4/PWM_1.c **** *  Triggers the designated command to occur on the designated TCPWM instances.
1228:.\Generated_Source\PSoC4/PWM_1.c **** *  The mask can be used to apply this command simultaneously to more than one
1229:.\Generated_Source\PSoC4/PWM_1.c **** *  instance.  This allows multiple TCPWM instances to be synchronized.
1230:.\Generated_Source\PSoC4/PWM_1.c **** *
1231:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1232:.\Generated_Source\PSoC4/PWM_1.c **** *  mask: A combination of mask bits for each instance of the TCPWM that the
1233:.\Generated_Source\PSoC4/PWM_1.c **** *        command should apply to.  This function from one instance can be used
1234:.\Generated_Source\PSoC4/PWM_1.c **** *        to apply the command to any of the instances in the design.
1235:.\Generated_Source\PSoC4/PWM_1.c **** *        The mask value for a specific instance is available with the MASK
1236:.\Generated_Source\PSoC4/PWM_1.c **** *        define.
1237:.\Generated_Source\PSoC4/PWM_1.c **** *  command: Enumerated command values. Capture command only applicable for
1238:.\Generated_Source\PSoC4/PWM_1.c **** *           Timer/Counter with Capture and PWM modes.
1239:.\Generated_Source\PSoC4/PWM_1.c **** *   Values:
1240:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_CMD_CAPTURE    - Trigger Capture command
1241:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_CMD_RELOAD     - Trigger Reload command
1242:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_CMD_STOP       - Trigger Stop command
1243:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_CMD_START      - Trigger Start command
1244:.\Generated_Source\PSoC4/PWM_1.c **** *
1245:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
1246:.\Generated_Source\PSoC4/PWM_1.c **** *  None
1247:.\Generated_Source\PSoC4/PWM_1.c **** *
1248:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1249:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_TriggerCommand(uint32 mask, uint32 command)
1250:.\Generated_Source\PSoC4/PWM_1.c **** {
 1648              		.loc 1 1250 0
 1649              		.cfi_startproc
 1650 0000 90B5     		push	{r4, r7, lr}
 1651              		.cfi_def_cfa_offset 12
 1652              		.cfi_offset 4, -12
 1653              		.cfi_offset 7, -8
 1654              		.cfi_offset 14, -4
 1655 0002 85B0     		sub	sp, sp, #20
 1656              		.cfi_def_cfa_offset 32
 1657 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 52


 1658              		.cfi_def_cfa_register 7
 1659 0006 7860     		str	r0, [r7, #4]
 1660 0008 3960     		str	r1, [r7]
1251:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 enableInterrupts;
1252:.\Generated_Source\PSoC4/PWM_1.c **** 
1253:.\Generated_Source\PSoC4/PWM_1.c ****     enableInterrupts = CyEnterCriticalSection();
 1661              		.loc 1 1253 0
 1662 000a 3C1C     		mov	r4, r7
 1663 000c 0F34     		add	r4, r4, #15
 1664 000e FFF7FEFF 		bl	CyEnterCriticalSection
 1665 0012 031C     		mov	r3, r0
 1666 0014 2370     		strb	r3, [r4]
1254:.\Generated_Source\PSoC4/PWM_1.c **** 
1255:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_COMMAND_REG = ((uint32)(mask << command));
 1667              		.loc 1 1255 0
 1668 0016 084B     		ldr	r3, .L109
 1669 0018 3A68     		ldr	r2, [r7]
 1670 001a 7968     		ldr	r1, [r7, #4]
 1671 001c 081C     		mov	r0, r1
 1672 001e 9040     		lsl	r0, r0, r2
 1673 0020 021C     		mov	r2, r0
 1674 0022 1A60     		str	r2, [r3]
1256:.\Generated_Source\PSoC4/PWM_1.c **** 
1257:.\Generated_Source\PSoC4/PWM_1.c ****     CyExitCriticalSection(enableInterrupts);
 1675              		.loc 1 1257 0
 1676 0024 3B1C     		mov	r3, r7
 1677 0026 0F33     		add	r3, r3, #15
 1678 0028 1B78     		ldrb	r3, [r3]
 1679 002a 181C     		mov	r0, r3
 1680 002c FFF7FEFF 		bl	CyExitCriticalSection
1258:.\Generated_Source\PSoC4/PWM_1.c **** }
 1681              		.loc 1 1258 0
 1682 0030 BD46     		mov	sp, r7
 1683 0032 05B0     		add	sp, sp, #20
 1684              		@ sp needed
 1685 0034 90BD     		pop	{r4, r7, pc}
 1686              	.L110:
 1687 0036 C046     		.align	2
 1688              	.L109:
 1689 0038 08000540 		.word	1074069512
 1690              		.cfi_endproc
 1691              	.LFE33:
 1692              		.size	PWM_1_TriggerCommand, .-PWM_1_TriggerCommand
 1693              		.section	.text.PWM_1_ReadStatus,"ax",%progbits
 1694              		.align	2
 1695              		.global	PWM_1_ReadStatus
 1696              		.code	16
 1697              		.thumb_func
 1698              		.type	PWM_1_ReadStatus, %function
 1699              	PWM_1_ReadStatus:
 1700              	.LFB34:
1259:.\Generated_Source\PSoC4/PWM_1.c **** 
1260:.\Generated_Source\PSoC4/PWM_1.c **** 
1261:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1262:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_ReadStatus
1263:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1264:.\Generated_Source\PSoC4/PWM_1.c **** *
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 53


1265:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
1266:.\Generated_Source\PSoC4/PWM_1.c **** *  Reads the status of the PWM_1.
1267:.\Generated_Source\PSoC4/PWM_1.c **** *
1268:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1269:.\Generated_Source\PSoC4/PWM_1.c **** *  None
1270:.\Generated_Source\PSoC4/PWM_1.c **** *
1271:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
1272:.\Generated_Source\PSoC4/PWM_1.c **** *  Status
1273:.\Generated_Source\PSoC4/PWM_1.c **** *   Values:
1274:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_STATUS_DOWN    - Set if counting down
1275:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_STATUS_RUNNING - Set if counter is running
1276:.\Generated_Source\PSoC4/PWM_1.c **** *
1277:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1278:.\Generated_Source\PSoC4/PWM_1.c **** uint32 PWM_1_ReadStatus(void)
1279:.\Generated_Source\PSoC4/PWM_1.c **** {
 1701              		.loc 1 1279 0
 1702              		.cfi_startproc
 1703 0000 80B5     		push	{r7, lr}
 1704              		.cfi_def_cfa_offset 8
 1705              		.cfi_offset 7, -8
 1706              		.cfi_offset 14, -4
 1707 0002 00AF     		add	r7, sp, #0
 1708              		.cfi_def_cfa_register 7
1280:.\Generated_Source\PSoC4/PWM_1.c ****     return ((PWM_1_STATUS_REG >> PWM_1_RUNNING_STATUS_SHIFT) |
 1709              		.loc 1 1280 0
 1710 0004 054B     		ldr	r3, .L113
 1711 0006 1B68     		ldr	r3, [r3]
 1712 0008 9A0F     		lsr	r2, r3, #30
1281:.\Generated_Source\PSoC4/PWM_1.c ****             (PWM_1_STATUS_REG & PWM_1_STATUS_DOWN));
 1713              		.loc 1 1281 0
 1714 000a 044B     		ldr	r3, .L113
 1715 000c 1968     		ldr	r1, [r3]
 1716 000e 0123     		mov	r3, #1
 1717 0010 0B40     		and	r3, r1
1280:.\Generated_Source\PSoC4/PWM_1.c ****     return ((PWM_1_STATUS_REG >> PWM_1_RUNNING_STATUS_SHIFT) |
 1718              		.loc 1 1280 0
 1719 0012 1343     		orr	r3, r2
1282:.\Generated_Source\PSoC4/PWM_1.c **** }
 1720              		.loc 1 1282 0
 1721 0014 181C     		mov	r0, r3
 1722 0016 BD46     		mov	sp, r7
 1723              		@ sp needed
 1724 0018 80BD     		pop	{r7, pc}
 1725              	.L114:
 1726 001a C046     		.align	2
 1727              	.L113:
 1728 001c 04010540 		.word	1074069764
 1729              		.cfi_endproc
 1730              	.LFE34:
 1731              		.size	PWM_1_ReadStatus, .-PWM_1_ReadStatus
 1732              		.section	.text.PWM_1_SetInterruptMode,"ax",%progbits
 1733              		.align	2
 1734              		.global	PWM_1_SetInterruptMode
 1735              		.code	16
 1736              		.thumb_func
 1737              		.type	PWM_1_SetInterruptMode, %function
 1738              	PWM_1_SetInterruptMode:
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 54


 1739              	.LFB35:
1283:.\Generated_Source\PSoC4/PWM_1.c **** 
1284:.\Generated_Source\PSoC4/PWM_1.c **** 
1285:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1286:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetInterruptMode
1287:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1288:.\Generated_Source\PSoC4/PWM_1.c **** *
1289:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
1290:.\Generated_Source\PSoC4/PWM_1.c **** *  Sets the interrupt mask to control which interrupt
1291:.\Generated_Source\PSoC4/PWM_1.c **** *  requests generate the interrupt signal.
1292:.\Generated_Source\PSoC4/PWM_1.c **** *
1293:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1294:.\Generated_Source\PSoC4/PWM_1.c **** *   interruptMask: Mask of bits to be enabled
1295:.\Generated_Source\PSoC4/PWM_1.c **** *   Values:
1296:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_INTR_MASK_TC       - Terminal count mask
1297:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_INTR_MASK_CC_MATCH - Compare count / capture mask
1298:.\Generated_Source\PSoC4/PWM_1.c **** *
1299:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
1300:.\Generated_Source\PSoC4/PWM_1.c **** *  None
1301:.\Generated_Source\PSoC4/PWM_1.c **** *
1302:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1303:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetInterruptMode(uint32 interruptMask)
1304:.\Generated_Source\PSoC4/PWM_1.c **** {
 1740              		.loc 1 1304 0
 1741              		.cfi_startproc
 1742 0000 80B5     		push	{r7, lr}
 1743              		.cfi_def_cfa_offset 8
 1744              		.cfi_offset 7, -8
 1745              		.cfi_offset 14, -4
 1746 0002 82B0     		sub	sp, sp, #8
 1747              		.cfi_def_cfa_offset 16
 1748 0004 00AF     		add	r7, sp, #0
 1749              		.cfi_def_cfa_register 7
 1750 0006 7860     		str	r0, [r7, #4]
1305:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_INTERRUPT_MASK_REG =  interruptMask;
 1751              		.loc 1 1305 0
 1752 0008 024B     		ldr	r3, .L116
 1753 000a 7A68     		ldr	r2, [r7, #4]
 1754 000c 1A60     		str	r2, [r3]
1306:.\Generated_Source\PSoC4/PWM_1.c **** }
 1755              		.loc 1 1306 0
 1756 000e BD46     		mov	sp, r7
 1757 0010 02B0     		add	sp, sp, #8
 1758              		@ sp needed
 1759 0012 80BD     		pop	{r7, pc}
 1760              	.L117:
 1761              		.align	2
 1762              	.L116:
 1763 0014 38010540 		.word	1074069816
 1764              		.cfi_endproc
 1765              	.LFE35:
 1766              		.size	PWM_1_SetInterruptMode, .-PWM_1_SetInterruptMode
 1767              		.section	.text.PWM_1_GetInterruptSourceMasked,"ax",%progbits
 1768              		.align	2
 1769              		.global	PWM_1_GetInterruptSourceMasked
 1770              		.code	16
 1771              		.thumb_func
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 55


 1772              		.type	PWM_1_GetInterruptSourceMasked, %function
 1773              	PWM_1_GetInterruptSourceMasked:
 1774              	.LFB36:
1307:.\Generated_Source\PSoC4/PWM_1.c **** 
1308:.\Generated_Source\PSoC4/PWM_1.c **** 
1309:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1310:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_GetInterruptSourceMasked
1311:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1312:.\Generated_Source\PSoC4/PWM_1.c **** *
1313:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
1314:.\Generated_Source\PSoC4/PWM_1.c **** *  Gets the interrupt requests masked by the interrupt mask.
1315:.\Generated_Source\PSoC4/PWM_1.c **** *
1316:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1317:.\Generated_Source\PSoC4/PWM_1.c **** *   None
1318:.\Generated_Source\PSoC4/PWM_1.c **** *
1319:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
1320:.\Generated_Source\PSoC4/PWM_1.c **** *  Masked interrupt source
1321:.\Generated_Source\PSoC4/PWM_1.c **** *   Values:
1322:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_INTR_MASK_TC       - Terminal count mask
1323:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_INTR_MASK_CC_MATCH - Compare count / capture mask
1324:.\Generated_Source\PSoC4/PWM_1.c **** *
1325:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1326:.\Generated_Source\PSoC4/PWM_1.c **** uint32 PWM_1_GetInterruptSourceMasked(void)
1327:.\Generated_Source\PSoC4/PWM_1.c **** {
 1775              		.loc 1 1327 0
 1776              		.cfi_startproc
 1777 0000 80B5     		push	{r7, lr}
 1778              		.cfi_def_cfa_offset 8
 1779              		.cfi_offset 7, -8
 1780              		.cfi_offset 14, -4
 1781 0002 00AF     		add	r7, sp, #0
 1782              		.cfi_def_cfa_register 7
1328:.\Generated_Source\PSoC4/PWM_1.c ****     return (PWM_1_INTERRUPT_MASKED_REG);
 1783              		.loc 1 1328 0
 1784 0004 024B     		ldr	r3, .L120
 1785 0006 1B68     		ldr	r3, [r3]
1329:.\Generated_Source\PSoC4/PWM_1.c **** }
 1786              		.loc 1 1329 0
 1787 0008 181C     		mov	r0, r3
 1788 000a BD46     		mov	sp, r7
 1789              		@ sp needed
 1790 000c 80BD     		pop	{r7, pc}
 1791              	.L121:
 1792 000e C046     		.align	2
 1793              	.L120:
 1794 0010 3C010540 		.word	1074069820
 1795              		.cfi_endproc
 1796              	.LFE36:
 1797              		.size	PWM_1_GetInterruptSourceMasked, .-PWM_1_GetInterruptSourceMasked
 1798              		.section	.text.PWM_1_GetInterruptSource,"ax",%progbits
 1799              		.align	2
 1800              		.global	PWM_1_GetInterruptSource
 1801              		.code	16
 1802              		.thumb_func
 1803              		.type	PWM_1_GetInterruptSource, %function
 1804              	PWM_1_GetInterruptSource:
 1805              	.LFB37:
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 56


1330:.\Generated_Source\PSoC4/PWM_1.c **** 
1331:.\Generated_Source\PSoC4/PWM_1.c **** 
1332:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1333:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_GetInterruptSource
1334:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1335:.\Generated_Source\PSoC4/PWM_1.c **** *
1336:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
1337:.\Generated_Source\PSoC4/PWM_1.c **** *  Gets the interrupt requests (without masking).
1338:.\Generated_Source\PSoC4/PWM_1.c **** *
1339:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1340:.\Generated_Source\PSoC4/PWM_1.c **** *  None
1341:.\Generated_Source\PSoC4/PWM_1.c **** *
1342:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
1343:.\Generated_Source\PSoC4/PWM_1.c **** *  Interrupt request value
1344:.\Generated_Source\PSoC4/PWM_1.c **** *   Values:
1345:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_INTR_MASK_TC       - Terminal count mask
1346:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_INTR_MASK_CC_MATCH - Compare count / capture mask
1347:.\Generated_Source\PSoC4/PWM_1.c **** *
1348:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1349:.\Generated_Source\PSoC4/PWM_1.c **** uint32 PWM_1_GetInterruptSource(void)
1350:.\Generated_Source\PSoC4/PWM_1.c **** {
 1806              		.loc 1 1350 0
 1807              		.cfi_startproc
 1808 0000 80B5     		push	{r7, lr}
 1809              		.cfi_def_cfa_offset 8
 1810              		.cfi_offset 7, -8
 1811              		.cfi_offset 14, -4
 1812 0002 00AF     		add	r7, sp, #0
 1813              		.cfi_def_cfa_register 7
1351:.\Generated_Source\PSoC4/PWM_1.c ****     return (PWM_1_INTERRUPT_REQ_REG);
 1814              		.loc 1 1351 0
 1815 0004 024B     		ldr	r3, .L124
 1816 0006 1B68     		ldr	r3, [r3]
1352:.\Generated_Source\PSoC4/PWM_1.c **** }
 1817              		.loc 1 1352 0
 1818 0008 181C     		mov	r0, r3
 1819 000a BD46     		mov	sp, r7
 1820              		@ sp needed
 1821 000c 80BD     		pop	{r7, pc}
 1822              	.L125:
 1823 000e C046     		.align	2
 1824              	.L124:
 1825 0010 30010540 		.word	1074069808
 1826              		.cfi_endproc
 1827              	.LFE37:
 1828              		.size	PWM_1_GetInterruptSource, .-PWM_1_GetInterruptSource
 1829              		.section	.text.PWM_1_ClearInterrupt,"ax",%progbits
 1830              		.align	2
 1831              		.global	PWM_1_ClearInterrupt
 1832              		.code	16
 1833              		.thumb_func
 1834              		.type	PWM_1_ClearInterrupt, %function
 1835              	PWM_1_ClearInterrupt:
 1836              	.LFB38:
1353:.\Generated_Source\PSoC4/PWM_1.c **** 
1354:.\Generated_Source\PSoC4/PWM_1.c **** 
1355:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 57


1356:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_ClearInterrupt
1357:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1358:.\Generated_Source\PSoC4/PWM_1.c **** *
1359:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
1360:.\Generated_Source\PSoC4/PWM_1.c **** *  Clears the interrupt request.
1361:.\Generated_Source\PSoC4/PWM_1.c **** *
1362:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1363:.\Generated_Source\PSoC4/PWM_1.c **** *   interruptMask: Mask of interrupts to clear
1364:.\Generated_Source\PSoC4/PWM_1.c **** *   Values:
1365:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_INTR_MASK_TC       - Terminal count mask
1366:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_INTR_MASK_CC_MATCH - Compare count / capture mask
1367:.\Generated_Source\PSoC4/PWM_1.c **** *
1368:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
1369:.\Generated_Source\PSoC4/PWM_1.c **** *  None
1370:.\Generated_Source\PSoC4/PWM_1.c **** *
1371:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1372:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_ClearInterrupt(uint32 interruptMask)
1373:.\Generated_Source\PSoC4/PWM_1.c **** {
 1837              		.loc 1 1373 0
 1838              		.cfi_startproc
 1839 0000 80B5     		push	{r7, lr}
 1840              		.cfi_def_cfa_offset 8
 1841              		.cfi_offset 7, -8
 1842              		.cfi_offset 14, -4
 1843 0002 82B0     		sub	sp, sp, #8
 1844              		.cfi_def_cfa_offset 16
 1845 0004 00AF     		add	r7, sp, #0
 1846              		.cfi_def_cfa_register 7
 1847 0006 7860     		str	r0, [r7, #4]
1374:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_INTERRUPT_REQ_REG = interruptMask;
 1848              		.loc 1 1374 0
 1849 0008 024B     		ldr	r3, .L127
 1850 000a 7A68     		ldr	r2, [r7, #4]
 1851 000c 1A60     		str	r2, [r3]
1375:.\Generated_Source\PSoC4/PWM_1.c **** }
 1852              		.loc 1 1375 0
 1853 000e BD46     		mov	sp, r7
 1854 0010 02B0     		add	sp, sp, #8
 1855              		@ sp needed
 1856 0012 80BD     		pop	{r7, pc}
 1857              	.L128:
 1858              		.align	2
 1859              	.L127:
 1860 0014 30010540 		.word	1074069808
 1861              		.cfi_endproc
 1862              	.LFE38:
 1863              		.size	PWM_1_ClearInterrupt, .-PWM_1_ClearInterrupt
 1864              		.section	.text.PWM_1_SetInterrupt,"ax",%progbits
 1865              		.align	2
 1866              		.global	PWM_1_SetInterrupt
 1867              		.code	16
 1868              		.thumb_func
 1869              		.type	PWM_1_SetInterrupt, %function
 1870              	PWM_1_SetInterrupt:
 1871              	.LFB39:
1376:.\Generated_Source\PSoC4/PWM_1.c **** 
1377:.\Generated_Source\PSoC4/PWM_1.c **** 
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 58


1378:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
1379:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_SetInterrupt
1380:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
1381:.\Generated_Source\PSoC4/PWM_1.c **** *
1382:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
1383:.\Generated_Source\PSoC4/PWM_1.c **** *  Sets a software interrupt request.
1384:.\Generated_Source\PSoC4/PWM_1.c **** *
1385:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
1386:.\Generated_Source\PSoC4/PWM_1.c **** *   interruptMask: Mask of interrupts to set
1387:.\Generated_Source\PSoC4/PWM_1.c **** *   Values:
1388:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_INTR_MASK_TC       - Terminal count mask
1389:.\Generated_Source\PSoC4/PWM_1.c **** *     - PWM_1_INTR_MASK_CC_MATCH - Compare count / capture mask
1390:.\Generated_Source\PSoC4/PWM_1.c **** *
1391:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
1392:.\Generated_Source\PSoC4/PWM_1.c **** *  None
1393:.\Generated_Source\PSoC4/PWM_1.c **** *
1394:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
1395:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_SetInterrupt(uint32 interruptMask)
1396:.\Generated_Source\PSoC4/PWM_1.c **** {
 1872              		.loc 1 1396 0
 1873              		.cfi_startproc
 1874 0000 80B5     		push	{r7, lr}
 1875              		.cfi_def_cfa_offset 8
 1876              		.cfi_offset 7, -8
 1877              		.cfi_offset 14, -4
 1878 0002 82B0     		sub	sp, sp, #8
 1879              		.cfi_def_cfa_offset 16
 1880 0004 00AF     		add	r7, sp, #0
 1881              		.cfi_def_cfa_register 7
 1882 0006 7860     		str	r0, [r7, #4]
1397:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_INTERRUPT_SET_REG = interruptMask;
 1883              		.loc 1 1397 0
 1884 0008 024B     		ldr	r3, .L130
 1885 000a 7A68     		ldr	r2, [r7, #4]
 1886 000c 1A60     		str	r2, [r3]
1398:.\Generated_Source\PSoC4/PWM_1.c **** }
 1887              		.loc 1 1398 0
 1888 000e BD46     		mov	sp, r7
 1889 0010 02B0     		add	sp, sp, #8
 1890              		@ sp needed
 1891 0012 80BD     		pop	{r7, pc}
 1892              	.L131:
 1893              		.align	2
 1894              	.L130:
 1895 0014 34010540 		.word	1074069812
 1896              		.cfi_endproc
 1897              	.LFE39:
 1898              		.size	PWM_1_SetInterrupt, .-PWM_1_SetInterrupt
 1899              		.text
 1900              	.Letext0:
 1901              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1902              		.section	.debug_info,"",%progbits
 1903              	.Ldebug_info0:
 1904 0000 ED060000 		.4byte	0x6ed
 1905 0004 0400     		.2byte	0x4
 1906 0006 00000000 		.4byte	.Ldebug_abbrev0
 1907 000a 04       		.byte	0x4
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 59


 1908 000b 01       		.uleb128 0x1
 1909 000c B4020000 		.4byte	.LASF76
 1910 0010 01       		.byte	0x1
 1911 0011 2B020000 		.4byte	.LASF77
 1912 0015 88040000 		.4byte	.LASF78
 1913 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1914 001d 00000000 		.4byte	0
 1915 0021 00000000 		.4byte	.Ldebug_line0
 1916 0025 02       		.uleb128 0x2
 1917 0026 01       		.byte	0x1
 1918 0027 06       		.byte	0x6
 1919 0028 BA000000 		.4byte	.LASF0
 1920 002c 02       		.uleb128 0x2
 1921 002d 01       		.byte	0x1
 1922 002e 08       		.byte	0x8
 1923 002f 6A030000 		.4byte	.LASF1
 1924 0033 02       		.uleb128 0x2
 1925 0034 02       		.byte	0x2
 1926 0035 05       		.byte	0x5
 1927 0036 B3030000 		.4byte	.LASF2
 1928 003a 02       		.uleb128 0x2
 1929 003b 02       		.byte	0x2
 1930 003c 07       		.byte	0x7
 1931 003d AA010000 		.4byte	.LASF3
 1932 0041 02       		.uleb128 0x2
 1933 0042 04       		.byte	0x4
 1934 0043 05       		.byte	0x5
 1935 0044 EC000000 		.4byte	.LASF4
 1936 0048 02       		.uleb128 0x2
 1937 0049 04       		.byte	0x4
 1938 004a 07       		.byte	0x7
 1939 004b 6B010000 		.4byte	.LASF5
 1940 004f 02       		.uleb128 0x2
 1941 0050 08       		.byte	0x8
 1942 0051 05       		.byte	0x5
 1943 0052 AC000000 		.4byte	.LASF6
 1944 0056 02       		.uleb128 0x2
 1945 0057 08       		.byte	0x8
 1946 0058 07       		.byte	0x7
 1947 0059 58000000 		.4byte	.LASF7
 1948 005d 03       		.uleb128 0x3
 1949 005e 04       		.byte	0x4
 1950 005f 05       		.byte	0x5
 1951 0060 696E7400 		.ascii	"int\000"
 1952 0064 02       		.uleb128 0x2
 1953 0065 04       		.byte	0x4
 1954 0066 07       		.byte	0x7
 1955 0067 48010000 		.4byte	.LASF8
 1956 006b 04       		.uleb128 0x4
 1957 006c F5000000 		.4byte	.LASF9
 1958 0070 02       		.byte	0x2
 1959 0071 5B       		.byte	0x5b
 1960 0072 2C000000 		.4byte	0x2c
 1961 0076 04       		.uleb128 0x4
 1962 0077 27010000 		.4byte	.LASF10
 1963 007b 02       		.byte	0x2
 1964 007c 5D       		.byte	0x5d
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 60


 1965 007d 48000000 		.4byte	0x48
 1966 0081 02       		.uleb128 0x2
 1967 0082 04       		.byte	0x4
 1968 0083 04       		.byte	0x4
 1969 0084 A4020000 		.4byte	.LASF11
 1970 0088 02       		.uleb128 0x2
 1971 0089 08       		.byte	0x8
 1972 008a 04       		.byte	0x4
 1973 008b FB000000 		.4byte	.LASF12
 1974 008f 02       		.uleb128 0x2
 1975 0090 01       		.byte	0x1
 1976 0091 08       		.byte	0x8
 1977 0092 08040000 		.4byte	.LASF13
 1978 0096 04       		.uleb128 0x4
 1979 0097 E3010000 		.4byte	.LASF14
 1980 009b 02       		.byte	0x2
 1981 009c F2       		.byte	0xf2
 1982 009d A1000000 		.4byte	0xa1
 1983 00a1 05       		.uleb128 0x5
 1984 00a2 76000000 		.4byte	0x76
 1985 00a6 02       		.uleb128 0x2
 1986 00a7 04       		.byte	0x4
 1987 00a8 07       		.byte	0x7
 1988 00a9 13020000 		.4byte	.LASF15
 1989 00ad 06       		.uleb128 0x6
 1990 00ae D8010000 		.4byte	.LASF16
 1991 00b2 01       		.byte	0x1
 1992 00b3 27       		.byte	0x27
 1993 00b4 00000000 		.4byte	.LFB0
 1994 00b8 58000000 		.4byte	.LFE0-.LFB0
 1995 00bc 01       		.uleb128 0x1
 1996 00bd 9C       		.byte	0x9c
 1997 00be 07       		.uleb128 0x7
 1998 00bf CB010000 		.4byte	.LASF18
 1999 00c3 01       		.byte	0x1
 2000 00c4 C8       		.byte	0xc8
 2001 00c5 00000000 		.4byte	.LFB1
 2002 00c9 38000000 		.4byte	.LFE1-.LFB1
 2003 00cd 01       		.uleb128 0x1
 2004 00ce 9C       		.byte	0x9c
 2005 00cf E2000000 		.4byte	0xe2
 2006 00d3 08       		.uleb128 0x8
 2007 00d4 E1040000 		.4byte	.LASF20
 2008 00d8 01       		.byte	0x1
 2009 00d9 CA       		.byte	0xca
 2010 00da 6B000000 		.4byte	0x6b
 2011 00de 02       		.uleb128 0x2
 2012 00df 91       		.byte	0x91
 2013 00e0 6F       		.sleb128 -17
 2014 00e1 00       		.byte	0
 2015 00e2 06       		.uleb128 0x6
 2016 00e3 7C040000 		.4byte	.LASF17
 2017 00e7 01       		.byte	0x1
 2018 00e8 F7       		.byte	0xf7
 2019 00e9 00000000 		.4byte	.LFB2
 2020 00ed 24000000 		.4byte	.LFE2-.LFB2
 2021 00f1 01       		.uleb128 0x1
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 61


 2022 00f2 9C       		.byte	0x9c
 2023 00f3 09       		.uleb128 0x9
 2024 00f4 06000000 		.4byte	.LASF19
 2025 00f8 01       		.byte	0x1
 2026 00f9 1101     		.2byte	0x111
 2027 00fb 00000000 		.4byte	.LFB3
 2028 00ff 30000000 		.4byte	.LFE3-.LFB3
 2029 0103 01       		.uleb128 0x1
 2030 0104 9C       		.byte	0x9c
 2031 0105 19010000 		.4byte	0x119
 2032 0109 0A       		.uleb128 0xa
 2033 010a E1040000 		.4byte	.LASF20
 2034 010e 01       		.byte	0x1
 2035 010f 1301     		.2byte	0x113
 2036 0111 6B000000 		.4byte	0x6b
 2037 0115 02       		.uleb128 0x2
 2038 0116 91       		.byte	0x91
 2039 0117 6F       		.sleb128 -17
 2040 0118 00       		.byte	0
 2041 0119 09       		.uleb128 0x9
 2042 011a 55010000 		.4byte	.LASF21
 2043 011e 01       		.byte	0x1
 2044 011f 3601     		.2byte	0x136
 2045 0121 00000000 		.4byte	.LFB4
 2046 0125 48000000 		.4byte	.LFE4-.LFB4
 2047 0129 01       		.uleb128 0x1
 2048 012a 9C       		.byte	0x9c
 2049 012b 4E010000 		.4byte	0x14e
 2050 012f 0B       		.uleb128 0xb
 2051 0130 0D040000 		.4byte	.LASF23
 2052 0134 01       		.byte	0x1
 2053 0135 3601     		.2byte	0x136
 2054 0137 76000000 		.4byte	0x76
 2055 013b 02       		.uleb128 0x2
 2056 013c 91       		.byte	0x91
 2057 013d 64       		.sleb128 -28
 2058 013e 0A       		.uleb128 0xa
 2059 013f E1040000 		.4byte	.LASF20
 2060 0143 01       		.byte	0x1
 2061 0144 3801     		.2byte	0x138
 2062 0146 6B000000 		.4byte	0x6b
 2063 014a 02       		.uleb128 0x2
 2064 014b 91       		.byte	0x91
 2065 014c 6F       		.sleb128 -17
 2066 014d 00       		.byte	0
 2067 014e 09       		.uleb128 0x9
 2068 014f 27050000 		.4byte	.LASF22
 2069 0153 01       		.byte	0x1
 2070 0154 5701     		.2byte	0x157
 2071 0156 00000000 		.4byte	.LFB5
 2072 015a 48000000 		.4byte	.LFE5-.LFB5
 2073 015e 01       		.uleb128 0x1
 2074 015f 9C       		.byte	0x9c
 2075 0160 83010000 		.4byte	0x183
 2076 0164 0B       		.uleb128 0xb
 2077 0165 6F000000 		.4byte	.LASF24
 2078 0169 01       		.byte	0x1
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 62


 2079 016a 5701     		.2byte	0x157
 2080 016c 76000000 		.4byte	0x76
 2081 0170 02       		.uleb128 0x2
 2082 0171 91       		.byte	0x91
 2083 0172 64       		.sleb128 -28
 2084 0173 0A       		.uleb128 0xa
 2085 0174 E1040000 		.4byte	.LASF20
 2086 0178 01       		.byte	0x1
 2087 0179 5901     		.2byte	0x159
 2088 017b 6B000000 		.4byte	0x6b
 2089 017f 02       		.uleb128 0x2
 2090 0180 91       		.byte	0x91
 2091 0181 6F       		.sleb128 -17
 2092 0182 00       		.byte	0
 2093 0183 09       		.uleb128 0x9
 2094 0184 27040000 		.4byte	.LASF25
 2095 0188 01       		.byte	0x1
 2096 0189 7C01     		.2byte	0x17c
 2097 018b 00000000 		.4byte	.LFB6
 2098 018f 48000000 		.4byte	.LFE6-.LFB6
 2099 0193 01       		.uleb128 0x1
 2100 0194 9C       		.byte	0x9c
 2101 0195 B8010000 		.4byte	0x1b8
 2102 0199 0B       		.uleb128 0xb
 2103 019a AA020000 		.4byte	.LASF26
 2104 019e 01       		.byte	0x1
 2105 019f 7C01     		.2byte	0x17c
 2106 01a1 76000000 		.4byte	0x76
 2107 01a5 02       		.uleb128 0x2
 2108 01a6 91       		.byte	0x91
 2109 01a7 64       		.sleb128 -28
 2110 01a8 0A       		.uleb128 0xa
 2111 01a9 E1040000 		.4byte	.LASF20
 2112 01ad 01       		.byte	0x1
 2113 01ae 7E01     		.2byte	0x17e
 2114 01b0 6B000000 		.4byte	0x6b
 2115 01b4 02       		.uleb128 0x2
 2116 01b5 91       		.byte	0x91
 2117 01b6 6F       		.sleb128 -17
 2118 01b7 00       		.byte	0
 2119 01b8 09       		.uleb128 0x9
 2120 01b9 76000000 		.4byte	.LASF27
 2121 01bd 01       		.byte	0x1
 2122 01be 9C01     		.2byte	0x19c
 2123 01c0 00000000 		.4byte	.LFB7
 2124 01c4 4C000000 		.4byte	.LFE7-.LFB7
 2125 01c8 01       		.uleb128 0x1
 2126 01c9 9C       		.byte	0x9c
 2127 01ca ED010000 		.4byte	0x1ed
 2128 01ce 0B       		.uleb128 0xb
 2129 01cf BD010000 		.4byte	.LASF28
 2130 01d3 01       		.byte	0x1
 2131 01d4 9C01     		.2byte	0x19c
 2132 01d6 76000000 		.4byte	0x76
 2133 01da 02       		.uleb128 0x2
 2134 01db 91       		.byte	0x91
 2135 01dc 64       		.sleb128 -28
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 63


 2136 01dd 0A       		.uleb128 0xa
 2137 01de E1040000 		.4byte	.LASF20
 2138 01e2 01       		.byte	0x1
 2139 01e3 9E01     		.2byte	0x19e
 2140 01e5 6B000000 		.4byte	0x6b
 2141 01e9 02       		.uleb128 0x2
 2142 01ea 91       		.byte	0x91
 2143 01eb 6F       		.sleb128 -17
 2144 01ec 00       		.byte	0
 2145 01ed 0C       		.uleb128 0xc
 2146 01ee 54020000 		.4byte	.LASF29
 2147 01f2 01       		.byte	0x1
 2148 01f3 D201     		.2byte	0x1d2
 2149 01f5 00000000 		.4byte	.LFB8
 2150 01f9 1C000000 		.4byte	.LFE8-.LFB8
 2151 01fd 01       		.uleb128 0x1
 2152 01fe 9C       		.byte	0x9c
 2153 01ff 13020000 		.4byte	0x213
 2154 0203 0B       		.uleb128 0xb
 2155 0204 7D010000 		.4byte	.LASF30
 2156 0208 01       		.byte	0x1
 2157 0209 D201     		.2byte	0x1d2
 2158 020b 76000000 		.4byte	0x76
 2159 020f 02       		.uleb128 0x2
 2160 0210 91       		.byte	0x91
 2161 0211 74       		.sleb128 -12
 2162 0212 00       		.byte	0
 2163 0213 09       		.uleb128 0x9
 2164 0214 8D030000 		.4byte	.LASF31
 2165 0218 01       		.byte	0x1
 2166 0219 F601     		.2byte	0x1f6
 2167 021b 00000000 		.4byte	.LFB9
 2168 021f 48000000 		.4byte	.LFE9-.LFB9
 2169 0223 01       		.uleb128 0x1
 2170 0224 9C       		.byte	0x9c
 2171 0225 48020000 		.4byte	0x248
 2172 0229 0B       		.uleb128 0xb
 2173 022a 1C020000 		.4byte	.LASF32
 2174 022e 01       		.byte	0x1
 2175 022f F601     		.2byte	0x1f6
 2176 0231 76000000 		.4byte	0x76
 2177 0235 02       		.uleb128 0x2
 2178 0236 91       		.byte	0x91
 2179 0237 64       		.sleb128 -28
 2180 0238 0A       		.uleb128 0xa
 2181 0239 E1040000 		.4byte	.LASF20
 2182 023d 01       		.byte	0x1
 2183 023e F801     		.2byte	0x1f8
 2184 0240 6B000000 		.4byte	0x6b
 2185 0244 02       		.uleb128 0x2
 2186 0245 91       		.byte	0x91
 2187 0246 6F       		.sleb128 -17
 2188 0247 00       		.byte	0
 2189 0248 09       		.uleb128 0x9
 2190 0249 FC010000 		.4byte	.LASF33
 2191 024d 01       		.byte	0x1
 2192 024e 1802     		.2byte	0x218
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 64


 2193 0250 00000000 		.4byte	.LFB10
 2194 0254 48000000 		.4byte	.LFE10-.LFB10
 2195 0258 01       		.uleb128 0x1
 2196 0259 9C       		.byte	0x9c
 2197 025a 7D020000 		.4byte	0x27d
 2198 025e 0B       		.uleb128 0xb
 2199 025f A2030000 		.4byte	.LASF34
 2200 0263 01       		.byte	0x1
 2201 0264 1802     		.2byte	0x218
 2202 0266 76000000 		.4byte	0x76
 2203 026a 02       		.uleb128 0x2
 2204 026b 91       		.byte	0x91
 2205 026c 64       		.sleb128 -28
 2206 026d 0A       		.uleb128 0xa
 2207 026e E1040000 		.4byte	.LASF20
 2208 0272 01       		.byte	0x1
 2209 0273 1A02     		.2byte	0x21a
 2210 0275 6B000000 		.4byte	0x6b
 2211 0279 02       		.uleb128 0x2
 2212 027a 91       		.byte	0x91
 2213 027b 6F       		.sleb128 -17
 2214 027c 00       		.byte	0
 2215 027d 09       		.uleb128 0x9
 2216 027e 78030000 		.4byte	.LASF35
 2217 0282 01       		.byte	0x1
 2218 0283 3902     		.2byte	0x239
 2219 0285 00000000 		.4byte	.LFB11
 2220 0289 4C000000 		.4byte	.LFE11-.LFB11
 2221 028d 01       		.uleb128 0x1
 2222 028e 9C       		.byte	0x9c
 2223 028f B2020000 		.4byte	0x2b2
 2224 0293 0B       		.uleb128 0xb
 2225 0294 3F010000 		.4byte	.LASF36
 2226 0298 01       		.byte	0x1
 2227 0299 3902     		.2byte	0x239
 2228 029b 76000000 		.4byte	0x76
 2229 029f 02       		.uleb128 0x2
 2230 02a0 91       		.byte	0x91
 2231 02a1 64       		.sleb128 -28
 2232 02a2 0A       		.uleb128 0xa
 2233 02a3 E1040000 		.4byte	.LASF20
 2234 02a7 01       		.byte	0x1
 2235 02a8 3B02     		.2byte	0x23b
 2236 02aa 6B000000 		.4byte	0x6b
 2237 02ae 02       		.uleb128 0x2
 2238 02af 91       		.byte	0x91
 2239 02b0 6F       		.sleb128 -17
 2240 02b1 00       		.byte	0
 2241 02b2 09       		.uleb128 0x9
 2242 02b3 44030000 		.4byte	.LASF37
 2243 02b7 01       		.byte	0x1
 2244 02b8 5A02     		.2byte	0x25a
 2245 02ba 00000000 		.4byte	.LFB12
 2246 02be 48000000 		.4byte	.LFE12-.LFB12
 2247 02c2 01       		.uleb128 0x1
 2248 02c3 9C       		.byte	0x9c
 2249 02c4 E7020000 		.4byte	0x2e7
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 65


 2250 02c8 0B       		.uleb128 0xb
 2251 02c9 3A010000 		.4byte	.LASF38
 2252 02cd 01       		.byte	0x1
 2253 02ce 5A02     		.2byte	0x25a
 2254 02d0 76000000 		.4byte	0x76
 2255 02d4 02       		.uleb128 0x2
 2256 02d5 91       		.byte	0x91
 2257 02d6 64       		.sleb128 -28
 2258 02d7 0A       		.uleb128 0xa
 2259 02d8 E1040000 		.4byte	.LASF20
 2260 02dc 01       		.byte	0x1
 2261 02dd 5C02     		.2byte	0x25c
 2262 02df 6B000000 		.4byte	0x6b
 2263 02e3 02       		.uleb128 0x2
 2264 02e4 91       		.byte	0x91
 2265 02e5 6F       		.sleb128 -17
 2266 02e6 00       		.byte	0
 2267 02e7 0C       		.uleb128 0xc
 2268 02e8 E9010000 		.4byte	.LASF39
 2269 02ec 01       		.byte	0x1
 2270 02ed 7802     		.2byte	0x278
 2271 02ef 00000000 		.4byte	.LFB13
 2272 02f3 1C000000 		.4byte	.LFE13-.LFB13
 2273 02f7 01       		.uleb128 0x1
 2274 02f8 9C       		.byte	0x9c
 2275 02f9 0D030000 		.4byte	0x30d
 2276 02fd 0B       		.uleb128 0xb
 2277 02fe 00000000 		.4byte	.LASF40
 2278 0302 01       		.byte	0x1
 2279 0303 7802     		.2byte	0x278
 2280 0305 76000000 		.4byte	0x76
 2281 0309 02       		.uleb128 0x2
 2282 030a 91       		.byte	0x91
 2283 030b 74       		.sleb128 -12
 2284 030c 00       		.byte	0
 2285 030d 0D       		.uleb128 0xd
 2286 030e 02010000 		.4byte	.LASF45
 2287 0312 01       		.byte	0x1
 2288 0313 8C02     		.2byte	0x28c
 2289 0315 76000000 		.4byte	0x76
 2290 0319 00000000 		.4byte	.LFB14
 2291 031d 18000000 		.4byte	.LFE14-.LFB14
 2292 0321 01       		.uleb128 0x1
 2293 0322 9C       		.byte	0x9c
 2294 0323 09       		.uleb128 0x9
 2295 0324 65020000 		.4byte	.LASF41
 2296 0328 01       		.byte	0x1
 2297 0329 A902     		.2byte	0x2a9
 2298 032b 00000000 		.4byte	.LFB15
 2299 032f 48000000 		.4byte	.LFE15-.LFB15
 2300 0333 01       		.uleb128 0x1
 2301 0334 9C       		.byte	0x9c
 2302 0335 58030000 		.4byte	0x358
 2303 0339 0B       		.uleb128 0xb
 2304 033a 65040000 		.4byte	.LASF42
 2305 033e 01       		.byte	0x1
 2306 033f A902     		.2byte	0x2a9
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 66


 2307 0341 76000000 		.4byte	0x76
 2308 0345 02       		.uleb128 0x2
 2309 0346 91       		.byte	0x91
 2310 0347 64       		.sleb128 -28
 2311 0348 0A       		.uleb128 0xa
 2312 0349 E1040000 		.4byte	.LASF20
 2313 034d 01       		.byte	0x1
 2314 034e AB02     		.2byte	0x2ab
 2315 0350 6B000000 		.4byte	0x6b
 2316 0354 02       		.uleb128 0x2
 2317 0355 91       		.byte	0x91
 2318 0356 6F       		.sleb128 -17
 2319 0357 00       		.byte	0
 2320 0358 0C       		.uleb128 0xc
 2321 0359 F2040000 		.4byte	.LASF43
 2322 035d 01       		.byte	0x1
 2323 035e C602     		.2byte	0x2c6
 2324 0360 00000000 		.4byte	.LFB16
 2325 0364 1C000000 		.4byte	.LFE16-.LFB16
 2326 0368 01       		.uleb128 0x1
 2327 0369 9C       		.byte	0x9c
 2328 036a 7E030000 		.4byte	0x37e
 2329 036e 0B       		.uleb128 0xb
 2330 036f 51000000 		.4byte	.LASF44
 2331 0373 01       		.byte	0x1
 2332 0374 C602     		.2byte	0x2c6
 2333 0376 76000000 		.4byte	0x76
 2334 037a 02       		.uleb128 0x2
 2335 037b 91       		.byte	0x91
 2336 037c 74       		.sleb128 -12
 2337 037d 00       		.byte	0
 2338 037e 0D       		.uleb128 0xd
 2339 037f 86010000 		.4byte	.LASF46
 2340 0383 01       		.byte	0x1
 2341 0384 DA02     		.2byte	0x2da
 2342 0386 76000000 		.4byte	0x76
 2343 038a 00000000 		.4byte	.LFB17
 2344 038e 18000000 		.4byte	.LFE17-.LFB17
 2345 0392 01       		.uleb128 0x1
 2346 0393 9C       		.byte	0x9c
 2347 0394 09       		.uleb128 0x9
 2348 0395 8F020000 		.4byte	.LASF47
 2349 0399 01       		.byte	0x1
 2350 039a F402     		.2byte	0x2f4
 2351 039c 00000000 		.4byte	.LFB18
 2352 03a0 48000000 		.4byte	.LFE18-.LFB18
 2353 03a4 01       		.uleb128 0x1
 2354 03a5 9C       		.byte	0x9c
 2355 03a6 C9030000 		.4byte	0x3c9
 2356 03aa 0B       		.uleb128 0xb
 2357 03ab 37050000 		.4byte	.LASF48
 2358 03af 01       		.byte	0x1
 2359 03b0 F402     		.2byte	0x2f4
 2360 03b2 76000000 		.4byte	0x76
 2361 03b6 02       		.uleb128 0x2
 2362 03b7 91       		.byte	0x91
 2363 03b8 64       		.sleb128 -28
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 67


 2364 03b9 0A       		.uleb128 0xa
 2365 03ba E1040000 		.4byte	.LASF20
 2366 03be 01       		.byte	0x1
 2367 03bf F602     		.2byte	0x2f6
 2368 03c1 6B000000 		.4byte	0x6b
 2369 03c5 02       		.uleb128 0x2
 2370 03c6 91       		.byte	0x91
 2371 03c7 6F       		.sleb128 -17
 2372 03c8 00       		.byte	0
 2373 03c9 0C       		.uleb128 0xc
 2374 03ca 3C000000 		.4byte	.LASF49
 2375 03ce 01       		.byte	0x1
 2376 03cf 0F03     		.2byte	0x30f
 2377 03d1 00000000 		.4byte	.LFB19
 2378 03d5 1C000000 		.4byte	.LFE19-.LFB19
 2379 03d9 01       		.uleb128 0x1
 2380 03da 9C       		.byte	0x9c
 2381 03db EF030000 		.4byte	0x3ef
 2382 03df 0B       		.uleb128 0xb
 2383 03e0 42050000 		.4byte	.LASF50
 2384 03e4 01       		.byte	0x1
 2385 03e5 0F03     		.2byte	0x30f
 2386 03e7 76000000 		.4byte	0x76
 2387 03eb 02       		.uleb128 0x2
 2388 03ec 91       		.byte	0x91
 2389 03ed 74       		.sleb128 -12
 2390 03ee 00       		.byte	0
 2391 03ef 0D       		.uleb128 0xd
 2392 03f0 30030000 		.4byte	.LASF51
 2393 03f4 01       		.byte	0x1
 2394 03f5 2303     		.2byte	0x323
 2395 03f7 76000000 		.4byte	0x76
 2396 03fb 00000000 		.4byte	.LFB20
 2397 03ff 18000000 		.4byte	.LFE20-.LFB20
 2398 0403 01       		.uleb128 0x1
 2399 0404 9C       		.byte	0x9c
 2400 0405 09       		.uleb128 0x9
 2401 0406 BD030000 		.4byte	.LASF52
 2402 040a 01       		.byte	0x1
 2403 040b 3D03     		.2byte	0x33d
 2404 040d 00000000 		.4byte	.LFB21
 2405 0411 48000000 		.4byte	.LFE21-.LFB21
 2406 0415 01       		.uleb128 0x1
 2407 0416 9C       		.byte	0x9c
 2408 0417 3A040000 		.4byte	0x43a
 2409 041b 0B       		.uleb128 0xb
 2410 041c 37050000 		.4byte	.LASF48
 2411 0420 01       		.byte	0x1
 2412 0421 3D03     		.2byte	0x33d
 2413 0423 76000000 		.4byte	0x76
 2414 0427 02       		.uleb128 0x2
 2415 0428 91       		.byte	0x91
 2416 0429 64       		.sleb128 -28
 2417 042a 0A       		.uleb128 0xa
 2418 042b E1040000 		.4byte	.LASF20
 2419 042f 01       		.byte	0x1
 2420 0430 3F03     		.2byte	0x33f
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 68


 2421 0432 6B000000 		.4byte	0x6b
 2422 0436 02       		.uleb128 0x2
 2423 0437 91       		.byte	0x91
 2424 0438 6F       		.sleb128 -17
 2425 0439 00       		.byte	0
 2426 043a 0C       		.uleb128 0xc
 2427 043b 97010000 		.4byte	.LASF53
 2428 043f 01       		.byte	0x1
 2429 0440 5A03     		.2byte	0x35a
 2430 0442 00000000 		.4byte	.LFB22
 2431 0446 1C000000 		.4byte	.LFE22-.LFB22
 2432 044a 01       		.uleb128 0x1
 2433 044b 9C       		.byte	0x9c
 2434 044c 60040000 		.4byte	0x460
 2435 0450 0B       		.uleb128 0xb
 2436 0451 4C020000 		.4byte	.LASF54
 2437 0455 01       		.byte	0x1
 2438 0456 5A03     		.2byte	0x35a
 2439 0458 76000000 		.4byte	0x76
 2440 045c 02       		.uleb128 0x2
 2441 045d 91       		.byte	0x91
 2442 045e 74       		.sleb128 -12
 2443 045f 00       		.byte	0
 2444 0460 0D       		.uleb128 0xd
 2445 0461 87000000 		.4byte	.LASF55
 2446 0465 01       		.byte	0x1
 2447 0466 8403     		.2byte	0x384
 2448 0468 76000000 		.4byte	0x76
 2449 046c 00000000 		.4byte	.LFB23
 2450 0470 18000000 		.4byte	.LFE23-.LFB23
 2451 0474 01       		.uleb128 0x1
 2452 0475 9C       		.byte	0x9c
 2453 0476 0C       		.uleb128 0xc
 2454 0477 4F040000 		.4byte	.LASF56
 2455 047b 01       		.byte	0x1
 2456 047c B003     		.2byte	0x3b0
 2457 047e 00000000 		.4byte	.LFB24
 2458 0482 1C000000 		.4byte	.LFE24-.LFB24
 2459 0486 01       		.uleb128 0x1
 2460 0487 9C       		.byte	0x9c
 2461 0488 9C040000 		.4byte	0x49c
 2462 048c 0B       		.uleb128 0xb
 2463 048d 71040000 		.4byte	.LASF57
 2464 0491 01       		.byte	0x1
 2465 0492 B003     		.2byte	0x3b0
 2466 0494 76000000 		.4byte	0x76
 2467 0498 02       		.uleb128 0x2
 2468 0499 91       		.byte	0x91
 2469 049a 74       		.sleb128 -12
 2470 049b 00       		.byte	0
 2471 049c 0D       		.uleb128 0xd
 2472 049d 7A020000 		.4byte	.LASF58
 2473 04a1 01       		.byte	0x1
 2474 04a2 DA03     		.2byte	0x3da
 2475 04a4 76000000 		.4byte	0x76
 2476 04a8 00000000 		.4byte	.LFB25
 2477 04ac 18000000 		.4byte	.LFE25-.LFB25
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 69


 2478 04b0 01       		.uleb128 0x1
 2479 04b1 9C       		.byte	0x9c
 2480 04b2 0D       		.uleb128 0xd
 2481 04b3 11000000 		.4byte	.LASF59
 2482 04b7 01       		.byte	0x1
 2483 04b8 0604     		.2byte	0x406
 2484 04ba 76000000 		.4byte	0x76
 2485 04be 00000000 		.4byte	.LFB26
 2486 04c2 18000000 		.4byte	.LFE26-.LFB26
 2487 04c6 01       		.uleb128 0x1
 2488 04c7 9C       		.byte	0x9c
 2489 04c8 0D       		.uleb128 0xd
 2490 04c9 C6000000 		.4byte	.LASF60
 2491 04cd 01       		.byte	0x1
 2492 04ce 1B04     		.2byte	0x41b
 2493 04d0 76000000 		.4byte	0x76
 2494 04d4 00000000 		.4byte	.LFB27
 2495 04d8 18000000 		.4byte	.LFE27-.LFB27
 2496 04dc 01       		.uleb128 0x1
 2497 04dd 9C       		.byte	0x9c
 2498 04de 09       		.uleb128 0x9
 2499 04df 04050000 		.4byte	.LASF61
 2500 04e3 01       		.byte	0x1
 2501 04e4 3604     		.2byte	0x436
 2502 04e6 00000000 		.4byte	.LFB28
 2503 04ea 44000000 		.4byte	.LFE28-.LFB28
 2504 04ee 01       		.uleb128 0x1
 2505 04ef 9C       		.byte	0x9c
 2506 04f0 13050000 		.4byte	0x513
 2507 04f4 0B       		.uleb128 0xb
 2508 04f5 2E010000 		.4byte	.LASF62
 2509 04f9 01       		.byte	0x1
 2510 04fa 3604     		.2byte	0x436
 2511 04fc 76000000 		.4byte	0x76
 2512 0500 02       		.uleb128 0x2
 2513 0501 91       		.byte	0x91
 2514 0502 64       		.sleb128 -28
 2515 0503 0A       		.uleb128 0xa
 2516 0504 E1040000 		.4byte	.LASF20
 2517 0508 01       		.byte	0x1
 2518 0509 3804     		.2byte	0x438
 2519 050b 6B000000 		.4byte	0x6b
 2520 050f 02       		.uleb128 0x2
 2521 0510 91       		.byte	0x91
 2522 0511 6F       		.sleb128 -17
 2523 0512 00       		.byte	0
 2524 0513 09       		.uleb128 0x9
 2525 0514 CD040000 		.4byte	.LASF63
 2526 0518 01       		.byte	0x1
 2527 0519 5704     		.2byte	0x457
 2528 051b 00000000 		.4byte	.LFB29
 2529 051f 44000000 		.4byte	.LFE29-.LFB29
 2530 0523 01       		.uleb128 0x1
 2531 0524 9C       		.byte	0x9c
 2532 0525 48050000 		.4byte	0x548
 2533 0529 0B       		.uleb128 0xb
 2534 052a 2E010000 		.4byte	.LASF62
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 70


 2535 052e 01       		.byte	0x1
 2536 052f 5704     		.2byte	0x457
 2537 0531 76000000 		.4byte	0x76
 2538 0535 02       		.uleb128 0x2
 2539 0536 91       		.byte	0x91
 2540 0537 64       		.sleb128 -28
 2541 0538 0A       		.uleb128 0xa
 2542 0539 E1040000 		.4byte	.LASF20
 2543 053d 01       		.byte	0x1
 2544 053e 5904     		.2byte	0x459
 2545 0540 6B000000 		.4byte	0x6b
 2546 0544 02       		.uleb128 0x2
 2547 0545 91       		.byte	0x91
 2548 0546 6F       		.sleb128 -17
 2549 0547 00       		.byte	0
 2550 0548 09       		.uleb128 0x9
 2551 0549 57030000 		.4byte	.LASF64
 2552 054d 01       		.byte	0x1
 2553 054e 7804     		.2byte	0x478
 2554 0550 00000000 		.4byte	.LFB30
 2555 0554 48000000 		.4byte	.LFE30-.LFB30
 2556 0558 01       		.uleb128 0x1
 2557 0559 9C       		.byte	0x9c
 2558 055a 7D050000 		.4byte	0x57d
 2559 055e 0B       		.uleb128 0xb
 2560 055f 2E010000 		.4byte	.LASF62
 2561 0563 01       		.byte	0x1
 2562 0564 7804     		.2byte	0x478
 2563 0566 76000000 		.4byte	0x76
 2564 056a 02       		.uleb128 0x2
 2565 056b 91       		.byte	0x91
 2566 056c 64       		.sleb128 -28
 2567 056d 0A       		.uleb128 0xa
 2568 056e E1040000 		.4byte	.LASF20
 2569 0572 01       		.byte	0x1
 2570 0573 7A04     		.2byte	0x47a
 2571 0575 6B000000 		.4byte	0x6b
 2572 0579 02       		.uleb128 0x2
 2573 057a 91       		.byte	0x91
 2574 057b 6F       		.sleb128 -17
 2575 057c 00       		.byte	0
 2576 057d 09       		.uleb128 0x9
 2577 057e F6030000 		.4byte	.LASF65
 2578 0582 01       		.byte	0x1
 2579 0583 9804     		.2byte	0x498
 2580 0585 00000000 		.4byte	.LFB31
 2581 0589 44000000 		.4byte	.LFE31-.LFB31
 2582 058d 01       		.uleb128 0x1
 2583 058e 9C       		.byte	0x9c
 2584 058f B2050000 		.4byte	0x5b2
 2585 0593 0B       		.uleb128 0xb
 2586 0594 2E010000 		.4byte	.LASF62
 2587 0598 01       		.byte	0x1
 2588 0599 9804     		.2byte	0x498
 2589 059b 76000000 		.4byte	0x76
 2590 059f 02       		.uleb128 0x2
 2591 05a0 91       		.byte	0x91
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 71


 2592 05a1 64       		.sleb128 -28
 2593 05a2 0A       		.uleb128 0xa
 2594 05a3 E1040000 		.4byte	.LASF20
 2595 05a7 01       		.byte	0x1
 2596 05a8 9A04     		.2byte	0x49a
 2597 05aa 6B000000 		.4byte	0x6b
 2598 05ae 02       		.uleb128 0x2
 2599 05af 91       		.byte	0x91
 2600 05b0 6F       		.sleb128 -17
 2601 05b1 00       		.byte	0
 2602 05b2 09       		.uleb128 0x9
 2603 05b3 14010000 		.4byte	.LASF66
 2604 05b7 01       		.byte	0x1
 2605 05b8 B904     		.2byte	0x4b9
 2606 05ba 00000000 		.4byte	.LFB32
 2607 05be 44000000 		.4byte	.LFE32-.LFB32
 2608 05c2 01       		.uleb128 0x1
 2609 05c3 9C       		.byte	0x9c
 2610 05c4 E7050000 		.4byte	0x5e7
 2611 05c8 0B       		.uleb128 0xb
 2612 05c9 2E010000 		.4byte	.LASF62
 2613 05cd 01       		.byte	0x1
 2614 05ce B904     		.2byte	0x4b9
 2615 05d0 76000000 		.4byte	0x76
 2616 05d4 02       		.uleb128 0x2
 2617 05d5 91       		.byte	0x91
 2618 05d6 64       		.sleb128 -28
 2619 05d7 0A       		.uleb128 0xa
 2620 05d8 E1040000 		.4byte	.LASF20
 2621 05dc 01       		.byte	0x1
 2622 05dd BB04     		.2byte	0x4bb
 2623 05df 6B000000 		.4byte	0x6b
 2624 05e3 02       		.uleb128 0x2
 2625 05e4 91       		.byte	0x91
 2626 05e5 6F       		.sleb128 -17
 2627 05e6 00       		.byte	0
 2628 05e7 09       		.uleb128 0x9
 2629 05e8 12040000 		.4byte	.LASF67
 2630 05ec 01       		.byte	0x1
 2631 05ed E104     		.2byte	0x4e1
 2632 05ef 00000000 		.4byte	.LFB33
 2633 05f3 3C000000 		.4byte	.LFE33-.LFB33
 2634 05f7 01       		.uleb128 0x1
 2635 05f8 9C       		.byte	0x9c
 2636 05f9 2B060000 		.4byte	0x62b
 2637 05fd 0B       		.uleb128 0xb
 2638 05fe 3A010000 		.4byte	.LASF38
 2639 0602 01       		.byte	0x1
 2640 0603 E104     		.2byte	0x4e1
 2641 0605 76000000 		.4byte	0x76
 2642 0609 02       		.uleb128 0x2
 2643 060a 91       		.byte	0x91
 2644 060b 64       		.sleb128 -28
 2645 060c 0B       		.uleb128 0xb
 2646 060d 63010000 		.4byte	.LASF68
 2647 0611 01       		.byte	0x1
 2648 0612 E104     		.2byte	0x4e1
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 72


 2649 0614 76000000 		.4byte	0x76
 2650 0618 02       		.uleb128 0x2
 2651 0619 91       		.byte	0x91
 2652 061a 60       		.sleb128 -32
 2653 061b 0A       		.uleb128 0xa
 2654 061c E1040000 		.4byte	.LASF20
 2655 0620 01       		.byte	0x1
 2656 0621 E304     		.2byte	0x4e3
 2657 0623 6B000000 		.4byte	0x6b
 2658 0627 02       		.uleb128 0x2
 2659 0628 91       		.byte	0x91
 2660 0629 6F       		.sleb128 -17
 2661 062a 00       		.byte	0
 2662 062b 0D       		.uleb128 0xd
 2663 062c DB000000 		.4byte	.LASF69
 2664 0630 01       		.byte	0x1
 2665 0631 FE04     		.2byte	0x4fe
 2666 0633 76000000 		.4byte	0x76
 2667 0637 00000000 		.4byte	.LFB34
 2668 063b 20000000 		.4byte	.LFE34-.LFB34
 2669 063f 01       		.uleb128 0x1
 2670 0640 9C       		.byte	0x9c
 2671 0641 0C       		.uleb128 0xc
 2672 0642 DF030000 		.4byte	.LASF70
 2673 0646 01       		.byte	0x1
 2674 0647 1705     		.2byte	0x517
 2675 0649 00000000 		.4byte	.LFB35
 2676 064d 18000000 		.4byte	.LFE35-.LFB35
 2677 0651 01       		.uleb128 0x1
 2678 0652 9C       		.byte	0x9c
 2679 0653 67060000 		.4byte	0x667
 2680 0657 0B       		.uleb128 0xb
 2681 0658 D1030000 		.4byte	.LASF71
 2682 065c 01       		.byte	0x1
 2683 065d 1705     		.2byte	0x517
 2684 065f 76000000 		.4byte	0x76
 2685 0663 02       		.uleb128 0x2
 2686 0664 91       		.byte	0x91
 2687 0665 74       		.sleb128 -12
 2688 0666 00       		.byte	0
 2689 0667 0D       		.uleb128 0xd
 2690 0668 4C050000 		.4byte	.LASF72
 2691 066c 01       		.byte	0x1
 2692 066d 2E05     		.2byte	0x52e
 2693 066f 76000000 		.4byte	0x76
 2694 0673 00000000 		.4byte	.LFB36
 2695 0677 14000000 		.4byte	.LFE36-.LFB36
 2696 067b 01       		.uleb128 0x1
 2697 067c 9C       		.byte	0x9c
 2698 067d 0D       		.uleb128 0xd
 2699 067e 23000000 		.4byte	.LASF73
 2700 0682 01       		.byte	0x1
 2701 0683 4505     		.2byte	0x545
 2702 0685 76000000 		.4byte	0x76
 2703 0689 00000000 		.4byte	.LFB37
 2704 068d 14000000 		.4byte	.LFE37-.LFB37
 2705 0691 01       		.uleb128 0x1
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 73


 2706 0692 9C       		.byte	0x9c
 2707 0693 0C       		.uleb128 0xc
 2708 0694 3A040000 		.4byte	.LASF74
 2709 0698 01       		.byte	0x1
 2710 0699 5C05     		.2byte	0x55c
 2711 069b 00000000 		.4byte	.LFB38
 2712 069f 18000000 		.4byte	.LFE38-.LFB38
 2713 06a3 01       		.uleb128 0x1
 2714 06a4 9C       		.byte	0x9c
 2715 06a5 B9060000 		.4byte	0x6b9
 2716 06a9 0B       		.uleb128 0xb
 2717 06aa D1030000 		.4byte	.LASF71
 2718 06ae 01       		.byte	0x1
 2719 06af 5C05     		.2byte	0x55c
 2720 06b1 76000000 		.4byte	0x76
 2721 06b5 02       		.uleb128 0x2
 2722 06b6 91       		.byte	0x91
 2723 06b7 74       		.sleb128 -12
 2724 06b8 00       		.byte	0
 2725 06b9 0C       		.uleb128 0xc
 2726 06ba 99000000 		.4byte	.LASF75
 2727 06be 01       		.byte	0x1
 2728 06bf 7305     		.2byte	0x573
 2729 06c1 00000000 		.4byte	.LFB39
 2730 06c5 18000000 		.4byte	.LFE39-.LFB39
 2731 06c9 01       		.uleb128 0x1
 2732 06ca 9C       		.byte	0x9c
 2733 06cb DF060000 		.4byte	0x6df
 2734 06cf 0B       		.uleb128 0xb
 2735 06d0 D1030000 		.4byte	.LASF71
 2736 06d4 01       		.byte	0x1
 2737 06d5 7305     		.2byte	0x573
 2738 06d7 76000000 		.4byte	0x76
 2739 06db 02       		.uleb128 0x2
 2740 06dc 91       		.byte	0x91
 2741 06dd 74       		.sleb128 -12
 2742 06de 00       		.byte	0
 2743 06df 0E       		.uleb128 0xe
 2744 06e0 19050000 		.4byte	.LASF79
 2745 06e4 01       		.byte	0x1
 2746 06e5 16       		.byte	0x16
 2747 06e6 6B000000 		.4byte	0x6b
 2748 06ea 05       		.uleb128 0x5
 2749 06eb 03       		.byte	0x3
 2750 06ec 00000000 		.4byte	PWM_1_initVar
 2751 06f0 00       		.byte	0
 2752              		.section	.debug_abbrev,"",%progbits
 2753              	.Ldebug_abbrev0:
 2754 0000 01       		.uleb128 0x1
 2755 0001 11       		.uleb128 0x11
 2756 0002 01       		.byte	0x1
 2757 0003 25       		.uleb128 0x25
 2758 0004 0E       		.uleb128 0xe
 2759 0005 13       		.uleb128 0x13
 2760 0006 0B       		.uleb128 0xb
 2761 0007 03       		.uleb128 0x3
 2762 0008 0E       		.uleb128 0xe
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 74


 2763 0009 1B       		.uleb128 0x1b
 2764 000a 0E       		.uleb128 0xe
 2765 000b 55       		.uleb128 0x55
 2766 000c 17       		.uleb128 0x17
 2767 000d 11       		.uleb128 0x11
 2768 000e 01       		.uleb128 0x1
 2769 000f 10       		.uleb128 0x10
 2770 0010 17       		.uleb128 0x17
 2771 0011 00       		.byte	0
 2772 0012 00       		.byte	0
 2773 0013 02       		.uleb128 0x2
 2774 0014 24       		.uleb128 0x24
 2775 0015 00       		.byte	0
 2776 0016 0B       		.uleb128 0xb
 2777 0017 0B       		.uleb128 0xb
 2778 0018 3E       		.uleb128 0x3e
 2779 0019 0B       		.uleb128 0xb
 2780 001a 03       		.uleb128 0x3
 2781 001b 0E       		.uleb128 0xe
 2782 001c 00       		.byte	0
 2783 001d 00       		.byte	0
 2784 001e 03       		.uleb128 0x3
 2785 001f 24       		.uleb128 0x24
 2786 0020 00       		.byte	0
 2787 0021 0B       		.uleb128 0xb
 2788 0022 0B       		.uleb128 0xb
 2789 0023 3E       		.uleb128 0x3e
 2790 0024 0B       		.uleb128 0xb
 2791 0025 03       		.uleb128 0x3
 2792 0026 08       		.uleb128 0x8
 2793 0027 00       		.byte	0
 2794 0028 00       		.byte	0
 2795 0029 04       		.uleb128 0x4
 2796 002a 16       		.uleb128 0x16
 2797 002b 00       		.byte	0
 2798 002c 03       		.uleb128 0x3
 2799 002d 0E       		.uleb128 0xe
 2800 002e 3A       		.uleb128 0x3a
 2801 002f 0B       		.uleb128 0xb
 2802 0030 3B       		.uleb128 0x3b
 2803 0031 0B       		.uleb128 0xb
 2804 0032 49       		.uleb128 0x49
 2805 0033 13       		.uleb128 0x13
 2806 0034 00       		.byte	0
 2807 0035 00       		.byte	0
 2808 0036 05       		.uleb128 0x5
 2809 0037 35       		.uleb128 0x35
 2810 0038 00       		.byte	0
 2811 0039 49       		.uleb128 0x49
 2812 003a 13       		.uleb128 0x13
 2813 003b 00       		.byte	0
 2814 003c 00       		.byte	0
 2815 003d 06       		.uleb128 0x6
 2816 003e 2E       		.uleb128 0x2e
 2817 003f 00       		.byte	0
 2818 0040 3F       		.uleb128 0x3f
 2819 0041 19       		.uleb128 0x19
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 75


 2820 0042 03       		.uleb128 0x3
 2821 0043 0E       		.uleb128 0xe
 2822 0044 3A       		.uleb128 0x3a
 2823 0045 0B       		.uleb128 0xb
 2824 0046 3B       		.uleb128 0x3b
 2825 0047 0B       		.uleb128 0xb
 2826 0048 27       		.uleb128 0x27
 2827 0049 19       		.uleb128 0x19
 2828 004a 11       		.uleb128 0x11
 2829 004b 01       		.uleb128 0x1
 2830 004c 12       		.uleb128 0x12
 2831 004d 06       		.uleb128 0x6
 2832 004e 40       		.uleb128 0x40
 2833 004f 18       		.uleb128 0x18
 2834 0050 9642     		.uleb128 0x2116
 2835 0052 19       		.uleb128 0x19
 2836 0053 00       		.byte	0
 2837 0054 00       		.byte	0
 2838 0055 07       		.uleb128 0x7
 2839 0056 2E       		.uleb128 0x2e
 2840 0057 01       		.byte	0x1
 2841 0058 3F       		.uleb128 0x3f
 2842 0059 19       		.uleb128 0x19
 2843 005a 03       		.uleb128 0x3
 2844 005b 0E       		.uleb128 0xe
 2845 005c 3A       		.uleb128 0x3a
 2846 005d 0B       		.uleb128 0xb
 2847 005e 3B       		.uleb128 0x3b
 2848 005f 0B       		.uleb128 0xb
 2849 0060 27       		.uleb128 0x27
 2850 0061 19       		.uleb128 0x19
 2851 0062 11       		.uleb128 0x11
 2852 0063 01       		.uleb128 0x1
 2853 0064 12       		.uleb128 0x12
 2854 0065 06       		.uleb128 0x6
 2855 0066 40       		.uleb128 0x40
 2856 0067 18       		.uleb128 0x18
 2857 0068 9642     		.uleb128 0x2116
 2858 006a 19       		.uleb128 0x19
 2859 006b 01       		.uleb128 0x1
 2860 006c 13       		.uleb128 0x13
 2861 006d 00       		.byte	0
 2862 006e 00       		.byte	0
 2863 006f 08       		.uleb128 0x8
 2864 0070 34       		.uleb128 0x34
 2865 0071 00       		.byte	0
 2866 0072 03       		.uleb128 0x3
 2867 0073 0E       		.uleb128 0xe
 2868 0074 3A       		.uleb128 0x3a
 2869 0075 0B       		.uleb128 0xb
 2870 0076 3B       		.uleb128 0x3b
 2871 0077 0B       		.uleb128 0xb
 2872 0078 49       		.uleb128 0x49
 2873 0079 13       		.uleb128 0x13
 2874 007a 02       		.uleb128 0x2
 2875 007b 18       		.uleb128 0x18
 2876 007c 00       		.byte	0
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 76


 2877 007d 00       		.byte	0
 2878 007e 09       		.uleb128 0x9
 2879 007f 2E       		.uleb128 0x2e
 2880 0080 01       		.byte	0x1
 2881 0081 3F       		.uleb128 0x3f
 2882 0082 19       		.uleb128 0x19
 2883 0083 03       		.uleb128 0x3
 2884 0084 0E       		.uleb128 0xe
 2885 0085 3A       		.uleb128 0x3a
 2886 0086 0B       		.uleb128 0xb
 2887 0087 3B       		.uleb128 0x3b
 2888 0088 05       		.uleb128 0x5
 2889 0089 27       		.uleb128 0x27
 2890 008a 19       		.uleb128 0x19
 2891 008b 11       		.uleb128 0x11
 2892 008c 01       		.uleb128 0x1
 2893 008d 12       		.uleb128 0x12
 2894 008e 06       		.uleb128 0x6
 2895 008f 40       		.uleb128 0x40
 2896 0090 18       		.uleb128 0x18
 2897 0091 9642     		.uleb128 0x2116
 2898 0093 19       		.uleb128 0x19
 2899 0094 01       		.uleb128 0x1
 2900 0095 13       		.uleb128 0x13
 2901 0096 00       		.byte	0
 2902 0097 00       		.byte	0
 2903 0098 0A       		.uleb128 0xa
 2904 0099 34       		.uleb128 0x34
 2905 009a 00       		.byte	0
 2906 009b 03       		.uleb128 0x3
 2907 009c 0E       		.uleb128 0xe
 2908 009d 3A       		.uleb128 0x3a
 2909 009e 0B       		.uleb128 0xb
 2910 009f 3B       		.uleb128 0x3b
 2911 00a0 05       		.uleb128 0x5
 2912 00a1 49       		.uleb128 0x49
 2913 00a2 13       		.uleb128 0x13
 2914 00a3 02       		.uleb128 0x2
 2915 00a4 18       		.uleb128 0x18
 2916 00a5 00       		.byte	0
 2917 00a6 00       		.byte	0
 2918 00a7 0B       		.uleb128 0xb
 2919 00a8 05       		.uleb128 0x5
 2920 00a9 00       		.byte	0
 2921 00aa 03       		.uleb128 0x3
 2922 00ab 0E       		.uleb128 0xe
 2923 00ac 3A       		.uleb128 0x3a
 2924 00ad 0B       		.uleb128 0xb
 2925 00ae 3B       		.uleb128 0x3b
 2926 00af 05       		.uleb128 0x5
 2927 00b0 49       		.uleb128 0x49
 2928 00b1 13       		.uleb128 0x13
 2929 00b2 02       		.uleb128 0x2
 2930 00b3 18       		.uleb128 0x18
 2931 00b4 00       		.byte	0
 2932 00b5 00       		.byte	0
 2933 00b6 0C       		.uleb128 0xc
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 77


 2934 00b7 2E       		.uleb128 0x2e
 2935 00b8 01       		.byte	0x1
 2936 00b9 3F       		.uleb128 0x3f
 2937 00ba 19       		.uleb128 0x19
 2938 00bb 03       		.uleb128 0x3
 2939 00bc 0E       		.uleb128 0xe
 2940 00bd 3A       		.uleb128 0x3a
 2941 00be 0B       		.uleb128 0xb
 2942 00bf 3B       		.uleb128 0x3b
 2943 00c0 05       		.uleb128 0x5
 2944 00c1 27       		.uleb128 0x27
 2945 00c2 19       		.uleb128 0x19
 2946 00c3 11       		.uleb128 0x11
 2947 00c4 01       		.uleb128 0x1
 2948 00c5 12       		.uleb128 0x12
 2949 00c6 06       		.uleb128 0x6
 2950 00c7 40       		.uleb128 0x40
 2951 00c8 18       		.uleb128 0x18
 2952 00c9 9742     		.uleb128 0x2117
 2953 00cb 19       		.uleb128 0x19
 2954 00cc 01       		.uleb128 0x1
 2955 00cd 13       		.uleb128 0x13
 2956 00ce 00       		.byte	0
 2957 00cf 00       		.byte	0
 2958 00d0 0D       		.uleb128 0xd
 2959 00d1 2E       		.uleb128 0x2e
 2960 00d2 00       		.byte	0
 2961 00d3 3F       		.uleb128 0x3f
 2962 00d4 19       		.uleb128 0x19
 2963 00d5 03       		.uleb128 0x3
 2964 00d6 0E       		.uleb128 0xe
 2965 00d7 3A       		.uleb128 0x3a
 2966 00d8 0B       		.uleb128 0xb
 2967 00d9 3B       		.uleb128 0x3b
 2968 00da 05       		.uleb128 0x5
 2969 00db 27       		.uleb128 0x27
 2970 00dc 19       		.uleb128 0x19
 2971 00dd 49       		.uleb128 0x49
 2972 00de 13       		.uleb128 0x13
 2973 00df 11       		.uleb128 0x11
 2974 00e0 01       		.uleb128 0x1
 2975 00e1 12       		.uleb128 0x12
 2976 00e2 06       		.uleb128 0x6
 2977 00e3 40       		.uleb128 0x40
 2978 00e4 18       		.uleb128 0x18
 2979 00e5 9742     		.uleb128 0x2117
 2980 00e7 19       		.uleb128 0x19
 2981 00e8 00       		.byte	0
 2982 00e9 00       		.byte	0
 2983 00ea 0E       		.uleb128 0xe
 2984 00eb 34       		.uleb128 0x34
 2985 00ec 00       		.byte	0
 2986 00ed 03       		.uleb128 0x3
 2987 00ee 0E       		.uleb128 0xe
 2988 00ef 3A       		.uleb128 0x3a
 2989 00f0 0B       		.uleb128 0xb
 2990 00f1 3B       		.uleb128 0x3b
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 78


 2991 00f2 0B       		.uleb128 0xb
 2992 00f3 49       		.uleb128 0x49
 2993 00f4 13       		.uleb128 0x13
 2994 00f5 3F       		.uleb128 0x3f
 2995 00f6 19       		.uleb128 0x19
 2996 00f7 02       		.uleb128 0x2
 2997 00f8 18       		.uleb128 0x18
 2998 00f9 00       		.byte	0
 2999 00fa 00       		.byte	0
 3000 00fb 00       		.byte	0
 3001              		.section	.debug_aranges,"",%progbits
 3002 0000 54010000 		.4byte	0x154
 3003 0004 0200     		.2byte	0x2
 3004 0006 00000000 		.4byte	.Ldebug_info0
 3005 000a 04       		.byte	0x4
 3006 000b 00       		.byte	0
 3007 000c 0000     		.2byte	0
 3008 000e 0000     		.2byte	0
 3009 0010 00000000 		.4byte	.LFB0
 3010 0014 58000000 		.4byte	.LFE0-.LFB0
 3011 0018 00000000 		.4byte	.LFB1
 3012 001c 38000000 		.4byte	.LFE1-.LFB1
 3013 0020 00000000 		.4byte	.LFB2
 3014 0024 24000000 		.4byte	.LFE2-.LFB2
 3015 0028 00000000 		.4byte	.LFB3
 3016 002c 30000000 		.4byte	.LFE3-.LFB3
 3017 0030 00000000 		.4byte	.LFB4
 3018 0034 48000000 		.4byte	.LFE4-.LFB4
 3019 0038 00000000 		.4byte	.LFB5
 3020 003c 48000000 		.4byte	.LFE5-.LFB5
 3021 0040 00000000 		.4byte	.LFB6
 3022 0044 48000000 		.4byte	.LFE6-.LFB6
 3023 0048 00000000 		.4byte	.LFB7
 3024 004c 4C000000 		.4byte	.LFE7-.LFB7
 3025 0050 00000000 		.4byte	.LFB8
 3026 0054 1C000000 		.4byte	.LFE8-.LFB8
 3027 0058 00000000 		.4byte	.LFB9
 3028 005c 48000000 		.4byte	.LFE9-.LFB9
 3029 0060 00000000 		.4byte	.LFB10
 3030 0064 48000000 		.4byte	.LFE10-.LFB10
 3031 0068 00000000 		.4byte	.LFB11
 3032 006c 4C000000 		.4byte	.LFE11-.LFB11
 3033 0070 00000000 		.4byte	.LFB12
 3034 0074 48000000 		.4byte	.LFE12-.LFB12
 3035 0078 00000000 		.4byte	.LFB13
 3036 007c 1C000000 		.4byte	.LFE13-.LFB13
 3037 0080 00000000 		.4byte	.LFB14
 3038 0084 18000000 		.4byte	.LFE14-.LFB14
 3039 0088 00000000 		.4byte	.LFB15
 3040 008c 48000000 		.4byte	.LFE15-.LFB15
 3041 0090 00000000 		.4byte	.LFB16
 3042 0094 1C000000 		.4byte	.LFE16-.LFB16
 3043 0098 00000000 		.4byte	.LFB17
 3044 009c 18000000 		.4byte	.LFE17-.LFB17
 3045 00a0 00000000 		.4byte	.LFB18
 3046 00a4 48000000 		.4byte	.LFE18-.LFB18
 3047 00a8 00000000 		.4byte	.LFB19
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 79


 3048 00ac 1C000000 		.4byte	.LFE19-.LFB19
 3049 00b0 00000000 		.4byte	.LFB20
 3050 00b4 18000000 		.4byte	.LFE20-.LFB20
 3051 00b8 00000000 		.4byte	.LFB21
 3052 00bc 48000000 		.4byte	.LFE21-.LFB21
 3053 00c0 00000000 		.4byte	.LFB22
 3054 00c4 1C000000 		.4byte	.LFE22-.LFB22
 3055 00c8 00000000 		.4byte	.LFB23
 3056 00cc 18000000 		.4byte	.LFE23-.LFB23
 3057 00d0 00000000 		.4byte	.LFB24
 3058 00d4 1C000000 		.4byte	.LFE24-.LFB24
 3059 00d8 00000000 		.4byte	.LFB25
 3060 00dc 18000000 		.4byte	.LFE25-.LFB25
 3061 00e0 00000000 		.4byte	.LFB26
 3062 00e4 18000000 		.4byte	.LFE26-.LFB26
 3063 00e8 00000000 		.4byte	.LFB27
 3064 00ec 18000000 		.4byte	.LFE27-.LFB27
 3065 00f0 00000000 		.4byte	.LFB28
 3066 00f4 44000000 		.4byte	.LFE28-.LFB28
 3067 00f8 00000000 		.4byte	.LFB29
 3068 00fc 44000000 		.4byte	.LFE29-.LFB29
 3069 0100 00000000 		.4byte	.LFB30
 3070 0104 48000000 		.4byte	.LFE30-.LFB30
 3071 0108 00000000 		.4byte	.LFB31
 3072 010c 44000000 		.4byte	.LFE31-.LFB31
 3073 0110 00000000 		.4byte	.LFB32
 3074 0114 44000000 		.4byte	.LFE32-.LFB32
 3075 0118 00000000 		.4byte	.LFB33
 3076 011c 3C000000 		.4byte	.LFE33-.LFB33
 3077 0120 00000000 		.4byte	.LFB34
 3078 0124 20000000 		.4byte	.LFE34-.LFB34
 3079 0128 00000000 		.4byte	.LFB35
 3080 012c 18000000 		.4byte	.LFE35-.LFB35
 3081 0130 00000000 		.4byte	.LFB36
 3082 0134 14000000 		.4byte	.LFE36-.LFB36
 3083 0138 00000000 		.4byte	.LFB37
 3084 013c 14000000 		.4byte	.LFE37-.LFB37
 3085 0140 00000000 		.4byte	.LFB38
 3086 0144 18000000 		.4byte	.LFE38-.LFB38
 3087 0148 00000000 		.4byte	.LFB39
 3088 014c 18000000 		.4byte	.LFE39-.LFB39
 3089 0150 00000000 		.4byte	0
 3090 0154 00000000 		.4byte	0
 3091              		.section	.debug_ranges,"",%progbits
 3092              	.Ldebug_ranges0:
 3093 0000 00000000 		.4byte	.LFB0
 3094 0004 58000000 		.4byte	.LFE0
 3095 0008 00000000 		.4byte	.LFB1
 3096 000c 38000000 		.4byte	.LFE1
 3097 0010 00000000 		.4byte	.LFB2
 3098 0014 24000000 		.4byte	.LFE2
 3099 0018 00000000 		.4byte	.LFB3
 3100 001c 30000000 		.4byte	.LFE3
 3101 0020 00000000 		.4byte	.LFB4
 3102 0024 48000000 		.4byte	.LFE4
 3103 0028 00000000 		.4byte	.LFB5
 3104 002c 48000000 		.4byte	.LFE5
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 80


 3105 0030 00000000 		.4byte	.LFB6
 3106 0034 48000000 		.4byte	.LFE6
 3107 0038 00000000 		.4byte	.LFB7
 3108 003c 4C000000 		.4byte	.LFE7
 3109 0040 00000000 		.4byte	.LFB8
 3110 0044 1C000000 		.4byte	.LFE8
 3111 0048 00000000 		.4byte	.LFB9
 3112 004c 48000000 		.4byte	.LFE9
 3113 0050 00000000 		.4byte	.LFB10
 3114 0054 48000000 		.4byte	.LFE10
 3115 0058 00000000 		.4byte	.LFB11
 3116 005c 4C000000 		.4byte	.LFE11
 3117 0060 00000000 		.4byte	.LFB12
 3118 0064 48000000 		.4byte	.LFE12
 3119 0068 00000000 		.4byte	.LFB13
 3120 006c 1C000000 		.4byte	.LFE13
 3121 0070 00000000 		.4byte	.LFB14
 3122 0074 18000000 		.4byte	.LFE14
 3123 0078 00000000 		.4byte	.LFB15
 3124 007c 48000000 		.4byte	.LFE15
 3125 0080 00000000 		.4byte	.LFB16
 3126 0084 1C000000 		.4byte	.LFE16
 3127 0088 00000000 		.4byte	.LFB17
 3128 008c 18000000 		.4byte	.LFE17
 3129 0090 00000000 		.4byte	.LFB18
 3130 0094 48000000 		.4byte	.LFE18
 3131 0098 00000000 		.4byte	.LFB19
 3132 009c 1C000000 		.4byte	.LFE19
 3133 00a0 00000000 		.4byte	.LFB20
 3134 00a4 18000000 		.4byte	.LFE20
 3135 00a8 00000000 		.4byte	.LFB21
 3136 00ac 48000000 		.4byte	.LFE21
 3137 00b0 00000000 		.4byte	.LFB22
 3138 00b4 1C000000 		.4byte	.LFE22
 3139 00b8 00000000 		.4byte	.LFB23
 3140 00bc 18000000 		.4byte	.LFE23
 3141 00c0 00000000 		.4byte	.LFB24
 3142 00c4 1C000000 		.4byte	.LFE24
 3143 00c8 00000000 		.4byte	.LFB25
 3144 00cc 18000000 		.4byte	.LFE25
 3145 00d0 00000000 		.4byte	.LFB26
 3146 00d4 18000000 		.4byte	.LFE26
 3147 00d8 00000000 		.4byte	.LFB27
 3148 00dc 18000000 		.4byte	.LFE27
 3149 00e0 00000000 		.4byte	.LFB28
 3150 00e4 44000000 		.4byte	.LFE28
 3151 00e8 00000000 		.4byte	.LFB29
 3152 00ec 44000000 		.4byte	.LFE29
 3153 00f0 00000000 		.4byte	.LFB30
 3154 00f4 48000000 		.4byte	.LFE30
 3155 00f8 00000000 		.4byte	.LFB31
 3156 00fc 44000000 		.4byte	.LFE31
 3157 0100 00000000 		.4byte	.LFB32
 3158 0104 44000000 		.4byte	.LFE32
 3159 0108 00000000 		.4byte	.LFB33
 3160 010c 3C000000 		.4byte	.LFE33
 3161 0110 00000000 		.4byte	.LFB34
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 81


 3162 0114 20000000 		.4byte	.LFE34
 3163 0118 00000000 		.4byte	.LFB35
 3164 011c 18000000 		.4byte	.LFE35
 3165 0120 00000000 		.4byte	.LFB36
 3166 0124 14000000 		.4byte	.LFE36
 3167 0128 00000000 		.4byte	.LFB37
 3168 012c 14000000 		.4byte	.LFE37
 3169 0130 00000000 		.4byte	.LFB38
 3170 0134 18000000 		.4byte	.LFE38
 3171 0138 00000000 		.4byte	.LFB39
 3172 013c 18000000 		.4byte	.LFE39
 3173 0140 00000000 		.4byte	0
 3174 0144 00000000 		.4byte	0
 3175              		.section	.debug_line,"",%progbits
 3176              	.Ldebug_line0:
 3177 0000 76030000 		.section	.debug_str,"MS",%progbits,1
 3177      02004400 
 3177      00000201 
 3177      FB0E0D00 
 3177      01010101 
 3178              	.LASF40:
 3179 0000 636F756E 		.ascii	"count\000"
 3179      7400
 3180              	.LASF19:
 3181 0006 50574D5F 		.ascii	"PWM_1_Stop\000"
 3181      315F5374 
 3181      6F7000
 3182              	.LASF59:
 3183 0011 50574D5F 		.ascii	"PWM_1_ReadCapture\000"
 3183      315F5265 
 3183      61644361 
 3183      70747572 
 3183      6500
 3184              	.LASF73:
 3185 0023 50574D5F 		.ascii	"PWM_1_GetInterruptSource\000"
 3185      315F4765 
 3185      74496E74 
 3185      65727275 
 3185      7074536F 
 3186              	.LASF49:
 3187 003c 50574D5F 		.ascii	"PWM_1_WritePeriodBuf\000"
 3187      315F5772 
 3187      69746550 
 3187      6572696F 
 3187      64427566 
 3188              	.LASF44:
 3189 0051 70657269 		.ascii	"period\000"
 3189      6F6400
 3190              	.LASF7:
 3191 0058 6C6F6E67 		.ascii	"long long unsigned int\000"
 3191      206C6F6E 
 3191      6720756E 
 3191      7369676E 
 3191      65642069 
 3192              	.LASF24:
 3193 006f 71644D6F 		.ascii	"qdMode\000"
 3193      646500
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 82


 3194              	.LASF27:
 3195 0076 50574D5F 		.ascii	"PWM_1_SetOneShot\000"
 3195      315F5365 
 3195      744F6E65 
 3195      53686F74 
 3195      00
 3196              	.LASF55:
 3197 0087 50574D5F 		.ascii	"PWM_1_ReadCompare\000"
 3197      315F5265 
 3197      6164436F 
 3197      6D706172 
 3197      6500
 3198              	.LASF75:
 3199 0099 50574D5F 		.ascii	"PWM_1_SetInterrupt\000"
 3199      315F5365 
 3199      74496E74 
 3199      65727275 
 3199      707400
 3200              	.LASF6:
 3201 00ac 6C6F6E67 		.ascii	"long long int\000"
 3201      206C6F6E 
 3201      6720696E 
 3201      7400
 3202              	.LASF0:
 3203 00ba 7369676E 		.ascii	"signed char\000"
 3203      65642063 
 3203      68617200 
 3204              	.LASF60:
 3205 00c6 50574D5F 		.ascii	"PWM_1_ReadCaptureBuf\000"
 3205      315F5265 
 3205      61644361 
 3205      70747572 
 3205      65427566 
 3206              	.LASF69:
 3207 00db 50574D5F 		.ascii	"PWM_1_ReadStatus\000"
 3207      315F5265 
 3207      61645374 
 3207      61747573 
 3207      00
 3208              	.LASF4:
 3209 00ec 6C6F6E67 		.ascii	"long int\000"
 3209      20696E74 
 3209      00
 3210              	.LASF9:
 3211 00f5 75696E74 		.ascii	"uint8\000"
 3211      3800
 3212              	.LASF12:
 3213 00fb 646F7562 		.ascii	"double\000"
 3213      6C6500
 3214              	.LASF45:
 3215 0102 50574D5F 		.ascii	"PWM_1_ReadCounter\000"
 3215      315F5265 
 3215      6164436F 
 3215      756E7465 
 3215      7200
 3216              	.LASF66:
 3217 0114 50574D5F 		.ascii	"PWM_1_SetCountMode\000"
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 83


 3217      315F5365 
 3217      74436F75 
 3217      6E744D6F 
 3217      646500
 3218              	.LASF10:
 3219 0127 75696E74 		.ascii	"uint32\000"
 3219      333200
 3220              	.LASF62:
 3221 012e 74726967 		.ascii	"triggerMode\000"
 3221      6765724D 
 3221      6F646500 
 3222              	.LASF38:
 3223 013a 6D61736B 		.ascii	"mask\000"
 3223      00
 3224              	.LASF36:
 3225 013f 64656164 		.ascii	"deadTime\000"
 3225      54696D65 
 3225      00
 3226              	.LASF8:
 3227 0148 756E7369 		.ascii	"unsigned int\000"
 3227      676E6564 
 3227      20696E74 
 3227      00
 3228              	.LASF21:
 3229 0155 50574D5F 		.ascii	"PWM_1_SetMode\000"
 3229      315F5365 
 3229      744D6F64 
 3229      6500
 3230              	.LASF68:
 3231 0163 636F6D6D 		.ascii	"command\000"
 3231      616E6400 
 3232              	.LASF5:
 3233 016b 6C6F6E67 		.ascii	"long unsigned int\000"
 3233      20756E73 
 3233      69676E65 
 3233      6420696E 
 3233      7400
 3234              	.LASF30:
 3235 017d 6D6F6465 		.ascii	"modeMask\000"
 3235      4D61736B 
 3235      00
 3236              	.LASF46:
 3237 0186 50574D5F 		.ascii	"PWM_1_ReadPeriod\000"
 3237      315F5265 
 3237      61645065 
 3237      72696F64 
 3237      00
 3238              	.LASF53:
 3239 0197 50574D5F 		.ascii	"PWM_1_WriteCompare\000"
 3239      315F5772 
 3239      69746543 
 3239      6F6D7061 
 3239      726500
 3240              	.LASF3:
 3241 01aa 73686F72 		.ascii	"short unsigned int\000"
 3241      7420756E 
 3241      7369676E 
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 84


 3241      65642069 
 3241      6E7400
 3242              	.LASF28:
 3243 01bd 6F6E6553 		.ascii	"oneShotEnable\000"
 3243      686F7445 
 3243      6E61626C 
 3243      6500
 3244              	.LASF18:
 3245 01cb 50574D5F 		.ascii	"PWM_1_Enable\000"
 3245      315F456E 
 3245      61626C65 
 3245      00
 3246              	.LASF16:
 3247 01d8 50574D5F 		.ascii	"PWM_1_Init\000"
 3247      315F496E 
 3247      697400
 3248              	.LASF14:
 3249 01e3 72656733 		.ascii	"reg32\000"
 3249      3200
 3250              	.LASF39:
 3251 01e9 50574D5F 		.ascii	"PWM_1_WriteCounter\000"
 3251      315F5772 
 3251      69746543 
 3251      6F756E74 
 3251      657200
 3252              	.LASF33:
 3253 01fc 50574D5F 		.ascii	"PWM_1_SetPWMStopOnKill\000"
 3253      315F5365 
 3253      7450574D 
 3253      53746F70 
 3253      4F6E4B69 
 3254              	.LASF15:
 3255 0213 73697A65 		.ascii	"sizetype\000"
 3255      74797065 
 3255      00
 3256              	.LASF32:
 3257 021c 73796E63 		.ascii	"syncKillEnable\000"
 3257      4B696C6C 
 3257      456E6162 
 3257      6C6500
 3258              	.LASF77:
 3259 022b 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\PWM_1.c\000"
 3259      6E657261 
 3259      7465645F 
 3259      536F7572 
 3259      63655C50 
 3260              	.LASF54:
 3261 024c 636F6D70 		.ascii	"compare\000"
 3261      61726500 
 3262              	.LASF29:
 3263 0254 50574D5F 		.ascii	"PWM_1_SetPWMMode\000"
 3263      315F5365 
 3263      7450574D 
 3263      4D6F6465 
 3263      00
 3264              	.LASF41:
 3265 0265 50574D5F 		.ascii	"PWM_1_SetCounterMode\000"
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 85


 3265      315F5365 
 3265      74436F75 
 3265      6E746572 
 3265      4D6F6465 
 3266              	.LASF58:
 3267 027a 50574D5F 		.ascii	"PWM_1_ReadCompareBuf\000"
 3267      315F5265 
 3267      6164436F 
 3267      6D706172 
 3267      65427566 
 3268              	.LASF47:
 3269 028f 50574D5F 		.ascii	"PWM_1_SetCompareSwap\000"
 3269      315F5365 
 3269      74436F6D 
 3269      70617265 
 3269      53776170 
 3270              	.LASF11:
 3271 02a4 666C6F61 		.ascii	"float\000"
 3271      7400
 3272              	.LASF26:
 3273 02aa 70726573 		.ascii	"prescaler\000"
 3273      63616C65 
 3273      7200
 3274              	.LASF76:
 3275 02b4 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 3275      4320342E 
 3275      382E3420 
 3275      32303134 
 3275      30353236 
 3276 02e7 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 3276      20726576 
 3276      6973696F 
 3276      6E203231 
 3276      31333538 
 3277 031a 30202D66 		.ascii	"0 -ffunction-sections\000"
 3277      66756E63 
 3277      74696F6E 
 3277      2D736563 
 3277      74696F6E 
 3278              	.LASF51:
 3279 0330 50574D5F 		.ascii	"PWM_1_ReadPeriodBuf\000"
 3279      315F5265 
 3279      61645065 
 3279      72696F64 
 3279      42756600 
 3280              	.LASF37:
 3281 0344 50574D5F 		.ascii	"PWM_1_SetPWMInvert\000"
 3281      315F5365 
 3281      7450574D 
 3281      496E7665 
 3281      727400
 3282              	.LASF64:
 3283 0357 50574D5F 		.ascii	"PWM_1_SetStartMode\000"
 3283      315F5365 
 3283      74537461 
 3283      72744D6F 
 3283      646500
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 86


 3284              	.LASF1:
 3285 036a 756E7369 		.ascii	"unsigned char\000"
 3285      676E6564 
 3285      20636861 
 3285      7200
 3286              	.LASF35:
 3287 0378 50574D5F 		.ascii	"PWM_1_SetPWMDeadTime\000"
 3287      315F5365 
 3287      7450574D 
 3287      44656164 
 3287      54696D65 
 3288              	.LASF31:
 3289 038d 50574D5F 		.ascii	"PWM_1_SetPWMSyncKill\000"
 3289      315F5365 
 3289      7450574D 
 3289      53796E63 
 3289      4B696C6C 
 3290              	.LASF34:
 3291 03a2 73746F70 		.ascii	"stopOnKillEnable\000"
 3291      4F6E4B69 
 3291      6C6C456E 
 3291      61626C65 
 3291      00
 3292              	.LASF2:
 3293 03b3 73686F72 		.ascii	"short int\000"
 3293      7420696E 
 3293      7400
 3294              	.LASF52:
 3295 03bd 50574D5F 		.ascii	"PWM_1_SetPeriodSwap\000"
 3295      315F5365 
 3295      74506572 
 3295      696F6453 
 3295      77617000 
 3296              	.LASF71:
 3297 03d1 696E7465 		.ascii	"interruptMask\000"
 3297      72727570 
 3297      744D6173 
 3297      6B00
 3298              	.LASF70:
 3299 03df 50574D5F 		.ascii	"PWM_1_SetInterruptMode\000"
 3299      315F5365 
 3299      74496E74 
 3299      65727275 
 3299      70744D6F 
 3300              	.LASF65:
 3301 03f6 50574D5F 		.ascii	"PWM_1_SetStopMode\000"
 3301      315F5365 
 3301      7453746F 
 3301      704D6F64 
 3301      6500
 3302              	.LASF13:
 3303 0408 63686172 		.ascii	"char\000"
 3303      00
 3304              	.LASF23:
 3305 040d 6D6F6465 		.ascii	"mode\000"
 3305      00
 3306              	.LASF67:
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 87


 3307 0412 50574D5F 		.ascii	"PWM_1_TriggerCommand\000"
 3307      315F5472 
 3307      69676765 
 3307      72436F6D 
 3307      6D616E64 
 3308              	.LASF25:
 3309 0427 50574D5F 		.ascii	"PWM_1_SetPrescaler\000"
 3309      315F5365 
 3309      74507265 
 3309      7363616C 
 3309      657200
 3310              	.LASF74:
 3311 043a 50574D5F 		.ascii	"PWM_1_ClearInterrupt\000"
 3311      315F436C 
 3311      65617249 
 3311      6E746572 
 3311      72757074 
 3312              	.LASF56:
 3313 044f 50574D5F 		.ascii	"PWM_1_WriteCompareBuf\000"
 3313      315F5772 
 3313      69746543 
 3313      6F6D7061 
 3313      72654275 
 3314              	.LASF42:
 3315 0465 636F756E 		.ascii	"counterMode\000"
 3315      7465724D 
 3315      6F646500 
 3316              	.LASF57:
 3317 0471 636F6D70 		.ascii	"compareBuf\000"
 3317      61726542 
 3317      756600
 3318              	.LASF17:
 3319 047c 50574D5F 		.ascii	"PWM_1_Start\000"
 3319      315F5374 
 3319      61727400 
 3320              	.LASF78:
 3321 0488 433A5C55 		.ascii	"C:\\Users\\IEUser\\Documents\\GitHub\\piezo-sensor\\"
 3321      73657273 
 3321      5C494555 
 3321      7365725C 
 3321      446F6375 
 3322 04b6 4D792046 		.ascii	"My First Project.cydsn\000"
 3322      69727374 
 3322      2050726F 
 3322      6A656374 
 3322      2E637964 
 3323              	.LASF63:
 3324 04cd 50574D5F 		.ascii	"PWM_1_SetReloadMode\000"
 3324      315F5365 
 3324      7452656C 
 3324      6F61644D 
 3324      6F646500 
 3325              	.LASF20:
 3326 04e1 656E6162 		.ascii	"enableInterrupts\000"
 3326      6C65496E 
 3326      74657272 
 3326      75707473 
ARM GAS  C:\Users\IEUser\AppData\Local\Temp\ccxR1BXu.s 			page 88


 3326      00
 3327              	.LASF43:
 3328 04f2 50574D5F 		.ascii	"PWM_1_WritePeriod\000"
 3328      315F5772 
 3328      69746550 
 3328      6572696F 
 3328      6400
 3329              	.LASF61:
 3330 0504 50574D5F 		.ascii	"PWM_1_SetCaptureMode\000"
 3330      315F5365 
 3330      74436170 
 3330      74757265 
 3330      4D6F6465 
 3331              	.LASF79:
 3332 0519 50574D5F 		.ascii	"PWM_1_initVar\000"
 3332      315F696E 
 3332      69745661 
 3332      7200
 3333              	.LASF22:
 3334 0527 50574D5F 		.ascii	"PWM_1_SetQDMode\000"
 3334      315F5365 
 3334      7451444D 
 3334      6F646500 
 3335              	.LASF48:
 3336 0537 73776170 		.ascii	"swapEnable\000"
 3336      456E6162 
 3336      6C6500
 3337              	.LASF50:
 3338 0542 70657269 		.ascii	"periodBuf\000"
 3338      6F644275 
 3338      6600
 3339              	.LASF72:
 3340 054c 50574D5F 		.ascii	"PWM_1_GetInterruptSourceMasked\000"
 3340      315F4765 
 3340      74496E74 
 3340      65727275 
 3340      7074536F 
 3341              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
